
//line cte.rl:1
package cte

import (
    "fmt"
    "math"
    "time"
)

type CteDecoderCallbacks interface {
    OnNil() error
    OnBool(value bool) error
    OnPositiveInt(value uint64) error
    OnNegativeInt(value uint64) error
    OnDecimalFloat(significand int64, exponent int) error
    OnFloat(value float64) error
    OnDate(value time.Time) error
    OnTime(value time.Time) error
    OnTimestamp(value time.Time) error
    OnListBegin() error
    OnOrderedMapBegin() error
    OnUnorderedMapBegin() error
    OnMetadataMapBegin() error
    OnContainerEnd() error
//    OnBytesBegin() error
    OnStringBegin() error
    OnURIBegin() error
    OnCommentBegin() error
    OnArrayData(bytes []byte) error
    OnArrayEnd() error
}


//line cte.rl:363




//line cte.go:41
var _cte_actions []byte = []byte{
	0, 1, 0, 1, 1, 1, 2, 1, 3, 
	1, 4, 1, 5, 1, 6, 1, 7, 
	1, 8, 1, 9, 1, 10, 1, 11, 
	1, 12, 1, 13, 1, 14, 1, 15, 
	1, 16, 1, 17, 1, 18, 1, 19, 
	1, 20, 1, 21, 1, 22, 1, 23, 
	1, 24, 1, 25, 1, 26, 1, 27, 
	1, 28, 1, 29, 1, 30, 1, 31, 
	1, 32, 1, 33, 1, 34, 1, 35, 
	1, 36, 1, 37, 1, 38, 1, 39, 
	1, 40, 1, 41, 2, 14, 38, 2, 
	14, 39, 2, 14, 40, 2, 14, 41, 
	2, 15, 38, 2, 15, 39, 2, 15, 
	40, 2, 15, 41, 2, 16, 38, 2, 
	16, 39, 2, 16, 40, 2, 16, 41, 
	2, 19, 38, 2, 19, 39, 2, 19, 
	40, 2, 19, 41, 
}

var _cte_key_offsets []int16 = []int16{
	0, 0, 19, 22, 24, 27, 29, 30, 
	32, 36, 38, 42, 44, 46, 50, 54, 
	59, 63, 65, 67, 68, 69, 70, 71, 
	72, 73, 74, 75, 76, 77, 78, 80, 
	82, 84, 86, 91, 95, 98, 118, 121, 
	130, 132, 135, 137, 144, 149, 150, 152, 
	160, 164, 166, 173, 178, 197, 201, 213, 
	215, 222, 224, 231, 235, 245, 249, 254, 
	258, 260, 267, 269, 270, 271, 272, 273, 
	274, 275, 276, 277, 278, 279, 295, 298, 
	308, 314, 316, 335, 338, 347, 349, 352, 
	354, 361, 366, 367, 369, 377, 381, 383, 
	390, 395, 399, 411, 413, 420, 422, 429, 
	433, 443, 447, 452, 456, 458, 465, 467, 
	468, 469, 470, 471, 472, 473, 474, 475, 
	476, 477, 479, 482, 484, 492, 498, 499, 
	501, 510, 514, 516, 524, 539, 543, 556, 
	558, 566, 568, 576, 580, 591, 595, 600, 
	604, 606, 614, 616, 617, 618, 619, 620, 
	621, 622, 623, 624, 640, 643, 653, 659, 
	661, 680, 683, 692, 694, 697, 699, 706, 
	711, 712, 714, 722, 726, 728, 735, 740, 
	744, 756, 758, 765, 767, 774, 778, 788, 
	792, 797, 801, 803, 810, 812, 813, 814, 
	815, 816, 817, 818, 819, 820, 821, 822, 
	824, 827, 829, 837, 843, 844, 846, 855, 
	859, 861, 869, 884, 888, 901, 903, 911, 
	913, 921, 925, 936, 940, 945, 949, 951, 
	959, 961, 962, 963, 964, 965, 966, 967, 
	968, 969, 985, 988, 998, 1004, 1006, 1025, 
	1028, 1037, 1039, 1042, 1044, 1051, 1056, 1057, 
	1059, 1067, 1071, 1073, 1080, 1085, 1089, 1101, 
	1103, 1110, 1112, 1119, 1123, 1133, 1137, 1142, 
	1146, 1148, 1155, 1157, 1158, 1159, 1160, 1161, 
	1162, 1163, 1164, 1165, 1166, 1167, 1169, 1172, 
	1174, 1182, 1188, 1189, 1191, 1200, 1204, 1206, 
	1214, 1229, 1233, 1246, 1248, 1256, 1258, 1266, 
	1270, 1281, 1285, 1290, 1294, 1296, 1304, 1306, 
	1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 
	1322, 1326, 1332, 1336, 1343, 1349, 1360, 1366, 
	1372, 1381, 1387, 1387, 1389, 1389, 1389, 1389, 
	1389, 1389, 
}

var _cte_trans_keys []byte = []byte{
	0, 13, 32, 34, 40, 45, 47, 48, 
	60, 91, 102, 110, 116, 117, 123, 9, 
	10, 49, 57, 0, 48, 57, 48, 57, 
	45, 48, 57, 48, 57, 45, 48, 57, 
	43, 45, 48, 57, 48, 57, 0, 48, 
	49, 57, 48, 49, 48, 55, 48, 57, 
	97, 102, 48, 57, 97, 102, 112, 48, 
	57, 97, 102, 43, 45, 48, 57, 48, 
	57, 42, 47, 97, 108, 115, 101, 105, 
	108, 114, 117, 101, 34, 10, 42, 47, 
	42, 47, 42, 47, 34, 92, 34, 92, 
	110, 114, 116, 32, 33, 35, 126, 34, 
	32, 126, 0, 13, 32, 34, 40, 45, 
	47, 48, 60, 91, 93, 102, 110, 116, 
	117, 123, 9, 10, 49, 57, 0, 48, 
	57, 13, 32, 45, 46, 93, 9, 10, 
	48, 57, 48, 57, 45, 48, 57, 48, 
	57, 13, 32, 93, 9, 10, 48, 57, 
	13, 32, 93, 9, 10, 45, 48, 57, 
	13, 32, 93, 101, 9, 10, 48, 57, 
	43, 45, 48, 57, 48, 57, 13, 32, 
	93, 9, 10, 48, 57, 13, 32, 93, 
	9, 10, 0, 13, 32, 34, 40, 45, 
	47, 48, 60, 91, 102, 110, 116, 117, 
	123, 9, 10, 49, 57, 0, 48, 49, 
	57, 13, 32, 45, 46, 93, 98, 111, 
	120, 9, 10, 48, 57, 48, 49, 13, 
	32, 93, 9, 10, 48, 49, 48, 55, 
	13, 32, 93, 9, 10, 48, 55, 48, 
	57, 97, 102, 13, 32, 46, 93, 9, 
	10, 48, 57, 97, 102, 48, 57, 97, 
	102, 112, 48, 57, 97, 102, 43, 45, 
	48, 57, 48, 57, 13, 32, 93, 9, 
	10, 48, 57, 42, 47, 97, 108, 115, 
	101, 105, 108, 114, 117, 101, 34, 0, 
	13, 32, 34, 40, 45, 47, 48, 102, 
	116, 117, 125, 9, 10, 49, 57, 0, 
	48, 57, 13, 32, 45, 46, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 42, 47, 0, 13, 32, 34, 
	40, 45, 47, 48, 60, 91, 102, 110, 
	116, 117, 123, 9, 10, 49, 57, 0, 
	48, 57, 13, 32, 45, 46, 125, 9, 
	10, 48, 57, 48, 57, 45, 48, 57, 
	48, 57, 13, 32, 125, 9, 10, 48, 
	57, 13, 32, 125, 9, 10, 45, 48, 
	57, 13, 32, 101, 125, 9, 10, 48, 
	57, 43, 45, 48, 57, 48, 57, 13, 
	32, 125, 9, 10, 48, 57, 13, 32, 
	125, 9, 10, 0, 48, 49, 57, 13, 
	32, 45, 46, 98, 111, 120, 125, 9, 
	10, 48, 57, 48, 49, 13, 32, 125, 
	9, 10, 48, 49, 48, 55, 13, 32, 
	125, 9, 10, 48, 55, 48, 57, 97, 
	102, 13, 32, 46, 125, 9, 10, 48, 
	57, 97, 102, 48, 57, 97, 102, 112, 
	48, 57, 97, 102, 43, 45, 48, 57, 
	48, 57, 13, 32, 125, 9, 10, 48, 
	57, 42, 47, 97, 108, 115, 101, 105, 
	108, 114, 117, 101, 34, 48, 57, 45, 
	48, 57, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 45, 48, 57, 13, 32, 47, 
	61, 101, 9, 10, 48, 57, 43, 45, 
	48, 57, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 0, 13, 32, 34, 
	40, 45, 47, 48, 102, 116, 117, 9, 
	10, 49, 57, 0, 48, 49, 57, 13, 
	32, 45, 46, 47, 61, 98, 111, 120, 
	9, 10, 48, 57, 48, 49, 13, 32, 
	47, 61, 9, 10, 48, 49, 48, 55, 
	13, 32, 47, 61, 9, 10, 48, 55, 
	48, 57, 97, 102, 13, 32, 46, 47, 
	61, 9, 10, 48, 57, 97, 102, 48, 
	57, 97, 102, 112, 48, 57, 97, 102, 
	43, 45, 48, 57, 48, 57, 13, 32, 
	47, 61, 9, 10, 48, 57, 42, 47, 
	97, 108, 115, 101, 114, 117, 101, 34, 
	0, 13, 32, 34, 40, 45, 47, 48, 
	62, 102, 116, 117, 9, 10, 49, 57, 
	0, 48, 57, 13, 32, 45, 46, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 42, 47, 0, 13, 32, 
	34, 40, 45, 47, 48, 60, 91, 102, 
	110, 116, 117, 123, 9, 10, 49, 57, 
	0, 48, 57, 13, 32, 45, 46, 62, 
	9, 10, 48, 57, 48, 57, 45, 48, 
	57, 48, 57, 13, 32, 62, 9, 10, 
	48, 57, 13, 32, 62, 9, 10, 45, 
	48, 57, 13, 32, 62, 101, 9, 10, 
	48, 57, 43, 45, 48, 57, 48, 57, 
	13, 32, 62, 9, 10, 48, 57, 13, 
	32, 62, 9, 10, 0, 48, 49, 57, 
	13, 32, 45, 46, 62, 98, 111, 120, 
	9, 10, 48, 57, 48, 49, 13, 32, 
	62, 9, 10, 48, 49, 48, 55, 13, 
	32, 62, 9, 10, 48, 55, 48, 57, 
	97, 102, 13, 32, 46, 62, 9, 10, 
	48, 57, 97, 102, 48, 57, 97, 102, 
	112, 48, 57, 97, 102, 43, 45, 48, 
	57, 48, 57, 13, 32, 62, 9, 10, 
	48, 57, 42, 47, 97, 108, 115, 101, 
	105, 108, 114, 117, 101, 34, 48, 57, 
	45, 48, 57, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 45, 48, 57, 13, 32, 
	47, 61, 101, 9, 10, 48, 57, 43, 
	45, 48, 57, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 0, 13, 32, 
	34, 40, 45, 47, 48, 102, 116, 117, 
	9, 10, 49, 57, 0, 48, 49, 57, 
	13, 32, 45, 46, 47, 61, 98, 111, 
	120, 9, 10, 48, 57, 48, 49, 13, 
	32, 47, 61, 9, 10, 48, 49, 48, 
	55, 13, 32, 47, 61, 9, 10, 48, 
	55, 48, 57, 97, 102, 13, 32, 46, 
	47, 61, 9, 10, 48, 57, 97, 102, 
	48, 57, 97, 102, 112, 48, 57, 97, 
	102, 43, 45, 48, 57, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 42, 
	47, 97, 108, 115, 101, 114, 117, 101, 
	34, 0, 13, 32, 34, 40, 41, 45, 
	47, 48, 102, 116, 117, 9, 10, 49, 
	57, 0, 48, 57, 13, 32, 45, 46, 
	47, 61, 9, 10, 48, 57, 13, 32, 
	47, 61, 9, 10, 42, 47, 0, 13, 
	32, 34, 40, 45, 47, 48, 60, 91, 
	102, 110, 116, 117, 123, 9, 10, 49, 
	57, 0, 48, 57, 13, 32, 41, 45, 
	46, 9, 10, 48, 57, 48, 57, 45, 
	48, 57, 48, 57, 13, 32, 41, 9, 
	10, 48, 57, 13, 32, 41, 9, 10, 
	45, 48, 57, 13, 32, 41, 101, 9, 
	10, 48, 57, 43, 45, 48, 57, 48, 
	57, 13, 32, 41, 9, 10, 48, 57, 
	13, 32, 41, 9, 10, 0, 48, 49, 
	57, 13, 32, 41, 45, 46, 98, 111, 
	120, 9, 10, 48, 57, 48, 49, 13, 
	32, 41, 9, 10, 48, 49, 48, 55, 
	13, 32, 41, 9, 10, 48, 55, 48, 
	57, 97, 102, 13, 32, 41, 46, 9, 
	10, 48, 57, 97, 102, 48, 57, 97, 
	102, 112, 48, 57, 97, 102, 43, 45, 
	48, 57, 48, 57, 13, 32, 41, 9, 
	10, 48, 57, 42, 47, 97, 108, 115, 
	101, 105, 108, 114, 117, 101, 34, 48, 
	57, 45, 48, 57, 48, 57, 13, 32, 
	47, 61, 9, 10, 48, 57, 13, 32, 
	47, 61, 9, 10, 45, 48, 57, 13, 
	32, 47, 61, 101, 9, 10, 48, 57, 
	43, 45, 48, 57, 48, 57, 13, 32, 
	47, 61, 9, 10, 48, 57, 0, 13, 
	32, 34, 40, 45, 47, 48, 102, 116, 
	117, 9, 10, 49, 57, 0, 48, 49, 
	57, 13, 32, 45, 46, 47, 61, 98, 
	111, 120, 9, 10, 48, 57, 48, 49, 
	13, 32, 47, 61, 9, 10, 48, 49, 
	48, 55, 13, 32, 47, 61, 9, 10, 
	48, 55, 48, 57, 97, 102, 13, 32, 
	46, 47, 61, 9, 10, 48, 57, 97, 
	102, 48, 57, 97, 102, 112, 48, 57, 
	97, 102, 43, 45, 48, 57, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	42, 47, 97, 108, 115, 101, 114, 117, 
	101, 34, 13, 32, 45, 46, 9, 10, 
	48, 57, 13, 32, 9, 10, 13, 32, 
	9, 10, 48, 57, 13, 32, 9, 10, 
	13, 32, 101, 9, 10, 48, 57, 13, 
	32, 9, 10, 48, 57, 13, 32, 45, 
	46, 98, 111, 120, 9, 10, 48, 57, 
	13, 32, 9, 10, 48, 49, 13, 32, 
	9, 10, 48, 55, 13, 32, 46, 9, 
	10, 48, 57, 97, 102, 13, 32, 9, 
	10, 48, 57, 42, 47, 
}

var _cte_single_lengths []byte = []byte{
	0, 15, 1, 0, 1, 0, 1, 0, 
	2, 0, 2, 0, 0, 0, 0, 1, 
	2, 0, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	2, 2, 5, 0, 1, 16, 1, 5, 
	0, 1, 0, 3, 3, 1, 0, 4, 
	2, 0, 3, 3, 15, 2, 8, 0, 
	3, 0, 3, 0, 4, 0, 1, 2, 
	0, 3, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 12, 1, 6, 
	4, 2, 15, 1, 5, 0, 1, 0, 
	3, 3, 1, 0, 4, 2, 0, 3, 
	3, 2, 8, 0, 3, 0, 3, 0, 
	4, 0, 1, 2, 0, 3, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 0, 4, 4, 1, 0, 
	5, 2, 0, 4, 11, 2, 9, 0, 
	4, 0, 4, 0, 5, 0, 1, 2, 
	0, 4, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 12, 1, 6, 4, 2, 
	15, 1, 5, 0, 1, 0, 3, 3, 
	1, 0, 4, 2, 0, 3, 3, 2, 
	8, 0, 3, 0, 3, 0, 4, 0, 
	1, 2, 0, 3, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 0, 4, 4, 1, 0, 5, 2, 
	0, 4, 11, 2, 9, 0, 4, 0, 
	4, 0, 5, 0, 1, 2, 0, 4, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 12, 1, 6, 4, 2, 15, 1, 
	5, 0, 1, 0, 3, 3, 1, 0, 
	4, 2, 0, 3, 3, 2, 8, 0, 
	3, 0, 3, 0, 4, 0, 1, 2, 
	0, 3, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 0, 
	4, 4, 1, 0, 5, 2, 0, 4, 
	11, 2, 9, 0, 4, 0, 4, 0, 
	5, 0, 1, 2, 0, 4, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 4, 
	2, 2, 2, 3, 2, 7, 2, 2, 
	3, 2, 0, 2, 0, 0, 0, 0, 
	0, 0, 
}

var _cte_range_lengths []byte = []byte{
	0, 2, 1, 1, 1, 1, 0, 1, 
	1, 1, 1, 1, 1, 2, 2, 2, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 1, 2, 1, 2, 
	1, 1, 1, 2, 1, 0, 1, 2, 
	1, 1, 2, 1, 2, 1, 2, 1, 
	2, 1, 2, 2, 3, 2, 2, 1, 
	1, 2, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 2, 1, 2, 
	1, 0, 2, 1, 2, 1, 1, 1, 
	2, 1, 0, 1, 2, 1, 1, 2, 
	1, 1, 2, 1, 2, 1, 2, 2, 
	3, 2, 2, 1, 1, 2, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 2, 1, 0, 1, 
	2, 1, 1, 2, 2, 1, 2, 1, 
	2, 1, 2, 2, 3, 2, 2, 1, 
	1, 2, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 1, 2, 1, 0, 
	2, 1, 2, 1, 1, 1, 2, 1, 
	0, 1, 2, 1, 1, 2, 1, 1, 
	2, 1, 2, 1, 2, 2, 3, 2, 
	2, 1, 1, 2, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 2, 1, 0, 1, 2, 1, 
	1, 2, 2, 1, 2, 1, 2, 1, 
	2, 2, 3, 2, 2, 1, 1, 2, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 2, 1, 2, 1, 0, 2, 1, 
	2, 1, 1, 1, 2, 1, 0, 1, 
	2, 1, 1, 2, 1, 1, 2, 1, 
	2, 1, 2, 2, 3, 2, 2, 1, 
	1, 2, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	2, 1, 0, 1, 2, 1, 1, 2, 
	2, 1, 2, 1, 2, 1, 2, 2, 
	3, 2, 2, 1, 1, 2, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	1, 2, 1, 2, 2, 2, 2, 2, 
	3, 2, 0, 0, 0, 0, 0, 0, 
	0, 0, 
}

var _cte_index_offsets []int16 = []int16{
	0, 0, 18, 21, 23, 26, 28, 30, 
	32, 36, 38, 42, 44, 46, 49, 52, 
	56, 60, 62, 65, 67, 69, 71, 73, 
	75, 77, 79, 81, 83, 85, 87, 90, 
	93, 96, 99, 105, 108, 111, 130, 133, 
	141, 143, 146, 148, 154, 159, 161, 163, 
	170, 174, 176, 182, 187, 205, 209, 220, 
	222, 228, 230, 236, 239, 247, 250, 254, 
	258, 260, 266, 269, 271, 273, 275, 277, 
	279, 281, 283, 285, 287, 289, 304, 307, 
	316, 322, 325, 343, 346, 354, 356, 359, 
	361, 367, 372, 374, 376, 383, 387, 389, 
	395, 400, 404, 415, 417, 423, 425, 431, 
	434, 442, 445, 449, 453, 455, 461, 464, 
	466, 468, 470, 472, 474, 476, 478, 480, 
	482, 484, 486, 489, 491, 498, 504, 506, 
	508, 516, 520, 522, 529, 543, 547, 559, 
	561, 568, 570, 577, 580, 589, 592, 596, 
	600, 602, 609, 612, 614, 616, 618, 620, 
	622, 624, 626, 628, 643, 646, 655, 661, 
	664, 682, 685, 693, 695, 698, 700, 706, 
	711, 713, 715, 722, 726, 728, 734, 739, 
	743, 754, 756, 762, 764, 770, 773, 781, 
	784, 788, 792, 794, 800, 803, 805, 807, 
	809, 811, 813, 815, 817, 819, 821, 823, 
	825, 828, 830, 837, 843, 845, 847, 855, 
	859, 861, 868, 882, 886, 898, 900, 907, 
	909, 916, 919, 928, 931, 935, 939, 941, 
	948, 951, 953, 955, 957, 959, 961, 963, 
	965, 967, 982, 985, 994, 1000, 1003, 1021, 
	1024, 1032, 1034, 1037, 1039, 1045, 1050, 1052, 
	1054, 1061, 1065, 1067, 1073, 1078, 1082, 1093, 
	1095, 1101, 1103, 1109, 1112, 1120, 1123, 1127, 
	1131, 1133, 1139, 1142, 1144, 1146, 1148, 1150, 
	1152, 1154, 1156, 1158, 1160, 1162, 1164, 1167, 
	1169, 1176, 1182, 1184, 1186, 1194, 1198, 1200, 
	1207, 1221, 1225, 1237, 1239, 1246, 1248, 1255, 
	1258, 1267, 1270, 1274, 1278, 1280, 1287, 1290, 
	1292, 1294, 1296, 1298, 1300, 1302, 1304, 1306, 
	1313, 1317, 1322, 1326, 1332, 1337, 1347, 1352, 
	1357, 1364, 1369, 1370, 1373, 1374, 1375, 1376, 
	1377, 1378, 
}

var _cte_trans_targs []int16 = []int16{
	2, 1, 1, 312, 1, 10, 18, 317, 
	312, 312, 19, 23, 25, 28, 312, 1, 
	311, 0, 2, 311, 0, 4, 0, 5, 
	6, 0, 313, 0, 5, 0, 315, 0, 
	9, 9, 316, 0, 316, 0, 2, 317, 
	311, 0, 318, 0, 319, 0, 320, 320, 
	0, 15, 15, 0, 16, 15, 15, 0, 
	17, 17, 321, 0, 321, 0, 1, 1, 
	0, 20, 0, 21, 0, 22, 0, 312, 
	0, 24, 0, 312, 0, 26, 0, 27, 
	0, 312, 0, 312, 0, 322, 29, 31, 
	32, 30, 31, 323, 30, 31, 32, 30, 
	324, 34, 33, 33, 33, 33, 33, 33, 
	33, 36, 36, 0, 325, 36, 0, 38, 
	37, 37, 51, 52, 53, 66, 54, 51, 
	51, 326, 67, 71, 73, 76, 51, 37, 
	39, 0, 38, 39, 0, 37, 37, 40, 
	46, 326, 37, 39, 0, 41, 0, 42, 
	45, 0, 43, 0, 37, 37, 326, 37, 
	44, 0, 37, 37, 326, 37, 0, 42, 
	0, 47, 0, 37, 37, 326, 48, 37, 
	47, 0, 49, 49, 50, 0, 50, 0, 
	37, 37, 326, 37, 50, 0, 37, 37, 
	326, 37, 0, 38, 52, 52, 51, 52, 
	53, 66, 54, 51, 51, 67, 71, 73, 
	76, 51, 52, 39, 0, 38, 54, 39, 
	0, 37, 37, 40, 46, 326, 55, 57, 
	59, 37, 39, 0, 56, 0, 37, 37, 
	326, 37, 56, 0, 58, 0, 37, 37, 
	326, 37, 58, 0, 60, 60, 0, 37, 
	37, 61, 326, 37, 60, 60, 0, 62, 
	62, 0, 63, 62, 62, 0, 64, 64, 
	65, 0, 65, 0, 37, 37, 326, 37, 
	65, 0, 52, 52, 0, 68, 0, 69, 
	0, 70, 0, 51, 0, 72, 0, 51, 
	0, 74, 0, 75, 0, 51, 0, 51, 
	0, 78, 77, 77, 80, 132, 133, 146, 
	134, 147, 151, 154, 327, 77, 79, 0, 
	78, 79, 0, 80, 80, 121, 127, 81, 
	82, 80, 79, 0, 80, 80, 81, 82, 
	80, 0, 80, 80, 0, 83, 82, 82, 
	96, 82, 97, 110, 98, 96, 96, 111, 
	115, 117, 120, 96, 82, 84, 0, 83, 
	84, 0, 77, 77, 85, 91, 327, 77, 
	84, 0, 86, 0, 87, 90, 0, 88, 
	0, 77, 77, 327, 77, 89, 0, 77, 
	77, 327, 77, 0, 87, 0, 92, 0, 
	77, 77, 93, 327, 77, 92, 0, 94, 
	94, 95, 0, 95, 0, 77, 77, 327, 
	77, 95, 0, 77, 77, 327, 77, 0, 
	83, 98, 84, 0, 77, 77, 85, 91, 
	99, 101, 103, 327, 77, 84, 0, 100, 
	0, 77, 77, 327, 77, 100, 0, 102, 
	0, 77, 77, 327, 77, 102, 0, 104, 
	104, 0, 77, 77, 105, 327, 77, 104, 
	104, 0, 106, 106, 0, 107, 106, 106, 
	0, 108, 108, 109, 0, 109, 0, 77, 
	77, 327, 77, 109, 0, 82, 82, 0, 
	112, 0, 113, 0, 114, 0, 96, 0, 
	116, 0, 96, 0, 118, 0, 119, 0, 
	96, 0, 96, 0, 122, 0, 123, 126, 
	0, 124, 0, 80, 80, 81, 82, 80, 
	125, 0, 80, 80, 81, 82, 80, 0, 
	123, 0, 128, 0, 80, 80, 81, 82, 
	129, 80, 128, 0, 130, 130, 131, 0, 
	131, 0, 80, 80, 81, 82, 80, 131, 
	0, 78, 132, 132, 80, 132, 133, 146, 
	134, 147, 151, 154, 132, 79, 0, 78, 
	134, 79, 0, 80, 80, 121, 127, 81, 
	82, 135, 137, 139, 80, 79, 0, 136, 
	0, 80, 80, 81, 82, 80, 136, 0, 
	138, 0, 80, 80, 81, 82, 80, 138, 
	0, 140, 140, 0, 80, 80, 141, 81, 
	82, 80, 140, 140, 0, 142, 142, 0, 
	143, 142, 142, 0, 144, 144, 145, 0, 
	145, 0, 80, 80, 81, 82, 80, 145, 
	0, 132, 132, 0, 148, 0, 149, 0, 
	150, 0, 80, 0, 152, 0, 153, 0, 
	80, 0, 80, 0, 156, 155, 155, 158, 
	210, 211, 224, 212, 328, 225, 229, 232, 
	155, 157, 0, 156, 157, 0, 158, 158, 
	199, 205, 159, 160, 158, 157, 0, 158, 
	158, 159, 160, 158, 0, 158, 158, 0, 
	161, 160, 160, 174, 160, 175, 188, 176, 
	174, 174, 189, 193, 195, 198, 174, 160, 
	162, 0, 161, 162, 0, 155, 155, 163, 
	169, 328, 155, 162, 0, 164, 0, 165, 
	168, 0, 166, 0, 155, 155, 328, 155, 
	167, 0, 155, 155, 328, 155, 0, 165, 
	0, 170, 0, 155, 155, 328, 171, 155, 
	170, 0, 172, 172, 173, 0, 173, 0, 
	155, 155, 328, 155, 173, 0, 155, 155, 
	328, 155, 0, 161, 176, 162, 0, 155, 
	155, 163, 169, 328, 177, 179, 181, 155, 
	162, 0, 178, 0, 155, 155, 328, 155, 
	178, 0, 180, 0, 155, 155, 328, 155, 
	180, 0, 182, 182, 0, 155, 155, 183, 
	328, 155, 182, 182, 0, 184, 184, 0, 
	185, 184, 184, 0, 186, 186, 187, 0, 
	187, 0, 155, 155, 328, 155, 187, 0, 
	160, 160, 0, 190, 0, 191, 0, 192, 
	0, 174, 0, 194, 0, 174, 0, 196, 
	0, 197, 0, 174, 0, 174, 0, 200, 
	0, 201, 204, 0, 202, 0, 158, 158, 
	159, 160, 158, 203, 0, 158, 158, 159, 
	160, 158, 0, 201, 0, 206, 0, 158, 
	158, 159, 160, 207, 158, 206, 0, 208, 
	208, 209, 0, 209, 0, 158, 158, 159, 
	160, 158, 209, 0, 156, 210, 210, 158, 
	210, 211, 224, 212, 225, 229, 232, 210, 
	157, 0, 156, 212, 157, 0, 158, 158, 
	199, 205, 159, 160, 213, 215, 217, 158, 
	157, 0, 214, 0, 158, 158, 159, 160, 
	158, 214, 0, 216, 0, 158, 158, 159, 
	160, 158, 216, 0, 218, 218, 0, 158, 
	158, 219, 159, 160, 158, 218, 218, 0, 
	220, 220, 0, 221, 220, 220, 0, 222, 
	222, 223, 0, 223, 0, 158, 158, 159, 
	160, 158, 223, 0, 210, 210, 0, 226, 
	0, 227, 0, 228, 0, 158, 0, 230, 
	0, 231, 0, 158, 0, 158, 0, 234, 
	233, 233, 236, 288, 329, 289, 302, 290, 
	303, 307, 310, 233, 235, 0, 234, 235, 
	0, 236, 236, 277, 283, 237, 238, 236, 
	235, 0, 236, 236, 237, 238, 236, 0, 
	236, 236, 0, 239, 238, 238, 252, 238, 
	253, 266, 254, 252, 252, 267, 271, 273, 
	276, 252, 238, 240, 0, 239, 240, 0, 
	233, 233, 329, 241, 247, 233, 240, 0, 
	242, 0, 243, 246, 0, 244, 0, 233, 
	233, 329, 233, 245, 0, 233, 233, 329, 
	233, 0, 243, 0, 248, 0, 233, 233, 
	329, 249, 233, 248, 0, 250, 250, 251, 
	0, 251, 0, 233, 233, 329, 233, 251, 
	0, 233, 233, 329, 233, 0, 239, 254, 
	240, 0, 233, 233, 329, 241, 247, 255, 
	257, 259, 233, 240, 0, 256, 0, 233, 
	233, 329, 233, 256, 0, 258, 0, 233, 
	233, 329, 233, 258, 0, 260, 260, 0, 
	233, 233, 329, 261, 233, 260, 260, 0, 
	262, 262, 0, 263, 262, 262, 0, 264, 
	264, 265, 0, 265, 0, 233, 233, 329, 
	233, 265, 0, 238, 238, 0, 268, 0, 
	269, 0, 270, 0, 252, 0, 272, 0, 
	252, 0, 274, 0, 275, 0, 252, 0, 
	252, 0, 278, 0, 279, 282, 0, 280, 
	0, 236, 236, 237, 238, 236, 281, 0, 
	236, 236, 237, 238, 236, 0, 279, 0, 
	284, 0, 236, 236, 237, 238, 285, 236, 
	284, 0, 286, 286, 287, 0, 287, 0, 
	236, 236, 237, 238, 236, 287, 0, 234, 
	288, 288, 236, 288, 289, 302, 290, 303, 
	307, 310, 288, 235, 0, 234, 290, 235, 
	0, 236, 236, 277, 283, 237, 238, 291, 
	293, 295, 236, 235, 0, 292, 0, 236, 
	236, 237, 238, 236, 292, 0, 294, 0, 
	236, 236, 237, 238, 236, 294, 0, 296, 
	296, 0, 236, 236, 297, 237, 238, 236, 
	296, 296, 0, 298, 298, 0, 299, 298, 
	298, 0, 300, 300, 301, 0, 301, 0, 
	236, 236, 237, 238, 236, 301, 0, 288, 
	288, 0, 304, 0, 305, 0, 306, 0, 
	236, 0, 308, 0, 309, 0, 236, 0, 
	236, 0, 312, 312, 3, 7, 312, 311, 
	0, 312, 312, 312, 0, 312, 312, 312, 
	314, 0, 312, 312, 312, 0, 312, 312, 
	8, 312, 315, 0, 312, 312, 312, 316, 
	0, 312, 312, 3, 7, 11, 12, 13, 
	312, 311, 0, 312, 312, 312, 318, 0, 
	312, 312, 312, 319, 0, 312, 312, 14, 
	312, 320, 320, 0, 312, 312, 312, 321, 
	0, 0, 31, 32, 30, 0, 0, 0, 
	0, 0, 0, 
}

var _cte_trans_actions []byte = []byte{
	0, 0, 0, 53, 47, 7, 0, 11, 
	45, 41, 0, 0, 0, 0, 43, 0, 
	11, 0, 0, 11, 0, 35, 0, 0, 
	35, 0, 37, 0, 0, 0, 17, 0, 
	0, 9, 23, 0, 23, 0, 0, 11, 
	11, 0, 25, 0, 27, 0, 13, 15, 
	0, 19, 21, 0, 0, 19, 21, 0, 
	0, 9, 23, 0, 23, 0, 51, 49, 
	0, 0, 0, 0, 0, 0, 0, 5, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 3, 0, 55, 0, 57, 0, 0, 
	0, 0, 0, 59, 0, 51, 0, 0, 
	73, 0, 0, 69, 61, 63, 65, 67, 
	71, 0, 0, 0, 75, 0, 0, 0, 
	0, 0, 53, 47, 7, 0, 11, 45, 
	41, 77, 0, 0, 0, 0, 43, 0, 
	11, 0, 0, 11, 0, 29, 29, 0, 
	0, 85, 29, 11, 0, 35, 0, 0, 
	35, 0, 37, 0, 39, 39, 121, 39, 
	37, 0, 39, 39, 121, 39, 0, 0, 
	0, 17, 0, 31, 31, 97, 0, 31, 
	17, 0, 0, 9, 23, 0, 23, 0, 
	31, 31, 97, 31, 23, 0, 0, 0, 
	77, 0, 0, 0, 0, 0, 53, 47, 
	7, 0, 11, 45, 41, 0, 0, 0, 
	0, 43, 0, 11, 0, 0, 11, 11, 
	0, 29, 29, 0, 0, 85, 0, 0, 
	0, 29, 11, 0, 25, 0, 29, 29, 
	85, 29, 25, 0, 27, 0, 29, 29, 
	85, 29, 27, 0, 13, 15, 0, 29, 
	29, 0, 85, 29, 13, 15, 0, 19, 
	21, 0, 0, 19, 21, 0, 0, 9, 
	23, 0, 23, 0, 33, 33, 109, 33, 
	23, 0, 51, 49, 0, 0, 0, 0, 
	0, 0, 0, 5, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 3, 0, 55, 
	0, 0, 0, 0, 53, 47, 7, 0, 
	11, 0, 0, 0, 79, 0, 11, 0, 
	0, 11, 0, 29, 29, 0, 0, 29, 
	29, 29, 11, 0, 0, 0, 0, 0, 
	0, 0, 51, 49, 0, 0, 0, 0, 
	53, 47, 7, 0, 11, 45, 41, 0, 
	0, 0, 0, 43, 0, 11, 0, 0, 
	11, 0, 29, 29, 0, 0, 88, 29, 
	11, 0, 35, 0, 0, 35, 0, 37, 
	0, 39, 39, 124, 39, 37, 0, 39, 
	39, 124, 39, 0, 0, 0, 17, 0, 
	31, 31, 0, 100, 31, 17, 0, 0, 
	9, 23, 0, 23, 0, 31, 31, 100, 
	31, 23, 0, 0, 0, 79, 0, 0, 
	0, 11, 11, 0, 29, 29, 0, 0, 
	0, 0, 0, 88, 29, 11, 0, 25, 
	0, 29, 29, 88, 29, 25, 0, 27, 
	0, 29, 29, 88, 29, 27, 0, 13, 
	15, 0, 29, 29, 0, 88, 29, 13, 
	15, 0, 19, 21, 0, 0, 19, 21, 
	0, 0, 9, 23, 0, 23, 0, 33, 
	33, 112, 33, 23, 0, 51, 49, 0, 
	0, 0, 0, 0, 0, 0, 5, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	3, 0, 55, 0, 35, 0, 0, 35, 
	0, 37, 0, 39, 39, 39, 39, 39, 
	37, 0, 39, 39, 39, 39, 39, 0, 
	0, 0, 17, 0, 31, 31, 31, 31, 
	0, 31, 17, 0, 0, 9, 23, 0, 
	23, 0, 31, 31, 31, 31, 31, 23, 
	0, 0, 0, 0, 53, 47, 7, 0, 
	11, 0, 0, 0, 0, 11, 0, 0, 
	11, 11, 0, 29, 29, 0, 0, 29, 
	29, 0, 0, 0, 29, 11, 0, 25, 
	0, 29, 29, 29, 29, 29, 25, 0, 
	27, 0, 29, 29, 29, 29, 29, 27, 
	0, 13, 15, 0, 29, 29, 0, 29, 
	29, 29, 13, 15, 0, 19, 21, 0, 
	0, 19, 21, 0, 0, 9, 23, 0, 
	23, 0, 33, 33, 33, 33, 33, 23, 
	0, 51, 49, 0, 0, 0, 0, 0, 
	0, 0, 5, 0, 0, 0, 0, 0, 
	3, 0, 55, 0, 0, 0, 0, 53, 
	47, 7, 0, 11, 81, 0, 0, 0, 
	0, 11, 0, 0, 11, 0, 29, 29, 
	0, 0, 29, 29, 29, 11, 0, 0, 
	0, 0, 0, 0, 0, 51, 49, 0, 
	0, 0, 0, 53, 47, 7, 0, 11, 
	45, 41, 0, 0, 0, 0, 43, 0, 
	11, 0, 0, 11, 0, 29, 29, 0, 
	0, 91, 29, 11, 0, 35, 0, 0, 
	35, 0, 37, 0, 39, 39, 127, 39, 
	37, 0, 39, 39, 127, 39, 0, 0, 
	0, 17, 0, 31, 31, 103, 0, 31, 
	17, 0, 0, 9, 23, 0, 23, 0, 
	31, 31, 103, 31, 23, 0, 0, 0, 
	81, 0, 0, 0, 11, 11, 0, 29, 
	29, 0, 0, 91, 0, 0, 0, 29, 
	11, 0, 25, 0, 29, 29, 91, 29, 
	25, 0, 27, 0, 29, 29, 91, 29, 
	27, 0, 13, 15, 0, 29, 29, 0, 
	91, 29, 13, 15, 0, 19, 21, 0, 
	0, 19, 21, 0, 0, 9, 23, 0, 
	23, 0, 33, 33, 115, 33, 23, 0, 
	51, 49, 0, 0, 0, 0, 0, 0, 
	0, 5, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 3, 0, 55, 0, 35, 
	0, 0, 35, 0, 37, 0, 39, 39, 
	39, 39, 39, 37, 0, 39, 39, 39, 
	39, 39, 0, 0, 0, 17, 0, 31, 
	31, 31, 31, 0, 31, 17, 0, 0, 
	9, 23, 0, 23, 0, 31, 31, 31, 
	31, 31, 23, 0, 0, 0, 0, 53, 
	47, 7, 0, 11, 0, 0, 0, 0, 
	11, 0, 0, 11, 11, 0, 29, 29, 
	0, 0, 29, 29, 0, 0, 0, 29, 
	11, 0, 25, 0, 29, 29, 29, 29, 
	29, 25, 0, 27, 0, 29, 29, 29, 
	29, 29, 27, 0, 13, 15, 0, 29, 
	29, 0, 29, 29, 29, 13, 15, 0, 
	19, 21, 0, 0, 19, 21, 0, 0, 
	9, 23, 0, 23, 0, 33, 33, 33, 
	33, 33, 23, 0, 51, 49, 0, 0, 
	0, 0, 0, 0, 0, 5, 0, 0, 
	0, 0, 0, 3, 0, 55, 0, 0, 
	0, 0, 53, 47, 83, 7, 0, 11, 
	0, 0, 0, 0, 11, 0, 0, 11, 
	0, 29, 29, 0, 0, 29, 29, 29, 
	11, 0, 0, 0, 0, 0, 0, 0, 
	51, 49, 0, 0, 0, 0, 53, 47, 
	7, 0, 11, 45, 41, 0, 0, 0, 
	0, 43, 0, 11, 0, 0, 11, 0, 
	29, 29, 94, 0, 0, 29, 11, 0, 
	35, 0, 0, 35, 0, 37, 0, 39, 
	39, 130, 39, 37, 0, 39, 39, 130, 
	39, 0, 0, 0, 17, 0, 31, 31, 
	106, 0, 31, 17, 0, 0, 9, 23, 
	0, 23, 0, 31, 31, 106, 31, 23, 
	0, 0, 0, 83, 0, 0, 0, 11, 
	11, 0, 29, 29, 94, 0, 0, 0, 
	0, 0, 29, 11, 0, 25, 0, 29, 
	29, 94, 29, 25, 0, 27, 0, 29, 
	29, 94, 29, 27, 0, 13, 15, 0, 
	29, 29, 94, 0, 29, 13, 15, 0, 
	19, 21, 0, 0, 19, 21, 0, 0, 
	9, 23, 0, 23, 0, 33, 33, 118, 
	33, 23, 0, 51, 49, 0, 0, 0, 
	0, 0, 0, 0, 5, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 3, 0, 
	55, 0, 35, 0, 0, 35, 0, 37, 
	0, 39, 39, 39, 39, 39, 37, 0, 
	39, 39, 39, 39, 39, 0, 0, 0, 
	17, 0, 31, 31, 31, 31, 0, 31, 
	17, 0, 0, 9, 23, 0, 23, 0, 
	31, 31, 31, 31, 31, 23, 0, 0, 
	0, 0, 53, 47, 7, 0, 11, 0, 
	0, 0, 0, 11, 0, 0, 11, 11, 
	0, 29, 29, 0, 0, 29, 29, 0, 
	0, 0, 29, 11, 0, 25, 0, 29, 
	29, 29, 29, 29, 25, 0, 27, 0, 
	29, 29, 29, 29, 29, 27, 0, 13, 
	15, 0, 29, 29, 0, 29, 29, 29, 
	13, 15, 0, 19, 21, 0, 0, 19, 
	21, 0, 0, 9, 23, 0, 23, 0, 
	33, 33, 33, 33, 33, 23, 0, 51, 
	49, 0, 0, 0, 0, 0, 0, 0, 
	5, 0, 0, 0, 0, 0, 3, 0, 
	55, 0, 29, 29, 0, 0, 29, 11, 
	0, 0, 0, 0, 0, 39, 39, 39, 
	37, 0, 39, 39, 39, 0, 31, 31, 
	0, 31, 17, 0, 31, 31, 31, 23, 
	0, 29, 29, 0, 0, 0, 0, 0, 
	29, 11, 0, 29, 29, 29, 25, 0, 
	29, 29, 29, 27, 0, 29, 29, 0, 
	29, 13, 15, 0, 33, 33, 33, 23, 
	0, 0, 51, 0, 0, 0, 0, 0, 
	0, 0, 0, 
}

var _cte_eof_actions []byte = []byte{
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 29, 
	0, 39, 39, 31, 31, 29, 29, 29, 
	29, 33, 0, 0, 0, 0, 0, 0, 
	0, 0, 
}

const cte_start int = 1
const cte_error int = 0

const cte_en_comment_iterate int = 29
const cte_en_multiline_comment_iterate int = 30
const cte_en_string_iterate int = 33
const cte_en_uri_iterate int = 35
const cte_en_list_iterate int = 37
const cte_en_unordered_map_iterate int = 77
const cte_en_ordered_map_iterate int = 155
const cte_en_metadata_map_iterate int = 233
const cte_en_main int = 1


//line cte.rl:367

type Parser struct {
    cs int // Current Ragel state
    ts int // Position: start of token
    te int // Position: end of token
    top int // Index of top of stack
    stack []int
    data []byte
    arrayStart int // Start of the current item of interest
    commentDepth int
    significand uint64
    significandSign int
    exponent int
    exponentSign int
    exponentAdjust int
    month int
    day int
    hour int
    minute int
    second int
    nanosecond int
}

func (this *Parser) Init(maxDepth int) {
    this.stack = make([]int, maxDepth)
    this.significandSign = 1
    this.exponentSign = 1
}

func NewParser(maxDepth int) *Parser {
    this := new(Parser)
    this.Init(maxDepth)
    return this
}

func (this *Parser) flushByteArray(index int, callbacks CteDecoderCallbacks) error {
    err := callbacks.OnArrayData(this.data[this.arrayStart:index])
    if err != nil {
        return err
    }
    this.arrayStart = index
    return nil
}

func (this *Parser) flushAndAddEscapedCharacter(index int, escapedCharacter byte, callbacks CteDecoderCallbacks) error {
    this.data[index] = escapedCharacter
    if err := this.flushByteArray(index+1, callbacks); err != nil {
        return err
    }
    // Get past escape initiator and escape char
    this.arrayStart = index + 2
    return nil
}

func (this *Parser) Parse(src []byte, callbacks CteDecoderCallbacks) (isComplete bool, err error) {
//  if this.ts > 0 {
        // TODO: Read from undeflow buffer
//  }
    this.data = src
    p := 0 // Position: current
    pe := len(this.data) // Position: end of buffer
    // TODO: Change to -1 and check for end of file
    eof := pe // Position: end of file

    _ = eof
    
    
//line cte.go:898
	{
	 this.cs = cte_start
	 this.top = 0
	}

//line cte.go:904
	{
	var _klen int
	var _trans int
	var _acts int
	var _nacts uint
	var _keys int
	if p == pe {
		goto _test_eof
	}
	if  this.cs == 0 {
		goto _out
	}
_resume:
	_keys = int(_cte_key_offsets[ this.cs])
	_trans = int(_cte_index_offsets[ this.cs])

	_klen = int(_cte_single_lengths[ this.cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + _klen - 1)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + ((_upper - _lower) >> 1)
			switch {
			case  this.data[p] < _cte_trans_keys[_mid]:
				_upper = _mid - 1
			case  this.data[p] > _cte_trans_keys[_mid]:
				_lower = _mid + 1
			default:
				_trans += int(_mid - int(_keys))
				goto _match
			}
		}
		_keys += _klen
		_trans += _klen
	}

	_klen = int(_cte_range_lengths[ this.cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + (_klen << 1) - 2)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + (((_upper - _lower) >> 1) & ^1)
			switch {
			case  this.data[p] < _cte_trans_keys[_mid]:
				_upper = _mid - 2
			case  this.data[p] > _cte_trans_keys[_mid + 1]:
				_lower = _mid + 2
			default:
				_trans += int((_mid - int(_keys)) >> 1)
				goto _match
			}
		}
		_trans += _klen
	}

_match:
	 this.cs = int(_cte_trans_targs[_trans])

	if _cte_trans_actions[_trans] == 0 {
		goto _again
	}

	_acts = int(_cte_trans_actions[_trans])
	_nacts = uint(_cte_actions[_acts]); _acts++
	for ; _nacts > 0; _nacts-- {
		_acts++
		switch _cte_actions[_acts-1] {
		case 0:
//line cte.rl:46

        err = callbacks.OnNil()
        if err != nil {
            p++; goto _out

        }
    
		case 1:
//line cte.rl:53

        err = callbacks.OnBool(true)
        if err != nil {
            p++; goto _out

        }
    
		case 2:
//line cte.rl:60

        err = callbacks.OnBool(false)
        if err != nil {
            p++; goto _out

        }
    
		case 3:
//line cte.rl:69

        this.significandSign = -1
    
		case 4:
//line cte.rl:73

        this.exponentSign = -1
    
		case 5:
//line cte.rl:77

        this.significand = this.significand * 10 + uint64( this.data[p] - '0')
    
		case 6:
//line cte.rl:81

        this.significand = (this.significand << 4) | uint64( this.data[p] - '0')
    
		case 7:
//line cte.rl:83

        this.significand = (this.significand << 4) | uint64( this.data[p] - 'a' + 10)
    
		case 8:
//line cte.rl:87

        this.significand = this.significand * 10 + uint64( this.data[p] - '0')
        this.exponentAdjust--
    
		case 9:
//line cte.rl:92

        this.significand = (this.significand << 4) | uint64( this.data[p] - '0')
        this.exponentAdjust -= 4
    
		case 10:
//line cte.rl:95

        this.significand = (this.significand << 4) | uint64( this.data[p] - 'a' + 10)
        this.exponentAdjust -= 4
    
		case 11:
//line cte.rl:100

        this.exponent = this.exponent * 10 + int( this.data[p] - '0')
    
		case 12:
//line cte.rl:109

        this.significand = (this.significand << 1) | uint64( this.data[p] - '0')
    
		case 13:
//line cte.rl:113

        this.significand = (this.significand << 3) | uint64( this.data[p] - '0')
    
		case 14:
//line cte.rl:119

        if this.significandSign >= 0 {
            callbacks.OnPositiveInt(this.significand)
        } else {
            callbacks.OnNegativeInt(this.significand)
        }
        this.significandSign = 1
        this.significand = 0
    
		case 15:
//line cte.rl:129

        callbacks.OnDecimalFloat(int64(this.significand) * int64(this.significandSign), (this.exponent+this.exponentAdjust) * this.exponentSign)
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
    
		case 16:
//line cte.rl:138

        exponent := float64((this.exponent * this.exponentSign + this.exponentAdjust))
        callbacks.OnFloat(float64(this.significandSign) * float64(this.significand) * math.Pow(2.0, exponent))
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
    
		case 17:
//line cte.rl:150

        this.month = this.month * 10 + int( this.data[p] - '0')
    
		case 18:
//line cte.rl:154

        this.day = this.day * 10 + int( this.data[p] - '0')
    
		case 19:
//line cte.rl:160

        callbacks.OnDate(time.Date(int(this.significand), time.Month(this.month), this.day, 0, 0, 0, 0, time.UTC))
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
    
		case 20:
//line cte.rl:168

        err = callbacks.OnListBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 37; goto _again

    
		case 21:
//line cte.rl:176

        err = callbacks.OnUnorderedMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 77; goto _again

    
		case 22:
//line cte.rl:184

        err = callbacks.OnOrderedMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 155; goto _again

    
		case 23:
//line cte.rl:192

        err = callbacks.OnMetadataMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 233; goto _again

    
		case 24:
//line cte.rl:200

        this.arrayStart = p + 1
        err = callbacks.OnCommentBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 29; goto _again

    
		case 25:
//line cte.rl:209

        if this.commentDepth == 0 {
            err = callbacks.OnCommentBegin()
            if err != nil {
                p++; goto _out

            }
        } else {
            err = callbacks.OnArrayData(this.data[this.arrayStart:p+1])
            if err != nil {
                p++; goto _out

            }
        }
        this.arrayStart = p + 1
        this.commentDepth++
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 30; goto _again

    
		case 26:
//line cte.rl:226

        this.arrayStart = p + 1
        err = callbacks.OnStringBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 33; goto _again

    
		case 27:
//line cte.rl:235

        this.arrayStart = p + 1
        err = callbacks.OnURIBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 35; goto _again

    
		case 28:
//line cte.rl:254

            err = callbacks.OnArrayData(this.data[this.arrayStart:p])
            if err != nil {
                p++; goto _out

            }
            err = callbacks.OnArrayEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 29:
//line cte.rl:267

            err = callbacks.OnArrayData(this.data[this.arrayStart:p-1])
            if err != nil {
                p++; goto _out

            }
            this.arrayStart = p-1
            this.commentDepth--
            if this.commentDepth == 0 {
                err = callbacks.OnArrayEnd()
                if err != nil {
                    p++; goto _out

                }
            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 30:
//line cte.rl:287
this.flushAndAddEscapedCharacter(p-1, '\\', callbacks)
		case 31:
//line cte.rl:288
this.flushAndAddEscapedCharacter(p-1, '\n', callbacks)
		case 32:
//line cte.rl:289
this.flushAndAddEscapedCharacter(p-1, '\r', callbacks)
		case 33:
//line cte.rl:290
this.flushAndAddEscapedCharacter(p-1, '\t', callbacks)
		case 34:
//line cte.rl:291
this.flushAndAddEscapedCharacter(p-1, '"', callbacks)
		case 35:
//line cte.rl:292
return false, fmt.Errorf("\\%c: Illegal escape encoding", this.data[p])
		case 36:
//line cte.rl:296

            err = callbacks.OnArrayData(this.data[this.arrayStart:p])
            if err != nil {
                p++; goto _out

            }
            err = callbacks.OnArrayEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 37:
//line cte.rl:308

            err = callbacks.OnArrayData(this.data[this.arrayStart:p])
            if err != nil {
                p++; goto _out

            }
            err = callbacks.OnArrayEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 38:
//line cte.rl:322

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 39:
//line cte.rl:332

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 40:
//line cte.rl:342

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 41:
//line cte.rl:352

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
//line cte.go:1357
		}
	}

_again:
	if  this.cs == 0 {
		goto _out
	}
	p++
	if p != pe {
		goto _resume
	}
	_test_eof: {}
	if p == eof {
		__acts := _cte_eof_actions[ this.cs]
		__nacts := uint(_cte_actions[__acts]); __acts++
		for ; __nacts > 0; __nacts-- {
			__acts++
			switch _cte_actions[__acts-1] {
			case 14:
//line cte.rl:119

        if this.significandSign >= 0 {
            callbacks.OnPositiveInt(this.significand)
        } else {
            callbacks.OnNegativeInt(this.significand)
        }
        this.significandSign = 1
        this.significand = 0
    
			case 15:
//line cte.rl:129

        callbacks.OnDecimalFloat(int64(this.significand) * int64(this.significandSign), (this.exponent+this.exponentAdjust) * this.exponentSign)
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
    
			case 16:
//line cte.rl:138

        exponent := float64((this.exponent * this.exponentSign + this.exponentAdjust))
        callbacks.OnFloat(float64(this.significandSign) * float64(this.significand) * math.Pow(2.0, exponent))
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
    
			case 19:
//line cte.rl:160

        callbacks.OnDate(time.Date(int(this.significand), time.Month(this.month), this.day, 0, 0, 0, 0, time.UTC))
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
    
//line cte.go:1417
			}
		}
	}

	_out: {}
	}

//line cte.rl:436


    if this.ts > 0 {
        // TODO: Copy to underflow buffer
        // arrayStart
        // ts doesn't seem to get used?
        // copy(this.underflow, data[ts:pe])
        // p = 0
        // pe = pe - ts
    }
    // TODO
    if this.cs == cte_error {
        err = fmt.Errorf("Parse error at %v", p)
    }
//    isComplete = this.cs == cte_parse_first;
    // TODO: Maybe there's no way to detect completion?
    isComplete = true
    return
}
