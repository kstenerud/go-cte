
//line cte.rl:1
package cte

import (
    "fmt"
    "math"
)

type CteDecoderCallbacks interface {
    OnNil() error
    OnBool(value bool) error
    OnPositiveInt(value uint64) error
    OnNegativeInt(value uint64) error
    OnDecimalFloat(significand int64, exponent int) error
    OnFloat(value float64) error
    OnDate(year, month, day int) error
    OnTimeTZ(hour, minute, second, nanosecond int, tz string) error
    OnTimeLoc(hour, minute, second, nanosecond int, latitude, longitude float32) error
    OnTimestampTZ(year, month, day, hour, minute, second, nanosecond int, tz string) error
    OnTimestampLoc(year, month, day, hour, minute, second, nanosecond int, latitude, longitude float32) error
    OnListBegin() error
    OnOrderedMapBegin() error
    OnUnorderedMapBegin() error
    OnMetadataMapBegin() error
    OnContainerEnd() error
    OnBytesBegin() error
    OnStringBegin() error
    OnURIBegin() error
    OnCommentBegin() error
    OnArrayData(bytes []byte) error
    OnArrayEnd() error
}


//line cte.rl:414




//line cte.go:42
var _cte_actions []byte = []byte{
	0, 1, 0, 1, 1, 1, 2, 1, 3, 
	1, 4, 1, 5, 1, 6, 1, 7, 
	1, 8, 1, 9, 1, 10, 1, 11, 
	1, 12, 1, 13, 1, 14, 1, 15, 
	1, 16, 1, 17, 1, 18, 1, 19, 
	1, 20, 1, 21, 1, 22, 1, 23, 
	1, 24, 1, 25, 1, 26, 1, 27, 
	1, 28, 1, 29, 1, 30, 1, 31, 
	1, 32, 1, 33, 1, 34, 1, 35, 
	1, 36, 1, 37, 1, 38, 1, 39, 
	1, 40, 1, 41, 1, 42, 1, 43, 
	1, 44, 1, 45, 1, 46, 1, 47, 
	1, 48, 2, 5, 19, 2, 14, 45, 
	2, 14, 46, 2, 14, 47, 2, 14, 
	48, 2, 15, 45, 2, 15, 46, 2, 
	15, 47, 2, 15, 48, 2, 16, 45, 
	2, 16, 46, 2, 16, 47, 2, 16, 
	48, 2, 23, 25, 2, 23, 26, 2, 
	23, 31, 2, 24, 45, 2, 24, 46, 
	2, 24, 47, 2, 24, 48, 2, 25, 
	45, 2, 25, 46, 2, 25, 47, 2, 
	25, 48, 2, 26, 45, 2, 26, 46, 
	2, 26, 47, 2, 26, 48, 3, 23, 
	25, 31, 3, 23, 26, 31, 
}

var _cte_key_offsets []int16 = []int16{
	0, 0, 19, 22, 24, 27, 29, 31, 
	34, 35, 37, 39, 40, 42, 44, 46, 
	55, 56, 58, 62, 64, 68, 70, 72, 
	76, 80, 85, 89, 91, 93, 95, 97, 
	98, 100, 102, 104, 113, 114, 115, 116, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	126, 128, 130, 132, 137, 141, 144, 164, 
	167, 176, 178, 181, 183, 191, 193, 196, 
	197, 199, 201, 202, 204, 206, 213, 215, 
	223, 232, 246, 254, 262, 270, 278, 286, 
	294, 302, 308, 314, 315, 317, 325, 329, 
	331, 338, 343, 362, 366, 378, 380, 387, 
	389, 396, 400, 410, 414, 419, 423, 425, 
	432, 434, 447, 457, 459, 461, 462, 464, 
	466, 473, 475, 483, 492, 506, 514, 522, 
	530, 538, 546, 554, 562, 568, 578, 579, 
	580, 581, 582, 583, 584, 585, 586, 587, 
	588, 604, 607, 617, 623, 625, 644, 647, 
	656, 658, 661, 663, 671, 673, 676, 677, 
	679, 681, 682, 684, 686, 693, 695, 703, 
	712, 726, 734, 742, 750, 758, 766, 774, 
	782, 788, 794, 795, 797, 805, 809, 811, 
	818, 823, 827, 839, 841, 848, 850, 857, 
	861, 871, 875, 880, 884, 886, 893, 895, 
	908, 918, 920, 922, 923, 925, 927, 934, 
	936, 944, 953, 967, 975, 983, 991, 999, 
	1007, 1015, 1023, 1029, 1039, 1040, 1041, 1042, 
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 
	1054, 1056, 1064, 1068, 1071, 1072, 1074, 1076, 
	1077, 1079, 1081, 1088, 1090, 1098, 1109, 1124, 
	1140, 1148, 1156, 1164, 1172, 1180, 1188, 1196, 
	1202, 1208, 1209, 1211, 1220, 1224, 1226, 1234, 
	1249, 1253, 1266, 1268, 1276, 1278, 1286, 1290, 
	1301, 1305, 1310, 1314, 1316, 1324, 1326, 1340, 
	1351, 1353, 1355, 1356, 1358, 1360, 1367, 1369, 
	1377, 1388, 1403, 1419, 1427, 1435, 1443, 1451, 
	1459, 1467, 1475, 1481, 1492, 1493, 1494, 1495, 
	1496, 1497, 1498, 1499, 1500, 1516, 1519, 1529, 
	1535, 1537, 1556, 1559, 1568, 1570, 1573, 1575, 
	1583, 1585, 1588, 1589, 1591, 1593, 1594, 1596, 
	1598, 1605, 1607, 1615, 1624, 1638, 1646, 1654, 
	1662, 1670, 1678, 1686, 1694, 1700, 1706, 1707, 
	1709, 1717, 1721, 1723, 1730, 1735, 1739, 1751, 
	1753, 1760, 1762, 1769, 1773, 1783, 1787, 1792, 
	1796, 1798, 1805, 1807, 1820, 1830, 1832, 1834, 
	1835, 1837, 1839, 1846, 1848, 1856, 1865, 1879, 
	1887, 1895, 1903, 1911, 1919, 1927, 1935, 1941, 
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 
	1959, 1960, 1961, 1963, 1966, 1968, 1976, 1980, 
	1983, 1984, 1986, 1988, 1989, 1991, 1993, 2000, 
	2002, 2010, 2021, 2036, 2052, 2060, 2068, 2076, 
	2084, 2092, 2100, 2108, 2114, 2120, 2121, 2123, 
	2132, 2136, 2138, 2146, 2161, 2165, 2178, 2180, 
	2188, 2190, 2198, 2202, 2213, 2217, 2222, 2226, 
	2228, 2236, 2238, 2252, 2263, 2265, 2267, 2268, 
	2270, 2272, 2279, 2281, 2289, 2300, 2315, 2331, 
	2339, 2347, 2355, 2363, 2371, 2379, 2387, 2393, 
	2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 
	2412, 2428, 2431, 2441, 2447, 2449, 2468, 2471, 
	2480, 2482, 2485, 2487, 2495, 2497, 2500, 2501, 
	2503, 2505, 2506, 2508, 2510, 2517, 2519, 2527, 
	2536, 2550, 2558, 2566, 2574, 2582, 2590, 2598, 
	2606, 2612, 2618, 2619, 2621, 2629, 2633, 2635, 
	2642, 2647, 2651, 2663, 2665, 2672, 2674, 2681, 
	2685, 2695, 2699, 2704, 2708, 2710, 2717, 2719, 
	2732, 2742, 2744, 2746, 2747, 2749, 2751, 2758, 
	2760, 2768, 2777, 2791, 2799, 2807, 2815, 2823, 
	2831, 2839, 2847, 2853, 2863, 2864, 2865, 2866, 
	2867, 2868, 2869, 2870, 2871, 2872, 2873, 2875, 
	2878, 2880, 2888, 2892, 2895, 2896, 2898, 2900, 
	2901, 2903, 2905, 2912, 2914, 2922, 2933, 2948, 
	2964, 2972, 2980, 2988, 2996, 3004, 3012, 3020, 
	3026, 3032, 3033, 3035, 3044, 3048, 3050, 3058, 
	3073, 3077, 3090, 3092, 3100, 3102, 3110, 3114, 
	3125, 3129, 3134, 3138, 3140, 3148, 3150, 3164, 
	3175, 3177, 3179, 3180, 3182, 3184, 3191, 3193, 
	3201, 3212, 3227, 3243, 3251, 3259, 3267, 3275, 
	3283, 3291, 3299, 3305, 3316, 3317, 3318, 3319, 
	3320, 3321, 3322, 3323, 3324, 3332, 3336, 3343, 
	3349, 3356, 3369, 3376, 3383, 3390, 3397, 3404, 
	3411, 3418, 3423, 3428, 3435, 3441, 3452, 3458, 
	3464, 3473, 3479, 3491, 3500, 3506, 3513, 3526, 
	3533, 3540, 3547, 3554, 3561, 3568, 3575, 3580, 
	3589, 3589, 3591, 3591, 3591, 3591, 3591, 3591, 
}

var _cte_trans_keys []byte = []byte{
	0, 13, 32, 34, 40, 45, 47, 48, 
	60, 91, 102, 110, 116, 117, 123, 9, 
	10, 49, 57, 0, 48, 57, 48, 57, 
	45, 48, 57, 48, 57, 48, 57, 58, 
	48, 57, 58, 48, 57, 48, 57, 58, 
	48, 57, 48, 57, 48, 57, 43, 45, 
	95, 47, 57, 65, 90, 97, 122, 45, 
	48, 57, 43, 45, 48, 57, 48, 57, 
	0, 48, 49, 57, 48, 49, 48, 55, 
	48, 57, 97, 102, 48, 57, 97, 102, 
	112, 48, 57, 97, 102, 43, 45, 48, 
	57, 48, 57, 42, 47, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 48, 57, 
	43, 45, 95, 47, 57, 65, 90, 97, 
	122, 97, 108, 115, 101, 105, 108, 114, 
	117, 101, 34, 10, 42, 47, 42, 47, 
	42, 47, 34, 92, 34, 92, 110, 114, 
	116, 32, 33, 35, 126, 34, 32, 126, 
	0, 13, 32, 34, 40, 45, 47, 48, 
	60, 91, 93, 102, 110, 116, 117, 123, 
	9, 10, 49, 57, 0, 48, 57, 13, 
	32, 45, 46, 93, 9, 10, 48, 57, 
	48, 57, 45, 48, 57, 48, 57, 13, 
	32, 47, 93, 9, 10, 48, 57, 48, 
	57, 58, 48, 57, 58, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 13, 32, 
	46, 47, 93, 9, 10, 48, 57, 13, 
	32, 47, 93, 9, 10, 48, 57, 43, 
	45, 95, 47, 57, 65, 90, 97, 122, 
	13, 32, 43, 45, 93, 95, 9, 10, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	47, 93, 9, 10, 48, 57, 13, 32, 
	47, 93, 9, 10, 48, 57, 13, 32, 
	47, 93, 9, 10, 48, 57, 13, 32, 
	47, 93, 9, 10, 48, 57, 13, 32, 
	47, 93, 9, 10, 48, 57, 13, 32, 
	47, 93, 9, 10, 48, 57, 13, 32, 
	47, 93, 9, 10, 48, 57, 13, 32, 
	47, 93, 9, 10, 13, 32, 47, 93, 
	9, 10, 45, 48, 57, 13, 32, 93, 
	101, 9, 10, 48, 57, 43, 45, 48, 
	57, 48, 57, 13, 32, 93, 9, 10, 
	48, 57, 13, 32, 93, 9, 10, 0, 
	13, 32, 34, 40, 45, 47, 48, 60, 
	91, 102, 110, 116, 117, 123, 9, 10, 
	49, 57, 0, 48, 49, 57, 13, 32, 
	45, 46, 93, 98, 111, 120, 9, 10, 
	48, 57, 48, 49, 13, 32, 93, 9, 
	10, 48, 49, 48, 55, 13, 32, 93, 
	9, 10, 48, 55, 48, 57, 97, 102, 
	13, 32, 46, 93, 9, 10, 48, 57, 
	97, 102, 48, 57, 97, 102, 112, 48, 
	57, 97, 102, 43, 45, 48, 57, 48, 
	57, 13, 32, 93, 9, 10, 48, 57, 
	42, 47, 13, 32, 45, 46, 58, 93, 
	98, 111, 120, 9, 10, 48, 57, 13, 
	32, 45, 46, 58, 93, 9, 10, 48, 
	57, 48, 57, 48, 57, 58, 48, 57, 
	48, 57, 13, 32, 46, 47, 93, 9, 
	10, 48, 57, 13, 32, 47, 93, 9, 
	10, 48, 57, 43, 45, 95, 47, 57, 
	65, 90, 97, 122, 13, 32, 43, 45, 
	93, 95, 9, 10, 47, 57, 65, 90, 
	97, 122, 13, 32, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	13, 32, 45, 46, 58, 93, 9, 10, 
	48, 57, 97, 108, 115, 101, 105, 108, 
	114, 117, 101, 34, 0, 13, 32, 34, 
	40, 45, 47, 48, 102, 116, 117, 125, 
	9, 10, 49, 57, 0, 48, 57, 13, 
	32, 45, 46, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 42, 
	47, 0, 13, 32, 34, 40, 45, 47, 
	48, 60, 91, 102, 110, 116, 117, 123, 
	9, 10, 49, 57, 0, 48, 57, 13, 
	32, 45, 46, 125, 9, 10, 48, 57, 
	48, 57, 45, 48, 57, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 48, 
	57, 58, 48, 57, 58, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 13, 32, 
	46, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 43, 
	45, 95, 47, 57, 65, 90, 97, 122, 
	13, 32, 43, 45, 95, 125, 9, 10, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 13, 32, 47, 125, 
	9, 10, 45, 48, 57, 13, 32, 101, 
	125, 9, 10, 48, 57, 43, 45, 48, 
	57, 48, 57, 13, 32, 125, 9, 10, 
	48, 57, 13, 32, 125, 9, 10, 0, 
	48, 49, 57, 13, 32, 45, 46, 98, 
	111, 120, 125, 9, 10, 48, 57, 48, 
	49, 13, 32, 125, 9, 10, 48, 49, 
	48, 55, 13, 32, 125, 9, 10, 48, 
	55, 48, 57, 97, 102, 13, 32, 46, 
	125, 9, 10, 48, 57, 97, 102, 48, 
	57, 97, 102, 112, 48, 57, 97, 102, 
	43, 45, 48, 57, 48, 57, 13, 32, 
	125, 9, 10, 48, 57, 42, 47, 13, 
	32, 45, 46, 58, 98, 111, 120, 125, 
	9, 10, 48, 57, 13, 32, 45, 46, 
	58, 125, 9, 10, 48, 57, 48, 57, 
	48, 57, 58, 48, 57, 48, 57, 13, 
	32, 46, 47, 125, 9, 10, 48, 57, 
	13, 32, 47, 125, 9, 10, 48, 57, 
	43, 45, 95, 47, 57, 65, 90, 97, 
	122, 13, 32, 43, 45, 95, 125, 9, 
	10, 47, 57, 65, 90, 97, 122, 13, 
	32, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 13, 32, 45, 
	46, 58, 125, 9, 10, 48, 57, 97, 
	108, 115, 101, 105, 108, 114, 117, 101, 
	34, 48, 57, 45, 48, 57, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	42, 47, 48, 57, 58, 48, 57, 58, 
	48, 57, 48, 57, 58, 48, 57, 48, 
	57, 13, 32, 46, 47, 61, 9, 10, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 42, 43, 45, 47, 95, 48, 
	57, 65, 90, 97, 122, 13, 32, 43, 
	45, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 42, 43, 
	45, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 13, 32, 47, 61, 9, 10, 
	45, 48, 57, 13, 32, 47, 61, 101, 
	9, 10, 48, 57, 43, 45, 48, 57, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 0, 13, 32, 34, 40, 45, 
	47, 48, 102, 116, 117, 9, 10, 49, 
	57, 0, 48, 49, 57, 13, 32, 45, 
	46, 47, 61, 98, 111, 120, 9, 10, 
	48, 57, 48, 49, 13, 32, 47, 61, 
	9, 10, 48, 49, 48, 55, 13, 32, 
	47, 61, 9, 10, 48, 55, 48, 57, 
	97, 102, 13, 32, 46, 47, 61, 9, 
	10, 48, 57, 97, 102, 48, 57, 97, 
	102, 112, 48, 57, 97, 102, 43, 45, 
	48, 57, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 42, 47, 13, 32, 
	45, 46, 47, 58, 61, 98, 111, 120, 
	9, 10, 48, 57, 13, 32, 45, 46, 
	47, 58, 61, 9, 10, 48, 57, 48, 
	57, 48, 57, 58, 48, 57, 48, 57, 
	13, 32, 46, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 42, 43, 45, 47, 95, 48, 57, 
	65, 90, 97, 122, 13, 32, 43, 45, 
	47, 61, 95, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 42, 43, 45, 
	47, 61, 95, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 13, 32, 45, 46, 47, 58, 61, 
	9, 10, 48, 57, 97, 108, 115, 101, 
	114, 117, 101, 34, 0, 13, 32, 34, 
	40, 45, 47, 48, 62, 102, 116, 117, 
	9, 10, 49, 57, 0, 48, 57, 13, 
	32, 45, 46, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 42, 
	47, 0, 13, 32, 34, 40, 45, 47, 
	48, 60, 91, 102, 110, 116, 117, 123, 
	9, 10, 49, 57, 0, 48, 57, 13, 
	32, 45, 46, 62, 9, 10, 48, 57, 
	48, 57, 45, 48, 57, 48, 57, 13, 
	32, 47, 62, 9, 10, 48, 57, 48, 
	57, 58, 48, 57, 58, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 13, 32, 
	46, 47, 62, 9, 10, 48, 57, 13, 
	32, 47, 62, 9, 10, 48, 57, 43, 
	45, 95, 47, 57, 65, 90, 97, 122, 
	13, 32, 43, 45, 62, 95, 9, 10, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	47, 62, 9, 10, 48, 57, 13, 32, 
	47, 62, 9, 10, 48, 57, 13, 32, 
	47, 62, 9, 10, 48, 57, 13, 32, 
	47, 62, 9, 10, 48, 57, 13, 32, 
	47, 62, 9, 10, 48, 57, 13, 32, 
	47, 62, 9, 10, 48, 57, 13, 32, 
	47, 62, 9, 10, 48, 57, 13, 32, 
	47, 62, 9, 10, 13, 32, 47, 62, 
	9, 10, 45, 48, 57, 13, 32, 62, 
	101, 9, 10, 48, 57, 43, 45, 48, 
	57, 48, 57, 13, 32, 62, 9, 10, 
	48, 57, 13, 32, 62, 9, 10, 0, 
	48, 49, 57, 13, 32, 45, 46, 62, 
	98, 111, 120, 9, 10, 48, 57, 48, 
	49, 13, 32, 62, 9, 10, 48, 49, 
	48, 55, 13, 32, 62, 9, 10, 48, 
	55, 48, 57, 97, 102, 13, 32, 46, 
	62, 9, 10, 48, 57, 97, 102, 48, 
	57, 97, 102, 112, 48, 57, 97, 102, 
	43, 45, 48, 57, 48, 57, 13, 32, 
	62, 9, 10, 48, 57, 42, 47, 13, 
	32, 45, 46, 58, 62, 98, 111, 120, 
	9, 10, 48, 57, 13, 32, 45, 46, 
	58, 62, 9, 10, 48, 57, 48, 57, 
	48, 57, 58, 48, 57, 48, 57, 13, 
	32, 46, 47, 62, 9, 10, 48, 57, 
	13, 32, 47, 62, 9, 10, 48, 57, 
	43, 45, 95, 47, 57, 65, 90, 97, 
	122, 13, 32, 43, 45, 62, 95, 9, 
	10, 47, 57, 65, 90, 97, 122, 13, 
	32, 47, 62, 9, 10, 48, 57, 13, 
	32, 47, 62, 9, 10, 48, 57, 13, 
	32, 47, 62, 9, 10, 48, 57, 13, 
	32, 47, 62, 9, 10, 48, 57, 13, 
	32, 47, 62, 9, 10, 48, 57, 13, 
	32, 47, 62, 9, 10, 48, 57, 13, 
	32, 47, 62, 9, 10, 48, 57, 13, 
	32, 47, 62, 9, 10, 13, 32, 45, 
	46, 58, 62, 9, 10, 48, 57, 97, 
	108, 115, 101, 105, 108, 114, 117, 101, 
	34, 48, 57, 45, 48, 57, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	42, 47, 48, 57, 58, 48, 57, 58, 
	48, 57, 48, 57, 58, 48, 57, 48, 
	57, 13, 32, 46, 47, 61, 9, 10, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 42, 43, 45, 47, 95, 48, 
	57, 65, 90, 97, 122, 13, 32, 43, 
	45, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 42, 43, 
	45, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 13, 32, 47, 61, 9, 10, 
	45, 48, 57, 13, 32, 47, 61, 101, 
	9, 10, 48, 57, 43, 45, 48, 57, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 0, 13, 32, 34, 40, 45, 
	47, 48, 102, 116, 117, 9, 10, 49, 
	57, 0, 48, 49, 57, 13, 32, 45, 
	46, 47, 61, 98, 111, 120, 9, 10, 
	48, 57, 48, 49, 13, 32, 47, 61, 
	9, 10, 48, 49, 48, 55, 13, 32, 
	47, 61, 9, 10, 48, 55, 48, 57, 
	97, 102, 13, 32, 46, 47, 61, 9, 
	10, 48, 57, 97, 102, 48, 57, 97, 
	102, 112, 48, 57, 97, 102, 43, 45, 
	48, 57, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 42, 47, 13, 32, 
	45, 46, 47, 58, 61, 98, 111, 120, 
	9, 10, 48, 57, 13, 32, 45, 46, 
	47, 58, 61, 9, 10, 48, 57, 48, 
	57, 48, 57, 58, 48, 57, 48, 57, 
	13, 32, 46, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 42, 43, 45, 47, 95, 48, 57, 
	65, 90, 97, 122, 13, 32, 43, 45, 
	47, 61, 95, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 42, 43, 45, 
	47, 61, 95, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 13, 32, 45, 46, 47, 58, 61, 
	9, 10, 48, 57, 97, 108, 115, 101, 
	114, 117, 101, 34, 0, 13, 32, 34, 
	40, 41, 45, 47, 48, 102, 116, 117, 
	9, 10, 49, 57, 0, 48, 57, 13, 
	32, 45, 46, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 42, 
	47, 0, 13, 32, 34, 40, 45, 47, 
	48, 60, 91, 102, 110, 116, 117, 123, 
	9, 10, 49, 57, 0, 48, 57, 13, 
	32, 41, 45, 46, 9, 10, 48, 57, 
	48, 57, 45, 48, 57, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 48, 
	57, 58, 48, 57, 58, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 13, 32, 
	41, 46, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 43, 
	45, 95, 47, 57, 65, 90, 97, 122, 
	13, 32, 41, 43, 45, 95, 9, 10, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	41, 47, 9, 10, 48, 57, 13, 32, 
	41, 47, 9, 10, 48, 57, 13, 32, 
	41, 47, 9, 10, 48, 57, 13, 32, 
	41, 47, 9, 10, 48, 57, 13, 32, 
	41, 47, 9, 10, 48, 57, 13, 32, 
	41, 47, 9, 10, 48, 57, 13, 32, 
	41, 47, 9, 10, 48, 57, 13, 32, 
	41, 47, 9, 10, 13, 32, 41, 47, 
	9, 10, 45, 48, 57, 13, 32, 41, 
	101, 9, 10, 48, 57, 43, 45, 48, 
	57, 48, 57, 13, 32, 41, 9, 10, 
	48, 57, 13, 32, 41, 9, 10, 0, 
	48, 49, 57, 13, 32, 41, 45, 46, 
	98, 111, 120, 9, 10, 48, 57, 48, 
	49, 13, 32, 41, 9, 10, 48, 49, 
	48, 55, 13, 32, 41, 9, 10, 48, 
	55, 48, 57, 97, 102, 13, 32, 41, 
	46, 9, 10, 48, 57, 97, 102, 48, 
	57, 97, 102, 112, 48, 57, 97, 102, 
	43, 45, 48, 57, 48, 57, 13, 32, 
	41, 9, 10, 48, 57, 42, 47, 13, 
	32, 41, 45, 46, 58, 98, 111, 120, 
	9, 10, 48, 57, 13, 32, 41, 45, 
	46, 58, 9, 10, 48, 57, 48, 57, 
	48, 57, 58, 48, 57, 48, 57, 13, 
	32, 41, 46, 47, 9, 10, 48, 57, 
	13, 32, 41, 47, 9, 10, 48, 57, 
	43, 45, 95, 47, 57, 65, 90, 97, 
	122, 13, 32, 41, 43, 45, 95, 9, 
	10, 47, 57, 65, 90, 97, 122, 13, 
	32, 41, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 13, 32, 41, 
	45, 46, 58, 9, 10, 48, 57, 97, 
	108, 115, 101, 105, 108, 114, 117, 101, 
	34, 48, 57, 45, 48, 57, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	42, 47, 48, 57, 58, 48, 57, 58, 
	48, 57, 48, 57, 58, 48, 57, 48, 
	57, 13, 32, 46, 47, 61, 9, 10, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 42, 43, 45, 47, 95, 48, 
	57, 65, 90, 97, 122, 13, 32, 43, 
	45, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 42, 43, 
	45, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 13, 32, 47, 61, 9, 10, 
	45, 48, 57, 13, 32, 47, 61, 101, 
	9, 10, 48, 57, 43, 45, 48, 57, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 0, 13, 32, 34, 40, 45, 
	47, 48, 102, 116, 117, 9, 10, 49, 
	57, 0, 48, 49, 57, 13, 32, 45, 
	46, 47, 61, 98, 111, 120, 9, 10, 
	48, 57, 48, 49, 13, 32, 47, 61, 
	9, 10, 48, 49, 48, 55, 13, 32, 
	47, 61, 9, 10, 48, 55, 48, 57, 
	97, 102, 13, 32, 46, 47, 61, 9, 
	10, 48, 57, 97, 102, 48, 57, 97, 
	102, 112, 48, 57, 97, 102, 43, 45, 
	48, 57, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 42, 47, 13, 32, 
	45, 46, 47, 58, 61, 98, 111, 120, 
	9, 10, 48, 57, 13, 32, 45, 46, 
	47, 58, 61, 9, 10, 48, 57, 48, 
	57, 48, 57, 58, 48, 57, 48, 57, 
	13, 32, 46, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 42, 43, 45, 47, 95, 48, 57, 
	65, 90, 97, 122, 13, 32, 43, 45, 
	47, 61, 95, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 42, 43, 45, 
	47, 61, 95, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 13, 32, 45, 46, 47, 58, 61, 
	9, 10, 48, 57, 97, 108, 115, 101, 
	114, 117, 101, 34, 13, 32, 45, 46, 
	9, 10, 48, 57, 13, 32, 9, 10, 
	13, 32, 47, 9, 10, 48, 57, 13, 
	32, 46, 47, 9, 10, 13, 32, 47, 
	9, 10, 48, 57, 13, 32, 43, 45, 
	95, 9, 10, 47, 57, 65, 90, 97, 
	122, 13, 32, 47, 9, 10, 48, 57, 
	13, 32, 47, 9, 10, 48, 57, 13, 
	32, 47, 9, 10, 48, 57, 13, 32, 
	47, 9, 10, 48, 57, 13, 32, 47, 
	9, 10, 48, 57, 13, 32, 47, 9, 
	10, 48, 57, 13, 32, 47, 9, 10, 
	48, 57, 13, 32, 47, 9, 10, 13, 
	32, 47, 9, 10, 13, 32, 101, 9, 
	10, 48, 57, 13, 32, 9, 10, 48, 
	57, 13, 32, 45, 46, 98, 111, 120, 
	9, 10, 48, 57, 13, 32, 9, 10, 
	48, 49, 13, 32, 9, 10, 48, 55, 
	13, 32, 46, 9, 10, 48, 57, 97, 
	102, 13, 32, 9, 10, 48, 57, 13, 
	32, 45, 46, 58, 98, 111, 120, 9, 
	10, 48, 57, 13, 32, 45, 46, 58, 
	9, 10, 48, 57, 13, 32, 46, 47, 
	9, 10, 13, 32, 47, 9, 10, 48, 
	57, 13, 32, 43, 45, 95, 9, 10, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	47, 9, 10, 48, 57, 13, 32, 47, 
	9, 10, 48, 57, 13, 32, 47, 9, 
	10, 48, 57, 13, 32, 47, 9, 10, 
	48, 57, 13, 32, 47, 9, 10, 48, 
	57, 13, 32, 47, 9, 10, 48, 57, 
	13, 32, 47, 9, 10, 48, 57, 13, 
	32, 47, 9, 10, 13, 32, 45, 46, 
	58, 9, 10, 48, 57, 42, 47, 
}

var _cte_single_lengths []byte = []byte{
	0, 15, 1, 0, 1, 0, 0, 1, 
	1, 0, 0, 1, 0, 0, 0, 3, 
	1, 0, 2, 0, 2, 0, 0, 0, 
	0, 1, 2, 0, 2, 0, 0, 1, 
	0, 0, 0, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 2, 2, 5, 0, 1, 16, 1, 
	5, 0, 1, 0, 4, 0, 1, 1, 
	0, 0, 1, 0, 0, 5, 0, 4, 
	3, 6, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 1, 0, 4, 2, 0, 
	3, 3, 15, 2, 8, 0, 3, 0, 
	3, 0, 4, 0, 1, 2, 0, 3, 
	2, 9, 6, 0, 0, 1, 0, 0, 
	5, 0, 4, 3, 6, 4, 4, 4, 
	4, 4, 4, 4, 4, 6, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	12, 1, 6, 4, 2, 15, 1, 5, 
	0, 1, 0, 4, 0, 1, 1, 0, 
	0, 1, 0, 0, 5, 0, 4, 3, 
	6, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 1, 0, 4, 2, 0, 3, 
	3, 2, 8, 0, 3, 0, 3, 0, 
	4, 0, 1, 2, 0, 3, 2, 9, 
	6, 0, 0, 1, 0, 0, 5, 0, 
	4, 3, 6, 4, 4, 4, 4, 4, 
	4, 4, 4, 6, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	0, 4, 2, 1, 1, 0, 0, 1, 
	0, 0, 5, 0, 4, 5, 7, 8, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 1, 0, 5, 2, 0, 4, 11, 
	2, 9, 0, 4, 0, 4, 0, 5, 
	0, 1, 2, 0, 4, 2, 10, 7, 
	0, 0, 1, 0, 0, 5, 0, 4, 
	5, 7, 8, 4, 4, 4, 4, 4, 
	4, 4, 4, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 12, 1, 6, 4, 
	2, 15, 1, 5, 0, 1, 0, 4, 
	0, 1, 1, 0, 0, 1, 0, 0, 
	5, 0, 4, 3, 6, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 0, 
	4, 2, 0, 3, 3, 2, 8, 0, 
	3, 0, 3, 0, 4, 0, 1, 2, 
	0, 3, 2, 9, 6, 0, 0, 1, 
	0, 0, 5, 0, 4, 3, 6, 4, 
	4, 4, 4, 4, 4, 4, 4, 6, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 1, 0, 4, 2, 1, 
	1, 0, 0, 1, 0, 0, 5, 0, 
	4, 5, 7, 8, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 0, 5, 
	2, 0, 4, 11, 2, 9, 0, 4, 
	0, 4, 0, 5, 0, 1, 2, 0, 
	4, 2, 10, 7, 0, 0, 1, 0, 
	0, 5, 0, 4, 5, 7, 8, 4, 
	4, 4, 4, 4, 4, 4, 4, 7, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	12, 1, 6, 4, 2, 15, 1, 5, 
	0, 1, 0, 4, 0, 1, 1, 0, 
	0, 1, 0, 0, 5, 0, 4, 3, 
	6, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 1, 0, 4, 2, 0, 3, 
	3, 2, 8, 0, 3, 0, 3, 0, 
	4, 0, 1, 2, 0, 3, 2, 9, 
	6, 0, 0, 1, 0, 0, 5, 0, 
	4, 3, 6, 4, 4, 4, 4, 4, 
	4, 4, 4, 6, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	0, 4, 2, 1, 1, 0, 0, 1, 
	0, 0, 5, 0, 4, 5, 7, 8, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 1, 0, 5, 2, 0, 4, 11, 
	2, 9, 0, 4, 0, 4, 0, 5, 
	0, 1, 2, 0, 4, 2, 10, 7, 
	0, 0, 1, 0, 0, 5, 0, 4, 
	5, 7, 8, 4, 4, 4, 4, 4, 
	4, 4, 4, 7, 1, 1, 1, 1, 
	1, 1, 1, 1, 4, 2, 3, 4, 
	3, 5, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 2, 7, 2, 2, 
	3, 2, 8, 5, 4, 3, 5, 3, 
	3, 3, 3, 3, 3, 3, 3, 5, 
	0, 2, 0, 0, 0, 0, 0, 0, 
}

var _cte_range_lengths []byte = []byte{
	0, 2, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 0, 1, 1, 1, 3, 
	0, 1, 1, 1, 1, 1, 1, 2, 
	2, 2, 1, 1, 0, 1, 1, 0, 
	1, 1, 1, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 1, 2, 1, 
	2, 1, 1, 1, 2, 1, 1, 0, 
	1, 1, 0, 1, 1, 1, 1, 2, 
	3, 4, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 0, 1, 2, 1, 1, 
	2, 1, 2, 1, 2, 1, 2, 1, 
	2, 2, 3, 2, 2, 1, 1, 2, 
	0, 2, 2, 1, 1, 0, 1, 1, 
	1, 1, 2, 3, 4, 2, 2, 2, 
	2, 2, 2, 2, 1, 2, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	2, 1, 2, 1, 0, 2, 1, 2, 
	1, 1, 1, 2, 1, 1, 0, 1, 
	1, 0, 1, 1, 1, 1, 2, 3, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0, 1, 2, 1, 1, 2, 
	1, 1, 2, 1, 2, 1, 2, 2, 
	3, 2, 2, 1, 1, 2, 0, 2, 
	2, 1, 1, 0, 1, 1, 1, 1, 
	2, 3, 4, 2, 2, 2, 2, 2, 
	2, 2, 1, 2, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 2, 1, 1, 0, 1, 1, 0, 
	1, 1, 1, 1, 2, 3, 4, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 1, 2, 1, 1, 2, 2, 
	1, 2, 1, 2, 1, 2, 2, 3, 
	2, 2, 1, 1, 2, 0, 2, 2, 
	1, 1, 0, 1, 1, 1, 1, 2, 
	3, 4, 4, 2, 2, 2, 2, 2, 
	2, 2, 1, 2, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 1, 2, 1, 
	0, 2, 1, 2, 1, 1, 1, 2, 
	1, 1, 0, 1, 1, 0, 1, 1, 
	1, 1, 2, 3, 4, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 0, 1, 
	2, 1, 1, 2, 1, 1, 2, 1, 
	2, 1, 2, 2, 3, 2, 2, 1, 
	1, 2, 0, 2, 2, 1, 1, 0, 
	1, 1, 1, 1, 2, 3, 4, 2, 
	2, 2, 2, 2, 2, 2, 1, 2, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 2, 1, 1, 
	0, 1, 1, 0, 1, 1, 1, 1, 
	2, 3, 4, 4, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 0, 1, 2, 
	1, 1, 2, 2, 1, 2, 1, 2, 
	1, 2, 2, 3, 2, 2, 1, 1, 
	2, 0, 2, 2, 1, 1, 0, 1, 
	1, 1, 1, 2, 3, 4, 4, 2, 
	2, 2, 2, 2, 2, 2, 1, 2, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	2, 1, 2, 1, 0, 2, 1, 2, 
	1, 1, 1, 2, 1, 1, 0, 1, 
	1, 0, 1, 1, 1, 1, 2, 3, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0, 1, 2, 1, 1, 2, 
	1, 1, 2, 1, 2, 1, 2, 2, 
	3, 2, 2, 1, 1, 2, 0, 2, 
	2, 1, 1, 0, 1, 1, 1, 1, 
	2, 3, 4, 2, 2, 2, 2, 2, 
	2, 2, 1, 2, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 2, 1, 1, 0, 1, 1, 0, 
	1, 1, 1, 1, 2, 3, 4, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 1, 2, 1, 1, 2, 2, 
	1, 2, 1, 2, 1, 2, 2, 3, 
	2, 2, 1, 1, 2, 0, 2, 2, 
	1, 1, 0, 1, 1, 1, 1, 2, 
	3, 4, 4, 2, 2, 2, 2, 2, 
	2, 2, 1, 2, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 1, 2, 1, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 1, 2, 4, 2, 
	2, 2, 2, 2, 2, 2, 1, 2, 
	0, 0, 0, 0, 0, 0, 0, 0, 
}

var _cte_index_offsets []int16 = []int16{
	0, 0, 18, 21, 23, 26, 28, 30, 
	33, 35, 37, 39, 41, 43, 45, 47, 
	54, 56, 58, 62, 64, 68, 70, 72, 
	75, 78, 82, 86, 88, 91, 93, 95, 
	97, 99, 101, 103, 110, 112, 114, 116, 
	118, 120, 122, 124, 126, 128, 130, 132, 
	135, 138, 141, 144, 150, 153, 156, 175, 
	178, 186, 188, 191, 193, 200, 202, 205, 
	207, 209, 211, 213, 215, 217, 224, 226, 
	233, 240, 251, 258, 265, 272, 279, 286, 
	293, 300, 306, 312, 314, 316, 323, 327, 
	329, 335, 340, 358, 362, 373, 375, 381, 
	383, 389, 392, 400, 403, 407, 411, 413, 
	419, 422, 434, 443, 445, 447, 449, 451, 
	453, 460, 462, 469, 476, 487, 494, 501, 
	508, 515, 522, 529, 536, 542, 551, 553, 
	555, 557, 559, 561, 563, 565, 567, 569, 
	571, 586, 589, 598, 604, 607, 625, 628, 
	636, 638, 641, 643, 650, 652, 655, 657, 
	659, 661, 663, 665, 667, 674, 676, 683, 
	690, 701, 708, 715, 722, 729, 736, 743, 
	750, 756, 762, 764, 766, 773, 777, 779, 
	785, 790, 794, 805, 807, 813, 815, 821, 
	824, 832, 835, 839, 843, 845, 851, 854, 
	866, 875, 877, 879, 881, 883, 885, 892, 
	894, 901, 908, 919, 926, 933, 940, 947, 
	954, 961, 968, 974, 983, 985, 987, 989, 
	991, 993, 995, 997, 999, 1001, 1003, 1005, 
	1008, 1010, 1017, 1021, 1024, 1026, 1028, 1030, 
	1032, 1034, 1036, 1043, 1045, 1052, 1061, 1073, 
	1086, 1093, 1100, 1107, 1114, 1121, 1128, 1135, 
	1141, 1147, 1149, 1151, 1159, 1163, 1165, 1172, 
	1186, 1190, 1202, 1204, 1211, 1213, 1220, 1223, 
	1232, 1235, 1239, 1243, 1245, 1252, 1255, 1268, 
	1278, 1280, 1282, 1284, 1286, 1288, 1295, 1297, 
	1304, 1313, 1325, 1338, 1345, 1352, 1359, 1366, 
	1373, 1380, 1387, 1393, 1403, 1405, 1407, 1409, 
	1411, 1413, 1415, 1417, 1419, 1434, 1437, 1446, 
	1452, 1455, 1473, 1476, 1484, 1486, 1489, 1491, 
	1498, 1500, 1503, 1505, 1507, 1509, 1511, 1513, 
	1515, 1522, 1524, 1531, 1538, 1549, 1556, 1563, 
	1570, 1577, 1584, 1591, 1598, 1604, 1610, 1612, 
	1614, 1621, 1625, 1627, 1633, 1638, 1642, 1653, 
	1655, 1661, 1663, 1669, 1672, 1680, 1683, 1687, 
	1691, 1693, 1699, 1702, 1714, 1723, 1725, 1727, 
	1729, 1731, 1733, 1740, 1742, 1749, 1756, 1767, 
	1774, 1781, 1788, 1795, 1802, 1809, 1816, 1822, 
	1831, 1833, 1835, 1837, 1839, 1841, 1843, 1845, 
	1847, 1849, 1851, 1853, 1856, 1858, 1865, 1869, 
	1872, 1874, 1876, 1878, 1880, 1882, 1884, 1891, 
	1893, 1900, 1909, 1921, 1934, 1941, 1948, 1955, 
	1962, 1969, 1976, 1983, 1989, 1995, 1997, 1999, 
	2007, 2011, 2013, 2020, 2034, 2038, 2050, 2052, 
	2059, 2061, 2068, 2071, 2080, 2083, 2087, 2091, 
	2093, 2100, 2103, 2116, 2126, 2128, 2130, 2132, 
	2134, 2136, 2143, 2145, 2152, 2161, 2173, 2186, 
	2193, 2200, 2207, 2214, 2221, 2228, 2235, 2241, 
	2251, 2253, 2255, 2257, 2259, 2261, 2263, 2265, 
	2267, 2282, 2285, 2294, 2300, 2303, 2321, 2324, 
	2332, 2334, 2337, 2339, 2346, 2348, 2351, 2353, 
	2355, 2357, 2359, 2361, 2363, 2370, 2372, 2379, 
	2386, 2397, 2404, 2411, 2418, 2425, 2432, 2439, 
	2446, 2452, 2458, 2460, 2462, 2469, 2473, 2475, 
	2481, 2486, 2490, 2501, 2503, 2509, 2511, 2517, 
	2520, 2528, 2531, 2535, 2539, 2541, 2547, 2550, 
	2562, 2571, 2573, 2575, 2577, 2579, 2581, 2588, 
	2590, 2597, 2604, 2615, 2622, 2629, 2636, 2643, 
	2650, 2657, 2664, 2670, 2679, 2681, 2683, 2685, 
	2687, 2689, 2691, 2693, 2695, 2697, 2699, 2701, 
	2704, 2706, 2713, 2717, 2720, 2722, 2724, 2726, 
	2728, 2730, 2732, 2739, 2741, 2748, 2757, 2769, 
	2782, 2789, 2796, 2803, 2810, 2817, 2824, 2831, 
	2837, 2843, 2845, 2847, 2855, 2859, 2861, 2868, 
	2882, 2886, 2898, 2900, 2907, 2909, 2916, 2919, 
	2928, 2931, 2935, 2939, 2941, 2948, 2951, 2964, 
	2974, 2976, 2978, 2980, 2982, 2984, 2991, 2993, 
	3000, 3009, 3021, 3034, 3041, 3048, 3055, 3062, 
	3069, 3076, 3083, 3089, 3099, 3101, 3103, 3105, 
	3107, 3109, 3111, 3113, 3115, 3122, 3126, 3132, 
	3138, 3144, 3154, 3160, 3166, 3172, 3178, 3184, 
	3190, 3196, 3201, 3206, 3212, 3217, 3227, 3232, 
	3237, 3244, 3249, 3260, 3268, 3274, 3280, 3290, 
	3296, 3302, 3308, 3314, 3320, 3326, 3332, 3337, 
	3345, 3346, 3349, 3350, 3351, 3352, 3353, 3354, 
}

var _cte_indicies []int16 = []int16{
	0, 1, 1, 3, 4, 5, 6, 7, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	8, 2, 0, 16, 2, 17, 2, 18, 
	19, 2, 20, 2, 21, 2, 23, 22, 
	2, 23, 2, 24, 2, 25, 2, 26, 
	2, 27, 2, 28, 2, 29, 2, 30, 
	30, 30, 30, 30, 30, 2, 18, 2, 
	31, 2, 32, 33, 34, 2, 34, 2, 
	0, 35, 16, 2, 36, 2, 37, 2, 
	38, 39, 2, 40, 41, 2, 42, 40, 
	41, 2, 43, 44, 45, 2, 45, 2, 
	46, 47, 2, 48, 2, 49, 2, 50, 
	2, 51, 2, 52, 2, 53, 2, 54, 
	54, 54, 54, 54, 54, 2, 55, 2, 
	56, 2, 57, 2, 58, 2, 59, 2, 
	60, 2, 61, 2, 62, 2, 63, 2, 
	64, 2, 66, 65, 68, 69, 67, 68, 
	70, 67, 71, 69, 67, 73, 74, 72, 
	76, 77, 78, 79, 80, 75, 81, 81, 
	2, 82, 81, 2, 83, 84, 84, 85, 
	86, 87, 88, 89, 91, 92, 93, 94, 
	95, 96, 97, 98, 84, 90, 2, 83, 
	99, 2, 100, 100, 101, 102, 103, 100, 
	99, 2, 104, 2, 105, 106, 2, 107, 
	2, 108, 108, 109, 111, 108, 110, 2, 
	112, 2, 114, 113, 2, 114, 2, 115, 
	2, 116, 2, 117, 2, 118, 2, 119, 
	2, 120, 120, 121, 122, 123, 120, 2, 
	124, 2, 120, 120, 122, 123, 120, 125, 
	2, 126, 126, 126, 126, 126, 126, 2, 
	120, 120, 126, 126, 123, 126, 120, 126, 
	126, 126, 2, 120, 120, 122, 123, 120, 
	127, 2, 120, 120, 122, 123, 120, 128, 
	2, 120, 120, 122, 123, 120, 129, 2, 
	120, 120, 122, 123, 120, 130, 2, 120, 
	120, 122, 123, 120, 131, 2, 120, 120, 
	122, 123, 120, 132, 2, 120, 120, 122, 
	123, 120, 133, 2, 120, 120, 122, 123, 
	120, 2, 108, 108, 109, 111, 108, 2, 
	105, 2, 134, 2, 135, 135, 136, 137, 
	135, 134, 2, 138, 139, 140, 2, 140, 
	2, 135, 135, 136, 135, 140, 2, 84, 
	84, 93, 84, 2, 83, 141, 141, 85, 
	86, 87, 88, 89, 91, 92, 94, 95, 
	96, 97, 98, 141, 90, 2, 83, 142, 
	99, 2, 100, 100, 101, 102, 103, 143, 
	144, 145, 100, 99, 2, 146, 2, 100, 
	100, 103, 100, 146, 2, 147, 2, 100, 
	100, 103, 100, 147, 2, 148, 149, 2, 
	100, 100, 150, 103, 100, 148, 149, 2, 
	151, 152, 2, 153, 151, 152, 2, 154, 
	155, 156, 2, 156, 2, 157, 157, 158, 
	157, 156, 2, 159, 160, 2, 100, 100, 
	101, 102, 162, 103, 143, 144, 145, 100, 
	161, 2, 100, 100, 101, 102, 162, 103, 
	100, 99, 2, 163, 2, 164, 2, 165, 
	2, 166, 2, 167, 2, 168, 168, 169, 
	170, 171, 168, 2, 172, 2, 168, 168, 
	170, 171, 168, 173, 2, 174, 174, 174, 
	174, 174, 174, 2, 168, 168, 174, 174, 
	171, 174, 168, 174, 174, 174, 2, 168, 
	168, 170, 171, 168, 175, 2, 168, 168, 
	170, 171, 168, 176, 2, 168, 168, 170, 
	171, 168, 177, 2, 168, 168, 170, 171, 
	168, 178, 2, 168, 168, 170, 171, 168, 
	179, 2, 168, 168, 170, 171, 168, 180, 
	2, 168, 168, 170, 171, 168, 181, 2, 
	168, 168, 170, 171, 168, 2, 100, 100, 
	101, 102, 162, 103, 100, 161, 2, 182, 
	2, 183, 2, 184, 2, 185, 2, 186, 
	2, 187, 2, 188, 2, 189, 2, 190, 
	2, 191, 2, 192, 193, 193, 194, 195, 
	196, 197, 198, 200, 201, 202, 203, 193, 
	199, 2, 192, 204, 2, 205, 205, 206, 
	207, 208, 209, 205, 204, 2, 210, 210, 
	211, 212, 210, 2, 213, 214, 2, 215, 
	212, 212, 216, 217, 218, 219, 220, 222, 
	223, 224, 225, 226, 227, 228, 212, 221, 
	2, 215, 229, 2, 230, 230, 231, 232, 
	233, 230, 229, 2, 234, 2, 235, 236, 
	2, 237, 2, 238, 238, 239, 241, 238, 
	240, 2, 242, 2, 244, 243, 2, 244, 
	2, 245, 2, 246, 2, 247, 2, 248, 
	2, 249, 2, 250, 250, 251, 252, 253, 
	250, 2, 254, 2, 250, 250, 252, 253, 
	250, 255, 2, 256, 256, 256, 256, 256, 
	256, 2, 250, 250, 256, 256, 256, 253, 
	250, 256, 256, 256, 2, 250, 250, 252, 
	253, 250, 257, 2, 250, 250, 252, 253, 
	250, 258, 2, 250, 250, 252, 253, 250, 
	259, 2, 250, 250, 252, 253, 250, 260, 
	2, 250, 250, 252, 253, 250, 261, 2, 
	250, 250, 252, 253, 250, 262, 2, 250, 
	250, 252, 253, 250, 263, 2, 250, 250, 
	252, 253, 250, 2, 238, 238, 239, 241, 
	238, 2, 235, 2, 264, 2, 265, 265, 
	266, 267, 265, 264, 2, 268, 269, 270, 
	2, 270, 2, 265, 265, 267, 265, 270, 
	2, 193, 193, 203, 193, 2, 215, 271, 
	229, 2, 230, 230, 231, 232, 272, 273, 
	274, 233, 230, 229, 2, 275, 2, 230, 
	230, 233, 230, 275, 2, 276, 2, 230, 
	230, 233, 230, 276, 2, 277, 278, 2, 
	230, 230, 279, 233, 230, 277, 278, 2, 
	280, 281, 2, 282, 280, 281, 2, 283, 
	284, 285, 2, 285, 2, 286, 286, 287, 
	286, 285, 2, 288, 289, 2, 230, 230, 
	231, 232, 291, 272, 273, 274, 233, 230, 
	290, 2, 230, 230, 231, 232, 291, 233, 
	230, 229, 2, 292, 2, 293, 2, 294, 
	2, 295, 2, 296, 2, 297, 297, 298, 
	299, 300, 297, 2, 301, 2, 297, 297, 
	299, 300, 297, 302, 2, 303, 303, 303, 
	303, 303, 303, 2, 297, 297, 303, 303, 
	303, 300, 297, 303, 303, 303, 2, 297, 
	297, 299, 300, 297, 304, 2, 297, 297, 
	299, 300, 297, 305, 2, 297, 297, 299, 
	300, 297, 306, 2, 297, 297, 299, 300, 
	297, 307, 2, 297, 297, 299, 300, 297, 
	308, 2, 297, 297, 299, 300, 297, 309, 
	2, 297, 297, 299, 300, 297, 310, 2, 
	297, 297, 299, 300, 297, 2, 230, 230, 
	231, 232, 291, 233, 230, 290, 2, 311, 
	2, 312, 2, 313, 2, 314, 2, 315, 
	2, 316, 2, 317, 2, 318, 2, 319, 
	2, 320, 2, 321, 2, 322, 323, 2, 
	324, 2, 325, 325, 326, 328, 325, 327, 
	2, 213, 214, 329, 2, 331, 330, 2, 
	331, 2, 332, 2, 333, 2, 334, 2, 
	335, 2, 336, 2, 337, 337, 338, 339, 
	340, 337, 2, 341, 2, 337, 337, 339, 
	340, 337, 342, 2, 213, 343, 343, 344, 
	343, 343, 343, 343, 2, 337, 337, 343, 
	343, 345, 340, 343, 337, 343, 343, 343, 
	2, 337, 337, 213, 343, 343, 346, 340, 
	343, 337, 343, 343, 343, 2, 337, 337, 
	339, 340, 337, 347, 2, 337, 337, 339, 
	340, 337, 348, 2, 337, 337, 339, 340, 
	337, 349, 2, 337, 337, 339, 340, 337, 
	350, 2, 337, 337, 339, 340, 337, 351, 
	2, 337, 337, 339, 340, 337, 352, 2, 
	337, 337, 339, 340, 337, 353, 2, 337, 
	337, 339, 340, 337, 2, 325, 325, 326, 
	328, 325, 2, 322, 2, 354, 2, 355, 
	355, 356, 357, 358, 355, 354, 2, 359, 
	360, 361, 2, 361, 2, 355, 355, 356, 
	357, 355, 361, 2, 192, 362, 362, 194, 
	195, 196, 197, 198, 200, 201, 202, 362, 
	199, 2, 192, 363, 204, 2, 205, 205, 
	206, 207, 208, 209, 364, 365, 366, 205, 
	204, 2, 367, 2, 205, 205, 208, 209, 
	205, 367, 2, 368, 2, 205, 205, 208, 
	209, 205, 368, 2, 369, 370, 2, 205, 
	205, 371, 208, 209, 205, 369, 370, 2, 
	372, 373, 2, 374, 372, 373, 2, 375, 
	376, 377, 2, 377, 2, 378, 378, 379, 
	380, 378, 377, 2, 381, 382, 2, 205, 
	205, 206, 207, 208, 384, 209, 364, 365, 
	366, 205, 383, 2, 205, 205, 206, 207, 
	208, 384, 209, 205, 204, 2, 385, 2, 
	386, 2, 387, 2, 388, 2, 389, 2, 
	390, 390, 391, 392, 393, 390, 2, 394, 
	2, 390, 390, 392, 393, 390, 395, 2, 
	213, 396, 396, 397, 396, 396, 396, 396, 
	2, 390, 390, 396, 396, 398, 393, 396, 
	390, 396, 396, 396, 2, 390, 390, 213, 
	396, 396, 399, 393, 396, 390, 396, 396, 
	396, 2, 390, 390, 392, 393, 390, 400, 
	2, 390, 390, 392, 393, 390, 401, 2, 
	390, 390, 392, 393, 390, 402, 2, 390, 
	390, 392, 393, 390, 403, 2, 390, 390, 
	392, 393, 390, 404, 2, 390, 390, 392, 
	393, 390, 405, 2, 390, 390, 392, 393, 
	390, 406, 2, 390, 390, 392, 393, 390, 
	2, 205, 205, 206, 207, 208, 384, 209, 
	205, 383, 2, 407, 2, 408, 2, 409, 
	2, 410, 2, 411, 2, 412, 2, 413, 
	2, 414, 2, 415, 416, 416, 417, 418, 
	419, 420, 421, 423, 424, 425, 426, 416, 
	422, 2, 415, 427, 2, 428, 428, 429, 
	430, 431, 432, 428, 427, 2, 433, 433, 
	434, 435, 433, 2, 436, 437, 2, 438, 
	435, 435, 439, 440, 441, 442, 443, 445, 
	446, 447, 448, 449, 450, 451, 435, 444, 
	2, 438, 452, 2, 453, 453, 454, 455, 
	456, 453, 452, 2, 457, 2, 458, 459, 
	2, 460, 2, 461, 461, 462, 464, 461, 
	463, 2, 465, 2, 467, 466, 2, 467, 
	2, 468, 2, 469, 2, 470, 2, 471, 
	2, 472, 2, 473, 473, 474, 475, 476, 
	473, 2, 477, 2, 473, 473, 475, 476, 
	473, 478, 2, 479, 479, 479, 479, 479, 
	479, 2, 473, 473, 479, 479, 476, 479, 
	473, 479, 479, 479, 2, 473, 473, 475, 
	476, 473, 480, 2, 473, 473, 475, 476, 
	473, 481, 2, 473, 473, 475, 476, 473, 
	482, 2, 473, 473, 475, 476, 473, 483, 
	2, 473, 473, 475, 476, 473, 484, 2, 
	473, 473, 475, 476, 473, 485, 2, 473, 
	473, 475, 476, 473, 486, 2, 473, 473, 
	475, 476, 473, 2, 461, 461, 462, 464, 
	461, 2, 458, 2, 487, 2, 488, 488, 
	489, 490, 488, 487, 2, 491, 492, 493, 
	2, 493, 2, 488, 488, 489, 488, 493, 
	2, 416, 416, 423, 416, 2, 438, 494, 
	452, 2, 453, 453, 454, 455, 456, 495, 
	496, 497, 453, 452, 2, 498, 2, 453, 
	453, 456, 453, 498, 2, 499, 2, 453, 
	453, 456, 453, 499, 2, 500, 501, 2, 
	453, 453, 502, 456, 453, 500, 501, 2, 
	503, 504, 2, 505, 503, 504, 2, 506, 
	507, 508, 2, 508, 2, 509, 509, 510, 
	509, 508, 2, 511, 512, 2, 453, 453, 
	454, 455, 514, 456, 495, 496, 497, 453, 
	513, 2, 453, 453, 454, 455, 514, 456, 
	453, 452, 2, 515, 2, 516, 2, 517, 
	2, 518, 2, 519, 2, 520, 520, 521, 
	522, 523, 520, 2, 524, 2, 520, 520, 
	522, 523, 520, 525, 2, 526, 526, 526, 
	526, 526, 526, 2, 520, 520, 526, 526, 
	523, 526, 520, 526, 526, 526, 2, 520, 
	520, 522, 523, 520, 527, 2, 520, 520, 
	522, 523, 520, 528, 2, 520, 520, 522, 
	523, 520, 529, 2, 520, 520, 522, 523, 
	520, 530, 2, 520, 520, 522, 523, 520, 
	531, 2, 520, 520, 522, 523, 520, 532, 
	2, 520, 520, 522, 523, 520, 533, 2, 
	520, 520, 522, 523, 520, 2, 453, 453, 
	454, 455, 514, 456, 453, 513, 2, 534, 
	2, 535, 2, 536, 2, 537, 2, 538, 
	2, 539, 2, 540, 2, 541, 2, 542, 
	2, 543, 2, 544, 2, 545, 546, 2, 
	547, 2, 548, 548, 549, 551, 548, 550, 
	2, 436, 437, 552, 2, 554, 553, 2, 
	554, 2, 555, 2, 556, 2, 557, 2, 
	558, 2, 559, 2, 560, 560, 561, 562, 
	563, 560, 2, 564, 2, 560, 560, 562, 
	563, 560, 565, 2, 436, 566, 566, 567, 
	566, 566, 566, 566, 2, 560, 560, 566, 
	566, 568, 563, 566, 560, 566, 566, 566, 
	2, 560, 560, 436, 566, 566, 569, 563, 
	566, 560, 566, 566, 566, 2, 560, 560, 
	562, 563, 560, 570, 2, 560, 560, 562, 
	563, 560, 571, 2, 560, 560, 562, 563, 
	560, 572, 2, 560, 560, 562, 563, 560, 
	573, 2, 560, 560, 562, 563, 560, 574, 
	2, 560, 560, 562, 563, 560, 575, 2, 
	560, 560, 562, 563, 560, 576, 2, 560, 
	560, 562, 563, 560, 2, 548, 548, 549, 
	551, 548, 2, 545, 2, 577, 2, 578, 
	578, 579, 580, 581, 578, 577, 2, 582, 
	583, 584, 2, 584, 2, 578, 578, 579, 
	580, 578, 584, 2, 415, 585, 585, 417, 
	418, 419, 420, 421, 424, 425, 426, 585, 
	422, 2, 415, 586, 427, 2, 428, 428, 
	429, 430, 431, 432, 587, 588, 589, 428, 
	427, 2, 590, 2, 428, 428, 431, 432, 
	428, 590, 2, 591, 2, 428, 428, 431, 
	432, 428, 591, 2, 592, 593, 2, 428, 
	428, 594, 431, 432, 428, 592, 593, 2, 
	595, 596, 2, 597, 595, 596, 2, 598, 
	599, 600, 2, 600, 2, 601, 601, 602, 
	603, 601, 600, 2, 604, 605, 2, 428, 
	428, 429, 430, 431, 607, 432, 587, 588, 
	589, 428, 606, 2, 428, 428, 429, 430, 
	431, 607, 432, 428, 427, 2, 608, 2, 
	609, 2, 610, 2, 611, 2, 612, 2, 
	613, 613, 614, 615, 616, 613, 2, 617, 
	2, 613, 613, 615, 616, 613, 618, 2, 
	436, 619, 619, 620, 619, 619, 619, 619, 
	2, 613, 613, 619, 619, 621, 616, 619, 
	613, 619, 619, 619, 2, 613, 613, 436, 
	619, 619, 622, 616, 619, 613, 619, 619, 
	619, 2, 613, 613, 615, 616, 613, 623, 
	2, 613, 613, 615, 616, 613, 624, 2, 
	613, 613, 615, 616, 613, 625, 2, 613, 
	613, 615, 616, 613, 626, 2, 613, 613, 
	615, 616, 613, 627, 2, 613, 613, 615, 
	616, 613, 628, 2, 613, 613, 615, 616, 
	613, 629, 2, 613, 613, 615, 616, 613, 
	2, 428, 428, 429, 430, 431, 607, 432, 
	428, 606, 2, 630, 2, 631, 2, 632, 
	2, 633, 2, 634, 2, 635, 2, 636, 
	2, 637, 2, 638, 639, 639, 640, 641, 
	642, 643, 644, 645, 647, 648, 649, 639, 
	646, 2, 638, 650, 2, 651, 651, 652, 
	653, 654, 655, 651, 650, 2, 656, 656, 
	657, 658, 656, 2, 659, 660, 2, 661, 
	658, 658, 662, 663, 664, 665, 666, 668, 
	669, 670, 671, 672, 673, 674, 658, 667, 
	2, 661, 675, 2, 676, 676, 677, 678, 
	679, 676, 675, 2, 680, 2, 681, 682, 
	2, 683, 2, 684, 684, 685, 686, 684, 
	687, 2, 688, 2, 690, 689, 2, 690, 
	2, 691, 2, 692, 2, 693, 2, 694, 
	2, 695, 2, 696, 696, 697, 698, 699, 
	696, 2, 700, 2, 696, 696, 697, 699, 
	696, 701, 2, 702, 702, 702, 702, 702, 
	702, 2, 696, 696, 697, 702, 702, 702, 
	696, 702, 702, 702, 2, 696, 696, 697, 
	699, 696, 703, 2, 696, 696, 697, 699, 
	696, 704, 2, 696, 696, 697, 699, 696, 
	705, 2, 696, 696, 697, 699, 696, 706, 
	2, 696, 696, 697, 699, 696, 707, 2, 
	696, 696, 697, 699, 696, 708, 2, 696, 
	696, 697, 699, 696, 709, 2, 696, 696, 
	697, 699, 696, 2, 684, 684, 685, 686, 
	684, 2, 681, 2, 710, 2, 711, 711, 
	712, 713, 711, 710, 2, 714, 715, 716, 
	2, 716, 2, 711, 711, 712, 711, 716, 
	2, 639, 639, 642, 639, 2, 661, 717, 
	675, 2, 676, 676, 677, 678, 679, 718, 
	719, 720, 676, 675, 2, 721, 2, 676, 
	676, 677, 676, 721, 2, 722, 2, 676, 
	676, 677, 676, 722, 2, 723, 724, 2, 
	676, 676, 677, 725, 676, 723, 724, 2, 
	726, 727, 2, 728, 726, 727, 2, 729, 
	730, 731, 2, 731, 2, 732, 732, 733, 
	732, 731, 2, 734, 735, 2, 676, 676, 
	677, 678, 679, 737, 718, 719, 720, 676, 
	736, 2, 676, 676, 677, 678, 679, 737, 
	676, 675, 2, 738, 2, 739, 2, 740, 
	2, 741, 2, 742, 2, 743, 743, 744, 
	745, 746, 743, 2, 747, 2, 743, 743, 
	744, 746, 743, 748, 2, 749, 749, 749, 
	749, 749, 749, 2, 743, 743, 744, 749, 
	749, 749, 743, 749, 749, 749, 2, 743, 
	743, 744, 746, 743, 750, 2, 743, 743, 
	744, 746, 743, 751, 2, 743, 743, 744, 
	746, 743, 752, 2, 743, 743, 744, 746, 
	743, 753, 2, 743, 743, 744, 746, 743, 
	754, 2, 743, 743, 744, 746, 743, 755, 
	2, 743, 743, 744, 746, 743, 756, 2, 
	743, 743, 744, 746, 743, 2, 676, 676, 
	677, 678, 679, 737, 676, 736, 2, 757, 
	2, 758, 2, 759, 2, 760, 2, 761, 
	2, 762, 2, 763, 2, 764, 2, 765, 
	2, 766, 2, 767, 2, 768, 769, 2, 
	770, 2, 771, 771, 772, 774, 771, 773, 
	2, 659, 660, 775, 2, 777, 776, 2, 
	777, 2, 778, 2, 779, 2, 780, 2, 
	781, 2, 782, 2, 783, 783, 784, 785, 
	786, 783, 2, 787, 2, 783, 783, 785, 
	786, 783, 788, 2, 659, 789, 789, 790, 
	789, 789, 789, 789, 2, 783, 783, 789, 
	789, 791, 786, 789, 783, 789, 789, 789, 
	2, 783, 783, 659, 789, 789, 792, 786, 
	789, 783, 789, 789, 789, 2, 783, 783, 
	785, 786, 783, 793, 2, 783, 783, 785, 
	786, 783, 794, 2, 783, 783, 785, 786, 
	783, 795, 2, 783, 783, 785, 786, 783, 
	796, 2, 783, 783, 785, 786, 783, 797, 
	2, 783, 783, 785, 786, 783, 798, 2, 
	783, 783, 785, 786, 783, 799, 2, 783, 
	783, 785, 786, 783, 2, 771, 771, 772, 
	774, 771, 2, 768, 2, 800, 2, 801, 
	801, 802, 803, 804, 801, 800, 2, 805, 
	806, 807, 2, 807, 2, 801, 801, 802, 
	803, 801, 807, 2, 638, 808, 808, 640, 
	641, 643, 644, 645, 647, 648, 649, 808, 
	646, 2, 638, 809, 650, 2, 651, 651, 
	652, 653, 654, 655, 810, 811, 812, 651, 
	650, 2, 813, 2, 651, 651, 654, 655, 
	651, 813, 2, 814, 2, 651, 651, 654, 
	655, 651, 814, 2, 815, 816, 2, 651, 
	651, 817, 654, 655, 651, 815, 816, 2, 
	818, 819, 2, 820, 818, 819, 2, 821, 
	822, 823, 2, 823, 2, 824, 824, 825, 
	826, 824, 823, 2, 827, 828, 2, 651, 
	651, 652, 653, 654, 830, 655, 810, 811, 
	812, 651, 829, 2, 651, 651, 652, 653, 
	654, 830, 655, 651, 650, 2, 831, 2, 
	832, 2, 833, 2, 834, 2, 835, 2, 
	836, 836, 837, 838, 839, 836, 2, 840, 
	2, 836, 836, 838, 839, 836, 841, 2, 
	659, 842, 842, 843, 842, 842, 842, 842, 
	2, 836, 836, 842, 842, 844, 839, 842, 
	836, 842, 842, 842, 2, 836, 836, 659, 
	842, 842, 845, 839, 842, 836, 842, 842, 
	842, 2, 836, 836, 838, 839, 836, 846, 
	2, 836, 836, 838, 839, 836, 847, 2, 
	836, 836, 838, 839, 836, 848, 2, 836, 
	836, 838, 839, 836, 849, 2, 836, 836, 
	838, 839, 836, 850, 2, 836, 836, 838, 
	839, 836, 851, 2, 836, 836, 838, 839, 
	836, 852, 2, 836, 836, 838, 839, 836, 
	2, 651, 651, 652, 653, 654, 830, 655, 
	651, 829, 2, 853, 2, 854, 2, 855, 
	2, 856, 2, 857, 2, 858, 2, 859, 
	2, 860, 2, 861, 861, 862, 863, 861, 
	16, 2, 864, 864, 864, 2, 865, 865, 
	866, 865, 867, 2, 868, 868, 869, 870, 
	868, 2, 868, 868, 870, 868, 871, 2, 
	868, 868, 30, 30, 30, 868, 30, 30, 
	30, 2, 868, 868, 870, 868, 872, 2, 
	868, 868, 870, 868, 873, 2, 868, 868, 
	870, 868, 874, 2, 868, 868, 870, 868, 
	875, 2, 868, 868, 870, 868, 876, 2, 
	868, 868, 870, 868, 877, 2, 868, 868, 
	870, 868, 878, 2, 868, 868, 870, 868, 
	2, 865, 865, 866, 865, 2, 879, 879, 
	880, 879, 31, 2, 879, 879, 879, 34, 
	2, 861, 861, 862, 863, 881, 882, 883, 
	861, 16, 2, 861, 861, 861, 36, 2, 
	861, 861, 861, 37, 2, 861, 861, 884, 
	861, 38, 39, 2, 885, 885, 885, 45, 
	2, 861, 861, 862, 863, 887, 881, 882, 
	883, 861, 886, 2, 861, 861, 862, 863, 
	887, 861, 16, 2, 888, 888, 889, 890, 
	888, 2, 888, 888, 890, 888, 891, 2, 
	888, 888, 54, 54, 54, 888, 54, 54, 
	54, 2, 888, 888, 890, 888, 892, 2, 
	888, 888, 890, 888, 893, 2, 888, 888, 
	890, 888, 894, 2, 888, 888, 890, 888, 
	895, 2, 888, 888, 890, 888, 896, 2, 
	888, 888, 890, 888, 897, 2, 888, 888, 
	890, 888, 898, 2, 888, 888, 890, 888, 
	2, 861, 861, 862, 863, 887, 861, 886, 
	2, 2, 71, 69, 67, 2, 2, 2, 
	2, 2, 2, 
}

var _cte_trans_targs []int16 = []int16{
	2, 1, 0, 629, 1, 20, 28, 650, 
	663, 629, 629, 36, 40, 42, 45, 629, 
	628, 4, 5, 16, 630, 7, 8, 9, 
	10, 11, 12, 13, 631, 632, 633, 643, 
	19, 19, 644, 645, 646, 647, 648, 648, 
	25, 25, 26, 27, 27, 649, 1, 1, 
	30, 31, 32, 33, 652, 653, 654, 37, 
	38, 39, 629, 41, 629, 43, 44, 629, 
	629, 46, 664, 47, 48, 49, 665, 48, 
	50, 666, 51, 50, 50, 50, 50, 50, 
	50, 53, 667, 55, 54, 89, 90, 91, 
	104, 105, 125, 89, 89, 668, 126, 130, 
	132, 135, 89, 56, 54, 57, 84, 668, 
	58, 59, 83, 60, 54, 61, 82, 668, 
	62, 63, 64, 65, 66, 67, 68, 69, 
	54, 70, 72, 668, 71, 74, 73, 75, 
	76, 77, 78, 79, 80, 81, 85, 54, 
	668, 86, 87, 87, 88, 90, 92, 93, 
	95, 97, 94, 96, 98, 98, 99, 100, 
	100, 101, 102, 102, 103, 54, 668, 90, 
	90, 106, 107, 108, 109, 110, 111, 112, 
	54, 113, 115, 668, 114, 117, 116, 118, 
	119, 120, 121, 122, 123, 124, 127, 128, 
	129, 89, 131, 89, 133, 134, 89, 89, 
	137, 136, 139, 255, 256, 269, 270, 291, 
	292, 296, 299, 669, 138, 139, 222, 250, 
	140, 141, 139, 140, 141, 139, 139, 142, 
	176, 141, 177, 190, 191, 211, 176, 176, 
	212, 216, 218, 221, 176, 143, 136, 144, 
	171, 669, 145, 146, 170, 147, 136, 148, 
	169, 669, 149, 150, 151, 152, 153, 154, 
	155, 156, 136, 157, 159, 669, 158, 161, 
	160, 162, 163, 164, 165, 166, 167, 168, 
	172, 136, 173, 669, 174, 174, 175, 178, 
	179, 181, 183, 180, 182, 184, 184, 185, 
	186, 186, 187, 188, 188, 189, 136, 669, 
	141, 141, 192, 193, 194, 195, 196, 197, 
	198, 136, 199, 201, 669, 200, 203, 202, 
	204, 205, 206, 207, 208, 209, 210, 213, 
	214, 215, 176, 217, 176, 219, 220, 176, 
	176, 223, 224, 249, 225, 139, 226, 248, 
	141, 227, 228, 229, 230, 231, 232, 233, 
	234, 139, 235, 237, 141, 236, 240, 238, 
	238, 239, 239, 241, 242, 243, 244, 245, 
	246, 247, 251, 139, 140, 141, 252, 253, 
	253, 254, 255, 257, 258, 260, 262, 259, 
	261, 263, 263, 264, 265, 265, 266, 267, 
	267, 268, 139, 140, 141, 255, 255, 271, 
	272, 273, 274, 275, 276, 277, 139, 278, 
	280, 141, 279, 283, 281, 281, 282, 282, 
	284, 285, 286, 287, 288, 289, 290, 293, 
	294, 295, 139, 297, 298, 139, 139, 301, 
	300, 303, 419, 420, 433, 434, 455, 670, 
	456, 460, 463, 302, 303, 386, 414, 304, 
	305, 303, 304, 305, 303, 303, 306, 340, 
	305, 341, 354, 355, 375, 340, 340, 376, 
	380, 382, 385, 340, 307, 300, 308, 335, 
	670, 309, 310, 334, 311, 300, 312, 333, 
	670, 313, 314, 315, 316, 317, 318, 319, 
	320, 300, 321, 323, 670, 322, 325, 324, 
	326, 327, 328, 329, 330, 331, 332, 336, 
	300, 670, 337, 338, 338, 339, 342, 343, 
	345, 347, 344, 346, 348, 348, 349, 350, 
	350, 351, 352, 352, 353, 300, 670, 305, 
	305, 356, 357, 358, 359, 360, 361, 362, 
	300, 363, 365, 670, 364, 367, 366, 368, 
	369, 370, 371, 372, 373, 374, 377, 378, 
	379, 340, 381, 340, 383, 384, 340, 340, 
	387, 388, 413, 389, 303, 390, 412, 305, 
	391, 392, 393, 394, 395, 396, 397, 398, 
	303, 399, 401, 305, 400, 404, 402, 402, 
	403, 403, 405, 406, 407, 408, 409, 410, 
	411, 415, 303, 304, 305, 416, 417, 417, 
	418, 419, 421, 422, 424, 426, 423, 425, 
	427, 427, 428, 429, 429, 430, 431, 431, 
	432, 303, 304, 305, 419, 419, 435, 436, 
	437, 438, 439, 440, 441, 303, 442, 444, 
	305, 443, 447, 445, 445, 446, 446, 448, 
	449, 450, 451, 452, 453, 454, 457, 458, 
	459, 303, 461, 462, 303, 303, 465, 464, 
	467, 583, 671, 584, 597, 598, 619, 620, 
	624, 627, 466, 467, 550, 578, 468, 469, 
	467, 468, 469, 467, 467, 470, 504, 469, 
	505, 518, 519, 539, 504, 504, 540, 544, 
	546, 549, 504, 471, 464, 671, 472, 499, 
	473, 474, 498, 475, 464, 671, 476, 497, 
	477, 478, 479, 480, 481, 482, 483, 484, 
	464, 671, 485, 487, 486, 489, 488, 490, 
	491, 492, 493, 494, 495, 496, 500, 464, 
	671, 501, 502, 502, 503, 506, 507, 509, 
	511, 508, 510, 512, 512, 513, 514, 514, 
	515, 516, 516, 517, 464, 671, 469, 469, 
	520, 521, 522, 523, 524, 525, 526, 464, 
	671, 527, 529, 528, 531, 530, 532, 533, 
	534, 535, 536, 537, 538, 541, 542, 543, 
	504, 545, 504, 547, 548, 504, 504, 551, 
	552, 577, 553, 467, 554, 576, 469, 555, 
	556, 557, 558, 559, 560, 561, 562, 467, 
	563, 565, 469, 564, 568, 566, 566, 567, 
	567, 569, 570, 571, 572, 573, 574, 575, 
	579, 467, 468, 469, 580, 581, 581, 582, 
	583, 585, 586, 588, 590, 587, 589, 591, 
	591, 592, 593, 593, 594, 595, 595, 596, 
	467, 468, 469, 583, 583, 599, 600, 601, 
	602, 603, 604, 605, 467, 606, 608, 469, 
	607, 611, 609, 609, 610, 610, 612, 613, 
	614, 615, 616, 617, 618, 621, 622, 623, 
	467, 625, 626, 467, 467, 629, 3, 17, 
	629, 629, 6, 642, 629, 14, 15, 634, 
	635, 636, 637, 638, 639, 640, 641, 629, 
	18, 21, 22, 23, 24, 629, 651, 29, 
	629, 34, 35, 655, 656, 657, 658, 659, 
	660, 661, 662, 
}

var _cte_trans_actions []byte = []byte{
	0, 0, 0, 67, 61, 7, 0, 99, 
	99, 59, 55, 0, 0, 0, 0, 57, 
	11, 35, 0, 35, 37, 39, 39, 0, 
	41, 41, 0, 43, 43, 45, 47, 17, 
	0, 9, 23, 11, 25, 27, 13, 15, 
	19, 21, 0, 0, 9, 23, 65, 63, 
	41, 41, 0, 43, 43, 45, 47, 0, 
	0, 0, 5, 0, 1, 0, 0, 3, 
	69, 0, 71, 0, 0, 0, 73, 65, 
	0, 87, 0, 85, 83, 75, 77, 79, 
	81, 0, 89, 0, 0, 67, 61, 7, 
	0, 99, 99, 59, 55, 91, 0, 0, 
	0, 0, 57, 11, 29, 0, 0, 102, 
	35, 0, 35, 37, 49, 0, 37, 147, 
	39, 39, 0, 41, 41, 0, 43, 43, 
	53, 0, 0, 171, 45, 45, 47, 45, 
	45, 45, 45, 45, 45, 45, 17, 31, 
	114, 0, 0, 9, 23, 0, 11, 0, 
	0, 0, 25, 27, 13, 15, 0, 19, 
	21, 0, 0, 9, 23, 33, 126, 65, 
	63, 99, 0, 41, 41, 0, 43, 43, 
	51, 0, 0, 159, 45, 45, 47, 45, 
	45, 45, 45, 45, 45, 45, 0, 0, 
	0, 5, 0, 1, 0, 0, 3, 69, 
	0, 0, 67, 61, 7, 0, 99, 99, 
	0, 0, 0, 93, 11, 29, 0, 0, 
	29, 29, 0, 0, 0, 65, 63, 0, 
	67, 61, 7, 0, 99, 99, 59, 55, 
	0, 0, 0, 0, 57, 11, 29, 0, 
	0, 105, 35, 0, 35, 37, 49, 0, 
	37, 150, 39, 39, 0, 41, 41, 0, 
	43, 43, 53, 0, 0, 174, 45, 45, 
	47, 45, 45, 45, 45, 45, 45, 45, 
	17, 31, 0, 117, 0, 9, 23, 11, 
	0, 0, 0, 25, 27, 13, 15, 0, 
	19, 21, 0, 0, 9, 23, 33, 129, 
	65, 63, 99, 0, 41, 41, 0, 43, 
	43, 51, 0, 0, 162, 45, 45, 47, 
	45, 45, 45, 45, 45, 45, 45, 0, 
	0, 0, 5, 0, 1, 0, 0, 3, 
	69, 35, 0, 35, 37, 49, 49, 37, 
	49, 39, 39, 0, 41, 41, 0, 43, 
	43, 53, 0, 53, 53, 45, 45, 47, 
	144, 141, 187, 45, 45, 45, 45, 45, 
	45, 45, 17, 31, 31, 31, 0, 0, 
	9, 23, 0, 11, 0, 0, 0, 25, 
	27, 13, 15, 0, 19, 21, 0, 0, 
	9, 23, 33, 33, 33, 65, 63, 99, 
	0, 41, 41, 0, 43, 43, 51, 0, 
	51, 51, 45, 45, 47, 144, 138, 183, 
	45, 45, 45, 45, 45, 45, 45, 0, 
	0, 0, 5, 0, 0, 3, 69, 0, 
	0, 67, 61, 7, 0, 99, 99, 95, 
	0, 0, 0, 11, 29, 0, 0, 29, 
	29, 0, 0, 0, 65, 63, 0, 67, 
	61, 7, 0, 99, 99, 59, 55, 0, 
	0, 0, 0, 57, 11, 29, 0, 0, 
	108, 35, 0, 35, 37, 49, 0, 37, 
	153, 39, 39, 0, 41, 41, 0, 43, 
	43, 53, 0, 0, 177, 45, 45, 47, 
	45, 45, 45, 45, 45, 45, 45, 17, 
	31, 120, 0, 0, 9, 23, 11, 0, 
	0, 0, 25, 27, 13, 15, 0, 19, 
	21, 0, 0, 9, 23, 33, 132, 65, 
	63, 99, 0, 41, 41, 0, 43, 43, 
	51, 0, 0, 165, 45, 45, 47, 45, 
	45, 45, 45, 45, 45, 45, 0, 0, 
	0, 5, 0, 1, 0, 0, 3, 69, 
	35, 0, 35, 37, 49, 49, 37, 49, 
	39, 39, 0, 41, 41, 0, 43, 43, 
	53, 0, 53, 53, 45, 45, 47, 144, 
	141, 187, 45, 45, 45, 45, 45, 45, 
	45, 17, 31, 31, 31, 0, 0, 9, 
	23, 0, 11, 0, 0, 0, 25, 27, 
	13, 15, 0, 19, 21, 0, 0, 9, 
	23, 33, 33, 33, 65, 63, 99, 0, 
	41, 41, 0, 43, 43, 51, 0, 51, 
	51, 45, 45, 47, 144, 138, 183, 45, 
	45, 45, 45, 45, 45, 45, 0, 0, 
	0, 5, 0, 0, 3, 69, 0, 0, 
	67, 61, 97, 7, 0, 99, 99, 0, 
	0, 0, 11, 29, 0, 0, 29, 29, 
	0, 0, 0, 65, 63, 0, 67, 61, 
	7, 0, 99, 99, 59, 55, 0, 0, 
	0, 0, 57, 11, 29, 111, 0, 0, 
	35, 0, 35, 37, 49, 156, 0, 37, 
	39, 39, 0, 41, 41, 0, 43, 43, 
	53, 180, 0, 0, 45, 45, 47, 45, 
	45, 45, 45, 45, 45, 45, 17, 31, 
	123, 0, 0, 9, 23, 11, 0, 0, 
	0, 25, 27, 13, 15, 0, 19, 21, 
	0, 0, 9, 23, 33, 135, 65, 63, 
	99, 0, 41, 41, 0, 43, 43, 51, 
	168, 0, 0, 45, 45, 47, 45, 45, 
	45, 45, 45, 45, 45, 0, 0, 0, 
	5, 0, 1, 0, 0, 3, 69, 35, 
	0, 35, 37, 49, 49, 37, 49, 39, 
	39, 0, 41, 41, 0, 43, 43, 53, 
	0, 53, 53, 45, 45, 47, 144, 141, 
	187, 45, 45, 45, 45, 45, 45, 45, 
	17, 31, 31, 31, 0, 0, 9, 23, 
	0, 11, 0, 0, 0, 25, 27, 13, 
	15, 0, 19, 21, 0, 0, 9, 23, 
	33, 33, 33, 65, 63, 99, 0, 41, 
	41, 0, 43, 43, 51, 0, 51, 51, 
	45, 45, 47, 144, 138, 183, 45, 45, 
	45, 45, 45, 45, 45, 0, 0, 0, 
	5, 0, 0, 3, 69, 29, 0, 0, 
	0, 49, 0, 37, 53, 0, 0, 45, 
	45, 45, 45, 45, 45, 45, 45, 31, 
	0, 0, 0, 0, 0, 33, 99, 0, 
	51, 0, 0, 45, 45, 45, 45, 45, 
	45, 45, 45, 
}

var _cte_eof_actions []byte = []byte{
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 29, 0, 49, 53, 
	53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 49, 31, 31, 29, 29, 29, 
	29, 33, 29, 29, 51, 51, 51, 51, 
	51, 51, 51, 51, 51, 51, 51, 29, 
	0, 0, 0, 0, 0, 0, 0, 0, 
}

const cte_start int = 1
const cte_error int = 0

const cte_en_comment_iterate int = 46
const cte_en_multiline_comment_iterate int = 47
const cte_en_string_iterate int = 50
const cte_en_uri_iterate int = 52
const cte_en_list_iterate int = 54
const cte_en_unordered_map_iterate int = 136
const cte_en_ordered_map_iterate int = 300
const cte_en_metadata_map_iterate int = 464
const cte_en_main int = 1


//line cte.rl:418

type Parser struct {
    cs int // Current Ragel state
    ts int // Position: start of token
    te int // Position: end of token
    top int // Index of top of stack
    stack []int
    data []byte
    arrayStart int // Start of the current item of interest
    commentDepth int
    significand uint64
    significandSign int
    exponent int
    exponentSign int
    exponentAdjust int
    month int
    day int
    hour int
    minute int
    second int
    subsecond int
    subsecondMultiplier int
    timezone []byte
}

func (this *Parser) Init(maxDepth int) {
    this.stack = make([]int, maxDepth)
    this.significandSign = 1
    this.exponentSign = 1
    this.subsecondMultiplier = 1000000000
    this.timezone = make([]byte, 0, 40)
}

func NewParser(maxDepth int) *Parser {
    this := new(Parser)
    this.Init(maxDepth)
    return this
}

func (this *Parser) flushByteArray(index int, callbacks CteDecoderCallbacks) error {
    err := callbacks.OnArrayData(this.data[this.arrayStart:index])
    if err != nil {
        return err
    }
    this.arrayStart = index
    return nil
}

func (this *Parser) flushAndAddEscapedCharacter(index int, escapedCharacter byte, callbacks CteDecoderCallbacks) error {
    this.data[index] = escapedCharacter
    if err := this.flushByteArray(index+1, callbacks); err != nil {
        return err
    }
    // Get past escape initiator and escape char
    this.arrayStart = index + 2
    return nil
}

func (this *Parser) Parse(src []byte, callbacks CteDecoderCallbacks) (isComplete bool, err error) {
//  if this.ts > 0 {
        // TODO: Read from undeflow buffer
//  }
    this.data = src
    p := 0 // Position: current
    pe := len(this.data) // Position: end of buffer
    // TODO: Change to -1 and check for end of file
    eof := pe // Position: end of file

    _ = eof
    
    
//line cte.go:1698
	{
	 this.cs = cte_start
	 this.top = 0
	}

//line cte.go:1704
	{
	var _klen int
	var _trans int
	var _acts int
	var _nacts uint
	var _keys int
	if p == pe {
		goto _test_eof
	}
	if  this.cs == 0 {
		goto _out
	}
_resume:
	_keys = int(_cte_key_offsets[ this.cs])
	_trans = int(_cte_index_offsets[ this.cs])

	_klen = int(_cte_single_lengths[ this.cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + _klen - 1)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + ((_upper - _lower) >> 1)
			switch {
			case  this.data[p] < _cte_trans_keys[_mid]:
				_upper = _mid - 1
			case  this.data[p] > _cte_trans_keys[_mid]:
				_lower = _mid + 1
			default:
				_trans += int(_mid - int(_keys))
				goto _match
			}
		}
		_keys += _klen
		_trans += _klen
	}

	_klen = int(_cte_range_lengths[ this.cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + (_klen << 1) - 2)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + (((_upper - _lower) >> 1) & ^1)
			switch {
			case  this.data[p] < _cte_trans_keys[_mid]:
				_upper = _mid - 2
			case  this.data[p] > _cte_trans_keys[_mid + 1]:
				_lower = _mid + 2
			default:
				_trans += int((_mid - int(_keys)) >> 1)
				goto _match
			}
		}
		_trans += _klen
	}

_match:
	_trans = int(_cte_indicies[_trans])
	 this.cs = int(_cte_trans_targs[_trans])

	if _cte_trans_actions[_trans] == 0 {
		goto _again
	}

	_acts = int(_cte_trans_actions[_trans])
	_nacts = uint(_cte_actions[_acts]); _acts++
	for ; _nacts > 0; _nacts-- {
		_acts++
		switch _cte_actions[_acts-1] {
		case 0:
//line cte.rl:47

        err = callbacks.OnNil()
        if err != nil {
            p++; goto _out

        }
    
		case 1:
//line cte.rl:54

        err = callbacks.OnBool(true)
        if err != nil {
            p++; goto _out

        }
    
		case 2:
//line cte.rl:61

        err = callbacks.OnBool(false)
        if err != nil {
            p++; goto _out

        }
    
		case 3:
//line cte.rl:70

        this.significandSign = -1
    
		case 4:
//line cte.rl:74

        this.exponentSign = -1
    
		case 5:
//line cte.rl:78

        this.significand = this.significand * 10 + uint64( this.data[p] - '0')
    
		case 6:
//line cte.rl:82

        this.significand = (this.significand << 4) | uint64( this.data[p] - '0')
    
		case 7:
//line cte.rl:84

        this.significand = (this.significand << 4) | uint64( this.data[p] - 'a' + 10)
    
		case 8:
//line cte.rl:88

        this.significand = this.significand * 10 + uint64( this.data[p] - '0')
        this.exponentAdjust--
    
		case 9:
//line cte.rl:93

        this.significand = (this.significand << 4) | uint64( this.data[p] - '0')
        this.exponentAdjust -= 4
    
		case 10:
//line cte.rl:96

        this.significand = (this.significand << 4) | uint64( this.data[p] - 'a' + 10)
        this.exponentAdjust -= 4
    
		case 11:
//line cte.rl:101

        this.exponent = this.exponent * 10 + int( this.data[p] - '0')
    
		case 12:
//line cte.rl:110

        this.significand = (this.significand << 1) | uint64( this.data[p] - '0')
    
		case 13:
//line cte.rl:114

        this.significand = (this.significand << 3) | uint64( this.data[p] - '0')
    
		case 14:
//line cte.rl:120

        if this.significandSign >= 0 {
            callbacks.OnPositiveInt(this.significand)
        } else {
            callbacks.OnNegativeInt(this.significand)
        }
        this.significandSign = 1
        this.significand = 0
    
		case 15:
//line cte.rl:130

        callbacks.OnDecimalFloat(int64(this.significand) * int64(this.significandSign), (this.exponent+this.exponentAdjust) * this.exponentSign)
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
    
		case 16:
//line cte.rl:139

        exponent := float64((this.exponent * this.exponentSign + this.exponentAdjust))
        callbacks.OnFloat(float64(this.significandSign) * float64(this.significand) * math.Pow(2.0, exponent))
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
    
		case 17:
//line cte.rl:151

        this.month = this.month * 10 + int( this.data[p] - '0')
    
		case 18:
//line cte.rl:155

        this.day = this.day * 10 + int( this.data[p] - '0')
    
		case 19:
//line cte.rl:159

        this.hour = this.hour * 10 + int( this.data[p] - '0')
    
		case 20:
//line cte.rl:163

        this.minute = this.minute * 10 + int( this.data[p] - '0')
    
		case 21:
//line cte.rl:167

        this.second = this.second * 10 + int( this.data[p] - '0')
    
		case 22:
//line cte.rl:171

        this.subsecond = this.subsecond * 10 + int( this.data[p] - '0')
        this.subsecondMultiplier /= 10
    
		case 23:
//line cte.rl:176

        this.timezone = append(this.timezone,  this.data[p])
    
		case 24:
//line cte.rl:183

        year := int(this.significand) * this.significandSign
        callbacks.OnDate(year, this.month, this.day)
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
    
		case 25:
//line cte.rl:192

        nanosecond := this.subsecond * this.subsecondMultiplier
        callbacks.OnTimeTZ(this.hour, this.minute, this.second, nanosecond, string(this.timezone))
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
    
		case 26:
//line cte.rl:203

        year := int(this.significand) * this.significandSign
        nanosecond := this.subsecond * this.subsecondMultiplier
        callbacks.OnTimestampTZ(year, this.month, this.day, this.hour, this.minute, this.second, nanosecond, string(this.timezone))
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
    
		case 27:
//line cte.rl:219

        err = callbacks.OnListBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 54; goto _again

    
		case 28:
//line cte.rl:227

        err = callbacks.OnUnorderedMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 136; goto _again

    
		case 29:
//line cte.rl:235

        err = callbacks.OnOrderedMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 300; goto _again

    
		case 30:
//line cte.rl:243

        err = callbacks.OnMetadataMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 464; goto _again

    
		case 31:
//line cte.rl:251

        this.arrayStart = p + 1
        err = callbacks.OnCommentBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 46; goto _again

    
		case 32:
//line cte.rl:260

        if this.commentDepth == 0 {
            err = callbacks.OnCommentBegin()
            if err != nil {
                p++; goto _out

            }
        } else {
            err = callbacks.OnArrayData(this.data[this.arrayStart:p+1])
            if err != nil {
                p++; goto _out

            }
        }
        this.arrayStart = p + 1
        this.commentDepth++
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 47; goto _again

    
		case 33:
//line cte.rl:277

        this.arrayStart = p + 1
        err = callbacks.OnStringBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 50; goto _again

    
		case 34:
//line cte.rl:286

        this.arrayStart = p + 1
        err = callbacks.OnURIBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 52; goto _again

    
		case 35:
//line cte.rl:305

            err = callbacks.OnArrayData(this.data[this.arrayStart:p])
            if err != nil {
                p++; goto _out

            }
            err = callbacks.OnArrayEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 36:
//line cte.rl:318

            err = callbacks.OnArrayData(this.data[this.arrayStart:p-1])
            if err != nil {
                p++; goto _out

            }
            this.arrayStart = p-1
            this.commentDepth--
            if this.commentDepth == 0 {
                err = callbacks.OnArrayEnd()
                if err != nil {
                    p++; goto _out

                }
            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 37:
//line cte.rl:338
this.flushAndAddEscapedCharacter(p-1, '\\', callbacks)
		case 38:
//line cte.rl:339
this.flushAndAddEscapedCharacter(p-1, '\n', callbacks)
		case 39:
//line cte.rl:340
this.flushAndAddEscapedCharacter(p-1, '\r', callbacks)
		case 40:
//line cte.rl:341
this.flushAndAddEscapedCharacter(p-1, '\t', callbacks)
		case 41:
//line cte.rl:342
this.flushAndAddEscapedCharacter(p-1, '"', callbacks)
		case 42:
//line cte.rl:343
return false, fmt.Errorf("\\%c: Illegal escape encoding", this.data[p])
		case 43:
//line cte.rl:347

            err = callbacks.OnArrayData(this.data[this.arrayStart:p])
            if err != nil {
                p++; goto _out

            }
            err = callbacks.OnArrayEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 44:
//line cte.rl:359

            err = callbacks.OnArrayData(this.data[this.arrayStart:p])
            if err != nil {
                p++; goto _out

            }
            err = callbacks.OnArrayEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 45:
//line cte.rl:373

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 46:
//line cte.rl:383

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 47:
//line cte.rl:393

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 48:
//line cte.rl:403

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
//line cte.go:2214
		}
	}

_again:
	if  this.cs == 0 {
		goto _out
	}
	p++
	if p != pe {
		goto _resume
	}
	_test_eof: {}
	if p == eof {
		__acts := _cte_eof_actions[ this.cs]
		__nacts := uint(_cte_actions[__acts]); __acts++
		for ; __nacts > 0; __nacts-- {
			__acts++
			switch _cte_actions[__acts-1] {
			case 14:
//line cte.rl:120

        if this.significandSign >= 0 {
            callbacks.OnPositiveInt(this.significand)
        } else {
            callbacks.OnNegativeInt(this.significand)
        }
        this.significandSign = 1
        this.significand = 0
    
			case 15:
//line cte.rl:130

        callbacks.OnDecimalFloat(int64(this.significand) * int64(this.significandSign), (this.exponent+this.exponentAdjust) * this.exponentSign)
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
    
			case 16:
//line cte.rl:139

        exponent := float64((this.exponent * this.exponentSign + this.exponentAdjust))
        callbacks.OnFloat(float64(this.significandSign) * float64(this.significand) * math.Pow(2.0, exponent))
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
    
			case 24:
//line cte.rl:183

        year := int(this.significand) * this.significandSign
        callbacks.OnDate(year, this.month, this.day)
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
    
			case 25:
//line cte.rl:192

        nanosecond := this.subsecond * this.subsecondMultiplier
        callbacks.OnTimeTZ(this.hour, this.minute, this.second, nanosecond, string(this.timezone))
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
    
			case 26:
//line cte.rl:203

        year := int(this.significand) * this.significandSign
        nanosecond := this.subsecond * this.subsecondMultiplier
        callbacks.OnTimestampTZ(year, this.month, this.day, this.hour, this.minute, this.second, nanosecond, string(this.timezone))
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
    
//line cte.go:2304
			}
		}
	}

	_out: {}
	}

//line cte.rl:491


    if this.ts > 0 {
        // TODO: Copy to underflow buffer
        // arrayStart
        // ts doesn't seem to get used?
        // copy(this.underflow, data[ts:pe])
        // p = 0
        // pe = pe - ts
    }
    // TODO
    if this.cs == cte_error {
        err = fmt.Errorf("Parse error at %v", p)
    }
//    isComplete = this.cs == cte_parse_first;
    // TODO: Maybe there's no way to detect completion?
    isComplete = true
    return
}
