
//line cte.rl:1
package cte

import (
    "fmt"
    "math"
)

type CteDecoderCallbacks interface {
    OnNil() error
    OnBool(value bool) error
    OnPositiveInt(value uint64) error
    OnNegativeInt(value uint64) error
    OnDecimalFloat(significand int64, exponent int) error
    OnFloat(value float64) error
    OnDate(year, month, day int) error
    OnTimeTZ(hour, minute, second, nanosecond int, tz string) error
    OnTimeLoc(hour, minute, second, nanosecond int, latitude, longitude float32) error
    OnTimestampTZ(year, month, day, hour, minute, second, nanosecond int, tz string) error
    OnTimestampLoc(year, month, day, hour, minute, second, nanosecond int, latitude, longitude float32) error
    OnListBegin() error
    OnOrderedMapBegin() error
    OnUnorderedMapBegin() error
    OnMetadataMapBegin() error
    OnContainerEnd() error
    OnBytesBegin() error
    OnStringBegin() error
    OnURIBegin() error
    OnCommentBegin() error
    OnArrayData(bytes []byte) error
    OnArrayEnd() error
}


//line cte.rl:422




//line cte.go:42
var _cte_actions []byte = []byte{
	0, 1, 0, 1, 1, 1, 2, 1, 3, 
	1, 4, 1, 5, 1, 6, 1, 7, 
	1, 8, 1, 9, 1, 10, 1, 11, 
	1, 12, 1, 13, 1, 14, 1, 15, 
	1, 16, 1, 17, 1, 18, 1, 19, 
	1, 20, 1, 21, 1, 22, 1, 23, 
	1, 24, 1, 25, 1, 26, 1, 27, 
	1, 28, 1, 29, 1, 30, 1, 31, 
	1, 32, 1, 33, 1, 34, 1, 35, 
	1, 36, 1, 37, 1, 38, 1, 39, 
	1, 40, 1, 41, 1, 42, 1, 43, 
	1, 44, 1, 45, 1, 46, 1, 47, 
	1, 48, 1, 49, 1, 50, 1, 51, 
	2, 5, 22, 2, 14, 48, 2, 14, 
	49, 2, 14, 50, 2, 14, 51, 2, 
	15, 48, 2, 15, 49, 2, 15, 50, 
	2, 15, 51, 2, 16, 48, 2, 16, 
	49, 2, 16, 50, 2, 16, 51, 2, 
	17, 48, 2, 17, 49, 2, 17, 50, 
	2, 17, 51, 2, 18, 48, 2, 18, 
	49, 2, 18, 50, 2, 18, 51, 2, 
	19, 48, 2, 19, 49, 2, 19, 50, 
	2, 19, 51, 2, 26, 28, 2, 26, 
	29, 2, 26, 34, 2, 27, 48, 2, 
	27, 49, 2, 27, 50, 2, 27, 51, 
	2, 28, 48, 2, 28, 49, 2, 28, 
	50, 2, 28, 51, 2, 29, 48, 2, 
	29, 49, 2, 29, 50, 2, 29, 51, 
	3, 26, 28, 34, 3, 26, 29, 34, 
}

var _cte_key_offsets []int16 = []int16{
	0, 0, 21, 24, 26, 29, 31, 33, 
	36, 37, 39, 41, 42, 44, 46, 48, 
	57, 58, 60, 64, 66, 71, 73, 75, 
	79, 83, 88, 92, 94, 95, 96, 98, 
	100, 102, 103, 105, 107, 109, 118, 119, 
	120, 121, 122, 124, 125, 126, 127, 128, 
	129, 130, 131, 132, 133, 134, 136, 138, 
	140, 142, 147, 151, 154, 176, 179, 188, 
	190, 193, 195, 203, 205, 208, 209, 211, 
	213, 214, 216, 218, 225, 227, 235, 244, 
	258, 266, 274, 282, 290, 298, 306, 314, 
	320, 326, 327, 329, 337, 341, 343, 350, 
	355, 376, 381, 393, 395, 402, 404, 411, 
	415, 425, 429, 434, 438, 440, 447, 448, 
	449, 454, 456, 469, 479, 481, 483, 484, 
	486, 488, 495, 497, 505, 514, 528, 536, 
	544, 552, 560, 568, 576, 584, 590, 600, 
	601, 602, 603, 604, 606, 607, 612, 613, 
	614, 615, 616, 621, 622, 623, 624, 625, 
	642, 645, 655, 661, 663, 684, 687, 696, 
	698, 701, 703, 711, 713, 716, 717, 719, 
	721, 722, 724, 726, 733, 735, 743, 752, 
	766, 774, 782, 790, 798, 806, 814, 822, 
	828, 834, 835, 837, 845, 849, 851, 858, 
	863, 868, 880, 882, 889, 891, 898, 902, 
	912, 916, 921, 925, 927, 934, 935, 936, 
	941, 943, 956, 966, 968, 970, 971, 973, 
	975, 982, 984, 992, 1001, 1015, 1023, 1031, 
	1039, 1047, 1055, 1063, 1071, 1077, 1087, 1088, 
	1089, 1090, 1091, 1093, 1094, 1099, 1100, 1101, 
	1102, 1103, 1108, 1109, 1110, 1111, 1112, 1114, 
	1117, 1119, 1127, 1131, 1134, 1135, 1137, 1139, 
	1140, 1142, 1144, 1151, 1153, 1161, 1172, 1187, 
	1203, 1211, 1219, 1227, 1235, 1243, 1251, 1259, 
	1265, 1271, 1272, 1274, 1283, 1287, 1289, 1297, 
	1313, 1318, 1331, 1333, 1341, 1343, 1351, 1355, 
	1366, 1370, 1375, 1379, 1381, 1389, 1390, 1391, 
	1397, 1399, 1413, 1424, 1426, 1428, 1429, 1431, 
	1433, 1440, 1442, 1450, 1461, 1476, 1492, 1500, 
	1508, 1516, 1524, 1532, 1540, 1548, 1554, 1565, 
	1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 
	1590, 1593, 1603, 1609, 1611, 1632, 1635, 1644, 
	1646, 1649, 1651, 1659, 1661, 1664, 1665, 1667, 
	1669, 1670, 1672, 1674, 1681, 1683, 1691, 1700, 
	1714, 1722, 1730, 1738, 1746, 1754, 1762, 1770, 
	1776, 1782, 1783, 1785, 1793, 1797, 1799, 1806, 
	1811, 1816, 1828, 1830, 1837, 1839, 1846, 1850, 
	1860, 1864, 1869, 1873, 1875, 1882, 1883, 1884, 
	1889, 1891, 1904, 1914, 1916, 1918, 1919, 1921, 
	1923, 1930, 1932, 1940, 1949, 1963, 1971, 1979, 
	1987, 1995, 2003, 2011, 2019, 2025, 2035, 2036, 
	2037, 2038, 2039, 2041, 2042, 2047, 2048, 2049, 
	2050, 2051, 2056, 2057, 2058, 2059, 2060, 2062, 
	2065, 2067, 2075, 2079, 2082, 2083, 2085, 2087, 
	2088, 2090, 2092, 2099, 2101, 2109, 2120, 2135, 
	2151, 2159, 2167, 2175, 2183, 2191, 2199, 2207, 
	2213, 2219, 2220, 2222, 2231, 2235, 2237, 2245, 
	2261, 2266, 2279, 2281, 2289, 2291, 2299, 2303, 
	2314, 2318, 2323, 2327, 2329, 2337, 2338, 2339, 
	2345, 2347, 2361, 2372, 2374, 2376, 2377, 2379, 
	2381, 2388, 2390, 2398, 2409, 2424, 2440, 2448, 
	2456, 2464, 2472, 2480, 2488, 2496, 2502, 2513, 
	2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 
	2538, 2541, 2551, 2557, 2559, 2580, 2583, 2592, 
	2594, 2597, 2599, 2607, 2609, 2612, 2613, 2615, 
	2617, 2618, 2620, 2622, 2629, 2631, 2639, 2648, 
	2662, 2670, 2678, 2686, 2694, 2702, 2710, 2718, 
	2724, 2730, 2731, 2733, 2741, 2745, 2747, 2754, 
	2759, 2764, 2776, 2778, 2785, 2787, 2794, 2798, 
	2808, 2812, 2817, 2821, 2823, 2830, 2831, 2832, 
	2837, 2839, 2852, 2862, 2864, 2866, 2867, 2869, 
	2871, 2878, 2880, 2888, 2897, 2911, 2919, 2927, 
	2935, 2943, 2951, 2959, 2967, 2973, 2983, 2984, 
	2985, 2986, 2987, 2989, 2990, 2995, 2996, 2997, 
	2998, 2999, 3004, 3005, 3006, 3007, 3008, 3010, 
	3013, 3015, 3023, 3027, 3030, 3031, 3033, 3035, 
	3036, 3038, 3040, 3047, 3049, 3057, 3068, 3083, 
	3099, 3107, 3115, 3123, 3131, 3139, 3147, 3155, 
	3161, 3167, 3168, 3170, 3179, 3183, 3185, 3193, 
	3209, 3214, 3227, 3229, 3237, 3239, 3247, 3251, 
	3262, 3266, 3271, 3275, 3277, 3285, 3286, 3287, 
	3293, 3295, 3309, 3320, 3322, 3324, 3325, 3327, 
	3329, 3336, 3338, 3346, 3357, 3372, 3388, 3396, 
	3404, 3412, 3420, 3428, 3436, 3444, 3450, 3461, 
	3462, 3463, 3464, 3465, 3466, 3467, 3468, 3469, 
	3477, 3481, 3488, 3494, 3501, 3514, 3521, 3528, 
	3535, 3542, 3549, 3556, 3563, 3568, 3573, 3580, 
	3586, 3597, 3603, 3609, 3618, 3624, 3628, 3640, 
	3649, 3655, 3662, 3675, 3682, 3689, 3696, 3703, 
	3710, 3717, 3724, 3729, 3738, 3742, 3746, 3746, 
	3748, 3748, 3748, 3748, 3748, 3748, 
}

var _cte_trans_keys []byte = []byte{
	0, 13, 32, 34, 40, 45, 47, 48, 
	60, 91, 102, 105, 110, 115, 116, 117, 
	123, 9, 10, 49, 57, 0, 48, 57, 
	48, 57, 45, 48, 57, 48, 57, 48, 
	57, 58, 48, 57, 58, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 48, 57, 
	43, 45, 95, 47, 57, 65, 90, 97, 
	122, 45, 48, 57, 43, 45, 48, 57, 
	48, 57, 0, 48, 105, 49, 57, 48, 
	49, 48, 55, 48, 57, 97, 102, 48, 
	57, 97, 102, 112, 48, 57, 97, 102, 
	43, 45, 48, 57, 48, 57, 110, 102, 
	42, 47, 48, 57, 48, 57, 58, 48, 
	57, 48, 57, 48, 57, 43, 45, 95, 
	47, 57, 65, 90, 97, 122, 97, 108, 
	115, 101, 97, 105, 110, 108, 110, 97, 
	110, 114, 117, 101, 34, 10, 42, 47, 
	42, 47, 42, 47, 34, 92, 34, 92, 
	110, 114, 116, 32, 33, 35, 126, 34, 
	32, 126, 0, 13, 32, 34, 40, 45, 
	47, 48, 60, 91, 93, 102, 105, 110, 
	115, 116, 117, 123, 9, 10, 49, 57, 
	0, 48, 57, 13, 32, 45, 46, 93, 
	9, 10, 48, 57, 48, 57, 45, 48, 
	57, 48, 57, 13, 32, 47, 93, 9, 
	10, 48, 57, 48, 57, 58, 48, 57, 
	58, 48, 57, 48, 57, 58, 48, 57, 
	48, 57, 13, 32, 46, 47, 93, 9, 
	10, 48, 57, 13, 32, 47, 93, 9, 
	10, 48, 57, 43, 45, 95, 47, 57, 
	65, 90, 97, 122, 13, 32, 43, 45, 
	93, 95, 9, 10, 47, 57, 65, 90, 
	97, 122, 13, 32, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	13, 32, 47, 93, 9, 10, 45, 48, 
	57, 13, 32, 93, 101, 9, 10, 48, 
	57, 43, 45, 48, 57, 48, 57, 13, 
	32, 93, 9, 10, 48, 57, 13, 32, 
	93, 9, 10, 0, 13, 32, 34, 40, 
	45, 47, 48, 60, 91, 102, 105, 110, 
	115, 116, 117, 123, 9, 10, 49, 57, 
	0, 48, 105, 49, 57, 13, 32, 45, 
	46, 93, 98, 111, 120, 9, 10, 48, 
	57, 48, 49, 13, 32, 93, 9, 10, 
	48, 49, 48, 55, 13, 32, 93, 9, 
	10, 48, 55, 48, 57, 97, 102, 13, 
	32, 46, 93, 9, 10, 48, 57, 97, 
	102, 48, 57, 97, 102, 112, 48, 57, 
	97, 102, 43, 45, 48, 57, 48, 57, 
	13, 32, 93, 9, 10, 48, 57, 110, 
	102, 13, 32, 93, 9, 10, 42, 47, 
	13, 32, 45, 46, 58, 93, 98, 111, 
	120, 9, 10, 48, 57, 13, 32, 45, 
	46, 58, 93, 9, 10, 48, 57, 48, 
	57, 48, 57, 58, 48, 57, 48, 57, 
	13, 32, 46, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 48, 
	57, 43, 45, 95, 47, 57, 65, 90, 
	97, 122, 13, 32, 43, 45, 93, 95, 
	9, 10, 47, 57, 65, 90, 97, 122, 
	13, 32, 47, 93, 9, 10, 48, 57, 
	13, 32, 47, 93, 9, 10, 48, 57, 
	13, 32, 47, 93, 9, 10, 48, 57, 
	13, 32, 47, 93, 9, 10, 48, 57, 
	13, 32, 47, 93, 9, 10, 48, 57, 
	13, 32, 47, 93, 9, 10, 48, 57, 
	13, 32, 47, 93, 9, 10, 48, 57, 
	13, 32, 47, 93, 9, 10, 13, 32, 
	45, 46, 58, 93, 9, 10, 48, 57, 
	97, 108, 115, 101, 97, 105, 110, 13, 
	32, 93, 9, 10, 108, 110, 97, 110, 
	13, 32, 93, 9, 10, 114, 117, 101, 
	34, 0, 13, 32, 34, 40, 45, 47, 
	48, 102, 105, 116, 117, 125, 9, 10, 
	49, 57, 0, 48, 57, 13, 32, 45, 
	46, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 42, 47, 0, 
	13, 32, 34, 40, 45, 47, 48, 60, 
	91, 102, 105, 110, 115, 116, 117, 123, 
	9, 10, 49, 57, 0, 48, 57, 13, 
	32, 45, 46, 125, 9, 10, 48, 57, 
	48, 57, 45, 48, 57, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 48, 
	57, 58, 48, 57, 58, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 13, 32, 
	46, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 43, 
	45, 95, 47, 57, 65, 90, 97, 122, 
	13, 32, 43, 45, 95, 125, 9, 10, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 13, 32, 47, 125, 
	9, 10, 45, 48, 57, 13, 32, 101, 
	125, 9, 10, 48, 57, 43, 45, 48, 
	57, 48, 57, 13, 32, 125, 9, 10, 
	48, 57, 13, 32, 125, 9, 10, 0, 
	48, 105, 49, 57, 13, 32, 45, 46, 
	98, 111, 120, 125, 9, 10, 48, 57, 
	48, 49, 13, 32, 125, 9, 10, 48, 
	49, 48, 55, 13, 32, 125, 9, 10, 
	48, 55, 48, 57, 97, 102, 13, 32, 
	46, 125, 9, 10, 48, 57, 97, 102, 
	48, 57, 97, 102, 112, 48, 57, 97, 
	102, 43, 45, 48, 57, 48, 57, 13, 
	32, 125, 9, 10, 48, 57, 110, 102, 
	13, 32, 125, 9, 10, 42, 47, 13, 
	32, 45, 46, 58, 98, 111, 120, 125, 
	9, 10, 48, 57, 13, 32, 45, 46, 
	58, 125, 9, 10, 48, 57, 48, 57, 
	48, 57, 58, 48, 57, 48, 57, 13, 
	32, 46, 47, 125, 9, 10, 48, 57, 
	13, 32, 47, 125, 9, 10, 48, 57, 
	43, 45, 95, 47, 57, 65, 90, 97, 
	122, 13, 32, 43, 45, 95, 125, 9, 
	10, 47, 57, 65, 90, 97, 122, 13, 
	32, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 13, 32, 45, 
	46, 58, 125, 9, 10, 48, 57, 97, 
	108, 115, 101, 97, 105, 110, 13, 32, 
	125, 9, 10, 108, 110, 97, 110, 13, 
	32, 125, 9, 10, 114, 117, 101, 34, 
	48, 57, 45, 48, 57, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 42, 
	47, 48, 57, 58, 48, 57, 58, 48, 
	57, 48, 57, 58, 48, 57, 48, 57, 
	13, 32, 46, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 42, 43, 45, 47, 95, 48, 57, 
	65, 90, 97, 122, 13, 32, 43, 45, 
	47, 61, 95, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 42, 43, 45, 
	47, 61, 95, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 13, 32, 47, 61, 9, 10, 45, 
	48, 57, 13, 32, 47, 61, 101, 9, 
	10, 48, 57, 43, 45, 48, 57, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 0, 13, 32, 34, 40, 45, 47, 
	48, 102, 105, 116, 117, 9, 10, 49, 
	57, 0, 48, 105, 49, 57, 13, 32, 
	45, 46, 47, 61, 98, 111, 120, 9, 
	10, 48, 57, 48, 49, 13, 32, 47, 
	61, 9, 10, 48, 49, 48, 55, 13, 
	32, 47, 61, 9, 10, 48, 55, 48, 
	57, 97, 102, 13, 32, 46, 47, 61, 
	9, 10, 48, 57, 97, 102, 48, 57, 
	97, 102, 112, 48, 57, 97, 102, 43, 
	45, 48, 57, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 110, 102, 13, 
	32, 47, 61, 9, 10, 42, 47, 13, 
	32, 45, 46, 47, 58, 61, 98, 111, 
	120, 9, 10, 48, 57, 13, 32, 45, 
	46, 47, 58, 61, 9, 10, 48, 57, 
	48, 57, 48, 57, 58, 48, 57, 48, 
	57, 13, 32, 46, 47, 61, 9, 10, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 42, 43, 45, 47, 95, 48, 
	57, 65, 90, 97, 122, 13, 32, 43, 
	45, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 42, 43, 
	45, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 13, 32, 45, 46, 47, 58, 
	61, 9, 10, 48, 57, 97, 108, 115, 
	101, 114, 117, 101, 34, 0, 13, 32, 
	34, 40, 45, 47, 48, 62, 102, 105, 
	116, 117, 9, 10, 49, 57, 0, 48, 
	57, 13, 32, 45, 46, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 42, 47, 0, 13, 32, 34, 40, 
	45, 47, 48, 60, 91, 102, 105, 110, 
	115, 116, 117, 123, 9, 10, 49, 57, 
	0, 48, 57, 13, 32, 45, 46, 62, 
	9, 10, 48, 57, 48, 57, 45, 48, 
	57, 48, 57, 13, 32, 47, 62, 9, 
	10, 48, 57, 48, 57, 58, 48, 57, 
	58, 48, 57, 48, 57, 58, 48, 57, 
	48, 57, 13, 32, 46, 47, 62, 9, 
	10, 48, 57, 13, 32, 47, 62, 9, 
	10, 48, 57, 43, 45, 95, 47, 57, 
	65, 90, 97, 122, 13, 32, 43, 45, 
	62, 95, 9, 10, 47, 57, 65, 90, 
	97, 122, 13, 32, 47, 62, 9, 10, 
	48, 57, 13, 32, 47, 62, 9, 10, 
	48, 57, 13, 32, 47, 62, 9, 10, 
	48, 57, 13, 32, 47, 62, 9, 10, 
	48, 57, 13, 32, 47, 62, 9, 10, 
	48, 57, 13, 32, 47, 62, 9, 10, 
	48, 57, 13, 32, 47, 62, 9, 10, 
	48, 57, 13, 32, 47, 62, 9, 10, 
	13, 32, 47, 62, 9, 10, 45, 48, 
	57, 13, 32, 62, 101, 9, 10, 48, 
	57, 43, 45, 48, 57, 48, 57, 13, 
	32, 62, 9, 10, 48, 57, 13, 32, 
	62, 9, 10, 0, 48, 105, 49, 57, 
	13, 32, 45, 46, 62, 98, 111, 120, 
	9, 10, 48, 57, 48, 49, 13, 32, 
	62, 9, 10, 48, 49, 48, 55, 13, 
	32, 62, 9, 10, 48, 55, 48, 57, 
	97, 102, 13, 32, 46, 62, 9, 10, 
	48, 57, 97, 102, 48, 57, 97, 102, 
	112, 48, 57, 97, 102, 43, 45, 48, 
	57, 48, 57, 13, 32, 62, 9, 10, 
	48, 57, 110, 102, 13, 32, 62, 9, 
	10, 42, 47, 13, 32, 45, 46, 58, 
	62, 98, 111, 120, 9, 10, 48, 57, 
	13, 32, 45, 46, 58, 62, 9, 10, 
	48, 57, 48, 57, 48, 57, 58, 48, 
	57, 48, 57, 13, 32, 46, 47, 62, 
	9, 10, 48, 57, 13, 32, 47, 62, 
	9, 10, 48, 57, 43, 45, 95, 47, 
	57, 65, 90, 97, 122, 13, 32, 43, 
	45, 62, 95, 9, 10, 47, 57, 65, 
	90, 97, 122, 13, 32, 47, 62, 9, 
	10, 48, 57, 13, 32, 47, 62, 9, 
	10, 48, 57, 13, 32, 47, 62, 9, 
	10, 48, 57, 13, 32, 47, 62, 9, 
	10, 48, 57, 13, 32, 47, 62, 9, 
	10, 48, 57, 13, 32, 47, 62, 9, 
	10, 48, 57, 13, 32, 47, 62, 9, 
	10, 48, 57, 13, 32, 47, 62, 9, 
	10, 13, 32, 45, 46, 58, 62, 9, 
	10, 48, 57, 97, 108, 115, 101, 97, 
	105, 110, 13, 32, 62, 9, 10, 108, 
	110, 97, 110, 13, 32, 62, 9, 10, 
	114, 117, 101, 34, 48, 57, 45, 48, 
	57, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 42, 47, 48, 57, 58, 
	48, 57, 58, 48, 57, 48, 57, 58, 
	48, 57, 48, 57, 13, 32, 46, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 42, 43, 45, 
	47, 95, 48, 57, 65, 90, 97, 122, 
	13, 32, 43, 45, 47, 61, 95, 9, 
	10, 48, 57, 65, 90, 97, 122, 13, 
	32, 42, 43, 45, 47, 61, 95, 9, 
	10, 48, 57, 65, 90, 97, 122, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 13, 32, 47, 
	61, 9, 10, 45, 48, 57, 13, 32, 
	47, 61, 101, 9, 10, 48, 57, 43, 
	45, 48, 57, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 0, 13, 32, 
	34, 40, 45, 47, 48, 102, 105, 116, 
	117, 9, 10, 49, 57, 0, 48, 105, 
	49, 57, 13, 32, 45, 46, 47, 61, 
	98, 111, 120, 9, 10, 48, 57, 48, 
	49, 13, 32, 47, 61, 9, 10, 48, 
	49, 48, 55, 13, 32, 47, 61, 9, 
	10, 48, 55, 48, 57, 97, 102, 13, 
	32, 46, 47, 61, 9, 10, 48, 57, 
	97, 102, 48, 57, 97, 102, 112, 48, 
	57, 97, 102, 43, 45, 48, 57, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 110, 102, 13, 32, 47, 61, 9, 
	10, 42, 47, 13, 32, 45, 46, 47, 
	58, 61, 98, 111, 120, 9, 10, 48, 
	57, 13, 32, 45, 46, 47, 58, 61, 
	9, 10, 48, 57, 48, 57, 48, 57, 
	58, 48, 57, 48, 57, 13, 32, 46, 
	47, 61, 9, 10, 48, 57, 13, 32, 
	47, 61, 9, 10, 48, 57, 42, 43, 
	45, 47, 95, 48, 57, 65, 90, 97, 
	122, 13, 32, 43, 45, 47, 61, 95, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	13, 32, 42, 43, 45, 47, 61, 95, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	13, 32, 47, 61, 9, 10, 13, 32, 
	45, 46, 47, 58, 61, 9, 10, 48, 
	57, 97, 108, 115, 101, 114, 117, 101, 
	34, 0, 13, 32, 34, 40, 41, 45, 
	47, 48, 102, 105, 116, 117, 9, 10, 
	49, 57, 0, 48, 57, 13, 32, 45, 
	46, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 42, 47, 0, 
	13, 32, 34, 40, 45, 47, 48, 60, 
	91, 102, 105, 110, 115, 116, 117, 123, 
	9, 10, 49, 57, 0, 48, 57, 13, 
	32, 41, 45, 46, 9, 10, 48, 57, 
	48, 57, 45, 48, 57, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 48, 
	57, 58, 48, 57, 58, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 13, 32, 
	41, 46, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 43, 
	45, 95, 47, 57, 65, 90, 97, 122, 
	13, 32, 41, 43, 45, 95, 9, 10, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	41, 47, 9, 10, 48, 57, 13, 32, 
	41, 47, 9, 10, 48, 57, 13, 32, 
	41, 47, 9, 10, 48, 57, 13, 32, 
	41, 47, 9, 10, 48, 57, 13, 32, 
	41, 47, 9, 10, 48, 57, 13, 32, 
	41, 47, 9, 10, 48, 57, 13, 32, 
	41, 47, 9, 10, 48, 57, 13, 32, 
	41, 47, 9, 10, 13, 32, 41, 47, 
	9, 10, 45, 48, 57, 13, 32, 41, 
	101, 9, 10, 48, 57, 43, 45, 48, 
	57, 48, 57, 13, 32, 41, 9, 10, 
	48, 57, 13, 32, 41, 9, 10, 0, 
	48, 105, 49, 57, 13, 32, 41, 45, 
	46, 98, 111, 120, 9, 10, 48, 57, 
	48, 49, 13, 32, 41, 9, 10, 48, 
	49, 48, 55, 13, 32, 41, 9, 10, 
	48, 55, 48, 57, 97, 102, 13, 32, 
	41, 46, 9, 10, 48, 57, 97, 102, 
	48, 57, 97, 102, 112, 48, 57, 97, 
	102, 43, 45, 48, 57, 48, 57, 13, 
	32, 41, 9, 10, 48, 57, 110, 102, 
	13, 32, 41, 9, 10, 42, 47, 13, 
	32, 41, 45, 46, 58, 98, 111, 120, 
	9, 10, 48, 57, 13, 32, 41, 45, 
	46, 58, 9, 10, 48, 57, 48, 57, 
	48, 57, 58, 48, 57, 48, 57, 13, 
	32, 41, 46, 47, 9, 10, 48, 57, 
	13, 32, 41, 47, 9, 10, 48, 57, 
	43, 45, 95, 47, 57, 65, 90, 97, 
	122, 13, 32, 41, 43, 45, 95, 9, 
	10, 47, 57, 65, 90, 97, 122, 13, 
	32, 41, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 48, 57, 13, 
	32, 41, 47, 9, 10, 13, 32, 41, 
	45, 46, 58, 9, 10, 48, 57, 97, 
	108, 115, 101, 97, 105, 110, 13, 32, 
	41, 9, 10, 108, 110, 97, 110, 13, 
	32, 41, 9, 10, 114, 117, 101, 34, 
	48, 57, 45, 48, 57, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 42, 
	47, 48, 57, 58, 48, 57, 58, 48, 
	57, 48, 57, 58, 48, 57, 48, 57, 
	13, 32, 46, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 42, 43, 45, 47, 95, 48, 57, 
	65, 90, 97, 122, 13, 32, 43, 45, 
	47, 61, 95, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 42, 43, 45, 
	47, 61, 95, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 13, 32, 47, 61, 9, 10, 45, 
	48, 57, 13, 32, 47, 61, 101, 9, 
	10, 48, 57, 43, 45, 48, 57, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 0, 13, 32, 34, 40, 45, 47, 
	48, 102, 105, 116, 117, 9, 10, 49, 
	57, 0, 48, 105, 49, 57, 13, 32, 
	45, 46, 47, 61, 98, 111, 120, 9, 
	10, 48, 57, 48, 49, 13, 32, 47, 
	61, 9, 10, 48, 49, 48, 55, 13, 
	32, 47, 61, 9, 10, 48, 55, 48, 
	57, 97, 102, 13, 32, 46, 47, 61, 
	9, 10, 48, 57, 97, 102, 48, 57, 
	97, 102, 112, 48, 57, 97, 102, 43, 
	45, 48, 57, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 110, 102, 13, 
	32, 47, 61, 9, 10, 42, 47, 13, 
	32, 45, 46, 47, 58, 61, 98, 111, 
	120, 9, 10, 48, 57, 13, 32, 45, 
	46, 47, 58, 61, 9, 10, 48, 57, 
	48, 57, 48, 57, 58, 48, 57, 48, 
	57, 13, 32, 46, 47, 61, 9, 10, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 42, 43, 45, 47, 95, 48, 
	57, 65, 90, 97, 122, 13, 32, 43, 
	45, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 42, 43, 
	45, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 13, 32, 45, 46, 47, 58, 
	61, 9, 10, 48, 57, 97, 108, 115, 
	101, 114, 117, 101, 34, 13, 32, 45, 
	46, 9, 10, 48, 57, 13, 32, 9, 
	10, 13, 32, 47, 9, 10, 48, 57, 
	13, 32, 46, 47, 9, 10, 13, 32, 
	47, 9, 10, 48, 57, 13, 32, 43, 
	45, 95, 9, 10, 47, 57, 65, 90, 
	97, 122, 13, 32, 47, 9, 10, 48, 
	57, 13, 32, 47, 9, 10, 48, 57, 
	13, 32, 47, 9, 10, 48, 57, 13, 
	32, 47, 9, 10, 48, 57, 13, 32, 
	47, 9, 10, 48, 57, 13, 32, 47, 
	9, 10, 48, 57, 13, 32, 47, 9, 
	10, 48, 57, 13, 32, 47, 9, 10, 
	13, 32, 47, 9, 10, 13, 32, 101, 
	9, 10, 48, 57, 13, 32, 9, 10, 
	48, 57, 13, 32, 45, 46, 98, 111, 
	120, 9, 10, 48, 57, 13, 32, 9, 
	10, 48, 49, 13, 32, 9, 10, 48, 
	55, 13, 32, 46, 9, 10, 48, 57, 
	97, 102, 13, 32, 9, 10, 48, 57, 
	13, 32, 9, 10, 13, 32, 45, 46, 
	58, 98, 111, 120, 9, 10, 48, 57, 
	13, 32, 45, 46, 58, 9, 10, 48, 
	57, 13, 32, 46, 47, 9, 10, 13, 
	32, 47, 9, 10, 48, 57, 13, 32, 
	43, 45, 95, 9, 10, 47, 57, 65, 
	90, 97, 122, 13, 32, 47, 9, 10, 
	48, 57, 13, 32, 47, 9, 10, 48, 
	57, 13, 32, 47, 9, 10, 48, 57, 
	13, 32, 47, 9, 10, 48, 57, 13, 
	32, 47, 9, 10, 48, 57, 13, 32, 
	47, 9, 10, 48, 57, 13, 32, 47, 
	9, 10, 48, 57, 13, 32, 47, 9, 
	10, 13, 32, 45, 46, 58, 9, 10, 
	48, 57, 13, 32, 9, 10, 13, 32, 
	9, 10, 42, 47, 
}

var _cte_single_lengths []byte = []byte{
	0, 17, 1, 0, 1, 0, 0, 1, 
	1, 0, 0, 1, 0, 0, 0, 3, 
	1, 0, 2, 0, 3, 0, 0, 0, 
	0, 1, 2, 0, 1, 1, 2, 0, 
	0, 1, 0, 0, 0, 3, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 2, 
	2, 5, 0, 1, 18, 1, 5, 0, 
	1, 0, 4, 0, 1, 1, 0, 0, 
	1, 0, 0, 5, 0, 4, 3, 6, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 1, 0, 4, 2, 0, 3, 3, 
	17, 3, 8, 0, 3, 0, 3, 0, 
	4, 0, 1, 2, 0, 3, 1, 1, 
	3, 2, 9, 6, 0, 0, 1, 0, 
	0, 5, 0, 4, 3, 6, 4, 4, 
	4, 4, 4, 4, 4, 4, 6, 1, 
	1, 1, 1, 2, 1, 3, 1, 1, 
	1, 1, 3, 1, 1, 1, 1, 13, 
	1, 6, 4, 2, 17, 1, 5, 0, 
	1, 0, 4, 0, 1, 1, 0, 0, 
	1, 0, 0, 5, 0, 4, 3, 6, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 1, 0, 4, 2, 0, 3, 3, 
	3, 8, 0, 3, 0, 3, 0, 4, 
	0, 1, 2, 0, 3, 1, 1, 3, 
	2, 9, 6, 0, 0, 1, 0, 0, 
	5, 0, 4, 3, 6, 4, 4, 4, 
	4, 4, 4, 4, 4, 6, 1, 1, 
	1, 1, 2, 1, 3, 1, 1, 1, 
	1, 3, 1, 1, 1, 1, 0, 1, 
	0, 4, 2, 1, 1, 0, 0, 1, 
	0, 0, 5, 0, 4, 5, 7, 8, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 1, 0, 5, 2, 0, 4, 12, 
	3, 9, 0, 4, 0, 4, 0, 5, 
	0, 1, 2, 0, 4, 1, 1, 4, 
	2, 10, 7, 0, 0, 1, 0, 0, 
	5, 0, 4, 5, 7, 8, 4, 4, 
	4, 4, 4, 4, 4, 4, 7, 1, 
	1, 1, 1, 1, 1, 1, 1, 13, 
	1, 6, 4, 2, 17, 1, 5, 0, 
	1, 0, 4, 0, 1, 1, 0, 0, 
	1, 0, 0, 5, 0, 4, 3, 6, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 1, 0, 4, 2, 0, 3, 3, 
	3, 8, 0, 3, 0, 3, 0, 4, 
	0, 1, 2, 0, 3, 1, 1, 3, 
	2, 9, 6, 0, 0, 1, 0, 0, 
	5, 0, 4, 3, 6, 4, 4, 4, 
	4, 4, 4, 4, 4, 6, 1, 1, 
	1, 1, 2, 1, 3, 1, 1, 1, 
	1, 3, 1, 1, 1, 1, 0, 1, 
	0, 4, 2, 1, 1, 0, 0, 1, 
	0, 0, 5, 0, 4, 5, 7, 8, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 1, 0, 5, 2, 0, 4, 12, 
	3, 9, 0, 4, 0, 4, 0, 5, 
	0, 1, 2, 0, 4, 1, 1, 4, 
	2, 10, 7, 0, 0, 1, 0, 0, 
	5, 0, 4, 5, 7, 8, 4, 4, 
	4, 4, 4, 4, 4, 4, 7, 1, 
	1, 1, 1, 1, 1, 1, 1, 13, 
	1, 6, 4, 2, 17, 1, 5, 0, 
	1, 0, 4, 0, 1, 1, 0, 0, 
	1, 0, 0, 5, 0, 4, 3, 6, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 1, 0, 4, 2, 0, 3, 3, 
	3, 8, 0, 3, 0, 3, 0, 4, 
	0, 1, 2, 0, 3, 1, 1, 3, 
	2, 9, 6, 0, 0, 1, 0, 0, 
	5, 0, 4, 3, 6, 4, 4, 4, 
	4, 4, 4, 4, 4, 6, 1, 1, 
	1, 1, 2, 1, 3, 1, 1, 1, 
	1, 3, 1, 1, 1, 1, 0, 1, 
	0, 4, 2, 1, 1, 0, 0, 1, 
	0, 0, 5, 0, 4, 5, 7, 8, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 1, 0, 5, 2, 0, 4, 12, 
	3, 9, 0, 4, 0, 4, 0, 5, 
	0, 1, 2, 0, 4, 1, 1, 4, 
	2, 10, 7, 0, 0, 1, 0, 0, 
	5, 0, 4, 5, 7, 8, 4, 4, 
	4, 4, 4, 4, 4, 4, 7, 1, 
	1, 1, 1, 1, 1, 1, 1, 4, 
	2, 3, 4, 3, 5, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 2, 
	7, 2, 2, 3, 2, 2, 8, 5, 
	4, 3, 5, 3, 3, 3, 3, 3, 
	3, 3, 3, 5, 2, 2, 0, 2, 
	0, 0, 0, 0, 0, 0, 
}

var _cte_range_lengths []byte = []byte{
	0, 2, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 0, 1, 1, 1, 3, 
	0, 1, 1, 1, 1, 1, 1, 2, 
	2, 2, 1, 1, 0, 0, 0, 1, 
	1, 0, 1, 1, 1, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 1, 2, 1, 2, 1, 
	1, 1, 2, 1, 1, 0, 1, 1, 
	0, 1, 1, 1, 1, 2, 3, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 1, 2, 1, 1, 2, 1, 
	2, 1, 2, 1, 2, 1, 2, 2, 
	3, 2, 2, 1, 1, 2, 0, 0, 
	1, 0, 2, 2, 1, 1, 0, 1, 
	1, 1, 1, 2, 3, 4, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 2, 
	1, 2, 1, 0, 2, 1, 2, 1, 
	1, 1, 2, 1, 1, 0, 1, 1, 
	0, 1, 1, 1, 1, 2, 3, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 1, 2, 1, 1, 2, 1, 
	1, 2, 1, 2, 1, 2, 2, 3, 
	2, 2, 1, 1, 2, 0, 0, 1, 
	0, 2, 2, 1, 1, 0, 1, 1, 
	1, 1, 2, 3, 4, 2, 2, 2, 
	2, 2, 2, 2, 1, 2, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 1, 1, 
	1, 2, 1, 1, 0, 1, 1, 0, 
	1, 1, 1, 1, 2, 3, 4, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 1, 2, 1, 1, 2, 2, 
	1, 2, 1, 2, 1, 2, 2, 3, 
	2, 2, 1, 1, 2, 0, 0, 1, 
	0, 2, 2, 1, 1, 0, 1, 1, 
	1, 1, 2, 3, 4, 4, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	1, 2, 1, 0, 2, 1, 2, 1, 
	1, 1, 2, 1, 1, 0, 1, 1, 
	0, 1, 1, 1, 1, 2, 3, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 1, 2, 1, 1, 2, 1, 
	1, 2, 1, 2, 1, 2, 2, 3, 
	2, 2, 1, 1, 2, 0, 0, 1, 
	0, 2, 2, 1, 1, 0, 1, 1, 
	1, 1, 2, 3, 4, 2, 2, 2, 
	2, 2, 2, 2, 1, 2, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 1, 1, 
	1, 2, 1, 1, 0, 1, 1, 0, 
	1, 1, 1, 1, 2, 3, 4, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 1, 2, 1, 1, 2, 2, 
	1, 2, 1, 2, 1, 2, 2, 3, 
	2, 2, 1, 1, 2, 0, 0, 1, 
	0, 2, 2, 1, 1, 0, 1, 1, 
	1, 1, 2, 3, 4, 4, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	1, 2, 1, 0, 2, 1, 2, 1, 
	1, 1, 2, 1, 1, 0, 1, 1, 
	0, 1, 1, 1, 1, 2, 3, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 1, 2, 1, 1, 2, 1, 
	1, 2, 1, 2, 1, 2, 2, 3, 
	2, 2, 1, 1, 2, 0, 0, 1, 
	0, 2, 2, 1, 1, 0, 1, 1, 
	1, 1, 2, 3, 4, 2, 2, 2, 
	2, 2, 2, 2, 1, 2, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 1, 1, 
	1, 2, 1, 1, 0, 1, 1, 0, 
	1, 1, 1, 1, 2, 3, 4, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 1, 2, 1, 1, 2, 2, 
	1, 2, 1, 2, 1, 2, 2, 3, 
	2, 2, 1, 1, 2, 0, 0, 1, 
	0, 2, 2, 1, 1, 0, 1, 1, 
	1, 1, 2, 3, 4, 4, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	1, 2, 1, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 2, 2, 
	2, 2, 2, 3, 2, 1, 2, 2, 
	1, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 1, 2, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 
}

var _cte_index_offsets []int16 = []int16{
	0, 0, 20, 23, 25, 28, 30, 32, 
	35, 37, 39, 41, 43, 45, 47, 49, 
	56, 58, 60, 64, 66, 71, 73, 75, 
	78, 81, 85, 89, 91, 93, 95, 98, 
	100, 102, 104, 106, 108, 110, 117, 119, 
	121, 123, 125, 128, 130, 132, 134, 136, 
	138, 140, 142, 144, 146, 148, 151, 154, 
	157, 160, 166, 169, 172, 193, 196, 204, 
	206, 209, 211, 218, 220, 223, 225, 227, 
	229, 231, 233, 235, 242, 244, 251, 258, 
	269, 276, 283, 290, 297, 304, 311, 318, 
	324, 330, 332, 334, 341, 345, 347, 353, 
	358, 378, 383, 394, 396, 402, 404, 410, 
	413, 421, 424, 428, 432, 434, 440, 442, 
	444, 449, 452, 464, 473, 475, 477, 479, 
	481, 483, 490, 492, 499, 506, 517, 524, 
	531, 538, 545, 552, 559, 566, 572, 581, 
	583, 585, 587, 589, 592, 594, 599, 601, 
	603, 605, 607, 612, 614, 616, 618, 620, 
	636, 639, 648, 654, 657, 677, 680, 688, 
	690, 693, 695, 702, 704, 707, 709, 711, 
	713, 715, 717, 719, 726, 728, 735, 742, 
	753, 760, 767, 774, 781, 788, 795, 802, 
	808, 814, 816, 818, 825, 829, 831, 837, 
	842, 847, 858, 860, 866, 868, 874, 877, 
	885, 888, 892, 896, 898, 904, 906, 908, 
	913, 916, 928, 937, 939, 941, 943, 945, 
	947, 954, 956, 963, 970, 981, 988, 995, 
	1002, 1009, 1016, 1023, 1030, 1036, 1045, 1047, 
	1049, 1051, 1053, 1056, 1058, 1063, 1065, 1067, 
	1069, 1071, 1076, 1078, 1080, 1082, 1084, 1086, 
	1089, 1091, 1098, 1102, 1105, 1107, 1109, 1111, 
	1113, 1115, 1117, 1124, 1126, 1133, 1142, 1154, 
	1167, 1174, 1181, 1188, 1195, 1202, 1209, 1216, 
	1222, 1228, 1230, 1232, 1240, 1244, 1246, 1253, 
	1268, 1273, 1285, 1287, 1294, 1296, 1303, 1306, 
	1315, 1318, 1322, 1326, 1328, 1335, 1337, 1339, 
	1345, 1348, 1361, 1371, 1373, 1375, 1377, 1379, 
	1381, 1388, 1390, 1397, 1406, 1418, 1431, 1438, 
	1445, 1452, 1459, 1466, 1473, 1480, 1486, 1496, 
	1498, 1500, 1502, 1504, 1506, 1508, 1510, 1512, 
	1528, 1531, 1540, 1546, 1549, 1569, 1572, 1580, 
	1582, 1585, 1587, 1594, 1596, 1599, 1601, 1603, 
	1605, 1607, 1609, 1611, 1618, 1620, 1627, 1634, 
	1645, 1652, 1659, 1666, 1673, 1680, 1687, 1694, 
	1700, 1706, 1708, 1710, 1717, 1721, 1723, 1729, 
	1734, 1739, 1750, 1752, 1758, 1760, 1766, 1769, 
	1777, 1780, 1784, 1788, 1790, 1796, 1798, 1800, 
	1805, 1808, 1820, 1829, 1831, 1833, 1835, 1837, 
	1839, 1846, 1848, 1855, 1862, 1873, 1880, 1887, 
	1894, 1901, 1908, 1915, 1922, 1928, 1937, 1939, 
	1941, 1943, 1945, 1948, 1950, 1955, 1957, 1959, 
	1961, 1963, 1968, 1970, 1972, 1974, 1976, 1978, 
	1981, 1983, 1990, 1994, 1997, 1999, 2001, 2003, 
	2005, 2007, 2009, 2016, 2018, 2025, 2034, 2046, 
	2059, 2066, 2073, 2080, 2087, 2094, 2101, 2108, 
	2114, 2120, 2122, 2124, 2132, 2136, 2138, 2145, 
	2160, 2165, 2177, 2179, 2186, 2188, 2195, 2198, 
	2207, 2210, 2214, 2218, 2220, 2227, 2229, 2231, 
	2237, 2240, 2253, 2263, 2265, 2267, 2269, 2271, 
	2273, 2280, 2282, 2289, 2298, 2310, 2323, 2330, 
	2337, 2344, 2351, 2358, 2365, 2372, 2378, 2388, 
	2390, 2392, 2394, 2396, 2398, 2400, 2402, 2404, 
	2420, 2423, 2432, 2438, 2441, 2461, 2464, 2472, 
	2474, 2477, 2479, 2486, 2488, 2491, 2493, 2495, 
	2497, 2499, 2501, 2503, 2510, 2512, 2519, 2526, 
	2537, 2544, 2551, 2558, 2565, 2572, 2579, 2586, 
	2592, 2598, 2600, 2602, 2609, 2613, 2615, 2621, 
	2626, 2631, 2642, 2644, 2650, 2652, 2658, 2661, 
	2669, 2672, 2676, 2680, 2682, 2688, 2690, 2692, 
	2697, 2700, 2712, 2721, 2723, 2725, 2727, 2729, 
	2731, 2738, 2740, 2747, 2754, 2765, 2772, 2779, 
	2786, 2793, 2800, 2807, 2814, 2820, 2829, 2831, 
	2833, 2835, 2837, 2840, 2842, 2847, 2849, 2851, 
	2853, 2855, 2860, 2862, 2864, 2866, 2868, 2870, 
	2873, 2875, 2882, 2886, 2889, 2891, 2893, 2895, 
	2897, 2899, 2901, 2908, 2910, 2917, 2926, 2938, 
	2951, 2958, 2965, 2972, 2979, 2986, 2993, 3000, 
	3006, 3012, 3014, 3016, 3024, 3028, 3030, 3037, 
	3052, 3057, 3069, 3071, 3078, 3080, 3087, 3090, 
	3099, 3102, 3106, 3110, 3112, 3119, 3121, 3123, 
	3129, 3132, 3145, 3155, 3157, 3159, 3161, 3163, 
	3165, 3172, 3174, 3181, 3190, 3202, 3215, 3222, 
	3229, 3236, 3243, 3250, 3257, 3264, 3270, 3280, 
	3282, 3284, 3286, 3288, 3290, 3292, 3294, 3296, 
	3303, 3307, 3313, 3319, 3325, 3335, 3341, 3347, 
	3353, 3359, 3365, 3371, 3377, 3382, 3387, 3393, 
	3398, 3408, 3413, 3418, 3425, 3430, 3434, 3445, 
	3453, 3459, 3465, 3475, 3481, 3487, 3493, 3499, 
	3505, 3511, 3517, 3522, 3530, 3534, 3538, 3539, 
	3542, 3543, 3544, 3545, 3546, 3547, 
}

var _cte_indicies []int16 = []int16{
	0, 1, 1, 3, 4, 5, 6, 7, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 8, 2, 0, 18, 2, 19, 
	2, 20, 21, 2, 22, 2, 23, 2, 
	25, 24, 2, 25, 2, 26, 2, 27, 
	2, 28, 2, 29, 2, 30, 2, 31, 
	2, 32, 32, 32, 32, 32, 32, 2, 
	20, 2, 33, 2, 34, 35, 36, 2, 
	36, 2, 0, 37, 12, 18, 2, 38, 
	2, 39, 2, 40, 41, 2, 42, 43, 
	2, 44, 42, 43, 2, 45, 46, 47, 
	2, 47, 2, 48, 2, 49, 2, 50, 
	51, 2, 52, 2, 53, 2, 54, 2, 
	55, 2, 56, 2, 57, 2, 58, 58, 
	58, 58, 58, 58, 2, 59, 2, 60, 
	2, 61, 2, 62, 2, 63, 64, 2, 
	65, 2, 66, 2, 67, 2, 68, 2, 
	69, 2, 70, 2, 71, 2, 72, 2, 
	73, 2, 75, 74, 77, 78, 76, 77, 
	79, 76, 80, 78, 76, 82, 83, 81, 
	85, 86, 87, 88, 89, 84, 90, 90, 
	2, 91, 90, 2, 92, 93, 93, 94, 
	95, 96, 97, 98, 100, 101, 102, 103, 
	104, 105, 106, 107, 108, 109, 93, 99, 
	2, 92, 110, 2, 111, 111, 112, 113, 
	114, 111, 110, 2, 115, 2, 116, 117, 
	2, 118, 2, 119, 119, 120, 122, 119, 
	121, 2, 123, 2, 125, 124, 2, 125, 
	2, 126, 2, 127, 2, 128, 2, 129, 
	2, 130, 2, 131, 131, 132, 133, 134, 
	131, 2, 135, 2, 131, 131, 133, 134, 
	131, 136, 2, 137, 137, 137, 137, 137, 
	137, 2, 131, 131, 137, 137, 134, 137, 
	131, 137, 137, 137, 2, 131, 131, 133, 
	134, 131, 138, 2, 131, 131, 133, 134, 
	131, 139, 2, 131, 131, 133, 134, 131, 
	140, 2, 131, 131, 133, 134, 131, 141, 
	2, 131, 131, 133, 134, 131, 142, 2, 
	131, 131, 133, 134, 131, 143, 2, 131, 
	131, 133, 134, 131, 144, 2, 131, 131, 
	133, 134, 131, 2, 119, 119, 120, 122, 
	119, 2, 116, 2, 145, 2, 146, 146, 
	147, 148, 146, 145, 2, 149, 150, 151, 
	2, 151, 2, 146, 146, 147, 146, 151, 
	2, 93, 93, 102, 93, 2, 92, 152, 
	152, 94, 95, 96, 97, 98, 100, 101, 
	103, 104, 105, 106, 107, 108, 109, 152, 
	99, 2, 92, 153, 104, 110, 2, 111, 
	111, 112, 113, 114, 154, 155, 156, 111, 
	110, 2, 157, 2, 111, 111, 114, 111, 
	157, 2, 158, 2, 111, 111, 114, 111, 
	158, 2, 159, 160, 2, 111, 111, 161, 
	114, 111, 159, 160, 2, 162, 163, 2, 
	164, 162, 163, 2, 165, 166, 167, 2, 
	167, 2, 168, 168, 169, 168, 167, 2, 
	170, 2, 171, 2, 172, 172, 173, 172, 
	2, 174, 175, 2, 111, 111, 112, 113, 
	177, 114, 154, 155, 156, 111, 176, 2, 
	111, 111, 112, 113, 177, 114, 111, 110, 
	2, 178, 2, 179, 2, 180, 2, 181, 
	2, 182, 2, 183, 183, 184, 185, 186, 
	183, 2, 187, 2, 183, 183, 185, 186, 
	183, 188, 2, 189, 189, 189, 189, 189, 
	189, 2, 183, 183, 189, 189, 186, 189, 
	183, 189, 189, 189, 2, 183, 183, 185, 
	186, 183, 190, 2, 183, 183, 185, 186, 
	183, 191, 2, 183, 183, 185, 186, 183, 
	192, 2, 183, 183, 185, 186, 183, 193, 
	2, 183, 183, 185, 186, 183, 194, 2, 
	183, 183, 185, 186, 183, 195, 2, 183, 
	183, 185, 186, 183, 196, 2, 183, 183, 
	185, 186, 183, 2, 111, 111, 112, 113, 
	177, 114, 111, 176, 2, 197, 2, 198, 
	2, 199, 2, 200, 2, 201, 202, 2, 
	203, 2, 204, 204, 205, 204, 2, 206, 
	2, 207, 2, 208, 2, 209, 2, 210, 
	210, 211, 210, 2, 212, 2, 213, 2, 
	214, 2, 215, 2, 216, 217, 217, 218, 
	219, 220, 221, 222, 224, 225, 226, 227, 
	228, 217, 223, 2, 216, 229, 2, 230, 
	230, 231, 232, 233, 234, 230, 229, 2, 
	235, 235, 236, 237, 235, 2, 238, 239, 
	2, 240, 237, 237, 241, 242, 243, 244, 
	245, 247, 248, 249, 250, 251, 252, 253, 
	254, 255, 237, 246, 2, 240, 256, 2, 
	257, 257, 258, 259, 260, 257, 256, 2, 
	261, 2, 262, 263, 2, 264, 2, 265, 
	265, 266, 268, 265, 267, 2, 269, 2, 
	271, 270, 2, 271, 2, 272, 2, 273, 
	2, 274, 2, 275, 2, 276, 2, 277, 
	277, 278, 279, 280, 277, 2, 281, 2, 
	277, 277, 279, 280, 277, 282, 2, 283, 
	283, 283, 283, 283, 283, 2, 277, 277, 
	283, 283, 283, 280, 277, 283, 283, 283, 
	2, 277, 277, 279, 280, 277, 284, 2, 
	277, 277, 279, 280, 277, 285, 2, 277, 
	277, 279, 280, 277, 286, 2, 277, 277, 
	279, 280, 277, 287, 2, 277, 277, 279, 
	280, 277, 288, 2, 277, 277, 279, 280, 
	277, 289, 2, 277, 277, 279, 280, 277, 
	290, 2, 277, 277, 279, 280, 277, 2, 
	265, 265, 266, 268, 265, 2, 262, 2, 
	291, 2, 292, 292, 293, 294, 292, 291, 
	2, 295, 296, 297, 2, 297, 2, 292, 
	292, 294, 292, 297, 2, 217, 217, 228, 
	217, 2, 240, 298, 250, 256, 2, 257, 
	257, 258, 259, 299, 300, 301, 260, 257, 
	256, 2, 302, 2, 257, 257, 260, 257, 
	302, 2, 303, 2, 257, 257, 260, 257, 
	303, 2, 304, 305, 2, 257, 257, 306, 
	260, 257, 304, 305, 2, 307, 308, 2, 
	309, 307, 308, 2, 310, 311, 312, 2, 
	312, 2, 313, 313, 314, 313, 312, 2, 
	315, 2, 316, 2, 317, 317, 318, 317, 
	2, 319, 320, 2, 257, 257, 258, 259, 
	322, 299, 300, 301, 260, 257, 321, 2, 
	257, 257, 258, 259, 322, 260, 257, 256, 
	2, 323, 2, 324, 2, 325, 2, 326, 
	2, 327, 2, 328, 328, 329, 330, 331, 
	328, 2, 332, 2, 328, 328, 330, 331, 
	328, 333, 2, 334, 334, 334, 334, 334, 
	334, 2, 328, 328, 334, 334, 334, 331, 
	328, 334, 334, 334, 2, 328, 328, 330, 
	331, 328, 335, 2, 328, 328, 330, 331, 
	328, 336, 2, 328, 328, 330, 331, 328, 
	337, 2, 328, 328, 330, 331, 328, 338, 
	2, 328, 328, 330, 331, 328, 339, 2, 
	328, 328, 330, 331, 328, 340, 2, 328, 
	328, 330, 331, 328, 341, 2, 328, 328, 
	330, 331, 328, 2, 257, 257, 258, 259, 
	322, 260, 257, 321, 2, 342, 2, 343, 
	2, 344, 2, 345, 2, 346, 347, 2, 
	348, 2, 349, 349, 350, 349, 2, 351, 
	2, 352, 2, 353, 2, 354, 2, 355, 
	355, 356, 355, 2, 357, 2, 358, 2, 
	359, 2, 360, 2, 361, 2, 362, 363, 
	2, 364, 2, 365, 365, 366, 368, 365, 
	367, 2, 238, 239, 369, 2, 371, 370, 
	2, 371, 2, 372, 2, 373, 2, 374, 
	2, 375, 2, 376, 2, 377, 377, 378, 
	379, 380, 377, 2, 381, 2, 377, 377, 
	379, 380, 377, 382, 2, 238, 383, 383, 
	384, 383, 383, 383, 383, 2, 377, 377, 
	383, 383, 385, 380, 383, 377, 383, 383, 
	383, 2, 377, 377, 238, 383, 383, 386, 
	380, 383, 377, 383, 383, 383, 2, 377, 
	377, 379, 380, 377, 387, 2, 377, 377, 
	379, 380, 377, 388, 2, 377, 377, 379, 
	380, 377, 389, 2, 377, 377, 379, 380, 
	377, 390, 2, 377, 377, 379, 380, 377, 
	391, 2, 377, 377, 379, 380, 377, 392, 
	2, 377, 377, 379, 380, 377, 393, 2, 
	377, 377, 379, 380, 377, 2, 365, 365, 
	366, 368, 365, 2, 362, 2, 394, 2, 
	395, 395, 396, 397, 398, 395, 394, 2, 
	399, 400, 401, 2, 401, 2, 395, 395, 
	396, 397, 395, 401, 2, 216, 402, 402, 
	218, 219, 220, 221, 222, 224, 225, 226, 
	227, 402, 223, 2, 216, 403, 225, 229, 
	2, 230, 230, 231, 232, 233, 234, 404, 
	405, 406, 230, 229, 2, 407, 2, 230, 
	230, 233, 234, 230, 407, 2, 408, 2, 
	230, 230, 233, 234, 230, 408, 2, 409, 
	410, 2, 230, 230, 411, 233, 234, 230, 
	409, 410, 2, 412, 413, 2, 414, 412, 
	413, 2, 415, 416, 417, 2, 417, 2, 
	418, 418, 419, 420, 418, 417, 2, 421, 
	2, 422, 2, 423, 423, 424, 425, 423, 
	2, 426, 427, 2, 230, 230, 231, 232, 
	233, 429, 234, 404, 405, 406, 230, 428, 
	2, 230, 230, 231, 232, 233, 429, 234, 
	230, 229, 2, 430, 2, 431, 2, 432, 
	2, 433, 2, 434, 2, 435, 435, 436, 
	437, 438, 435, 2, 439, 2, 435, 435, 
	437, 438, 435, 440, 2, 238, 441, 441, 
	442, 441, 441, 441, 441, 2, 435, 435, 
	441, 441, 443, 438, 441, 435, 441, 441, 
	441, 2, 435, 435, 238, 441, 441, 444, 
	438, 441, 435, 441, 441, 441, 2, 435, 
	435, 437, 438, 435, 445, 2, 435, 435, 
	437, 438, 435, 446, 2, 435, 435, 437, 
	438, 435, 447, 2, 435, 435, 437, 438, 
	435, 448, 2, 435, 435, 437, 438, 435, 
	449, 2, 435, 435, 437, 438, 435, 450, 
	2, 435, 435, 437, 438, 435, 451, 2, 
	435, 435, 437, 438, 435, 2, 230, 230, 
	231, 232, 233, 429, 234, 230, 428, 2, 
	452, 2, 453, 2, 454, 2, 455, 2, 
	456, 2, 457, 2, 458, 2, 459, 2, 
	460, 461, 461, 462, 463, 464, 465, 466, 
	468, 469, 470, 471, 472, 461, 467, 2, 
	460, 473, 2, 474, 474, 475, 476, 477, 
	478, 474, 473, 2, 479, 479, 480, 481, 
	479, 2, 482, 483, 2, 484, 481, 481, 
	485, 486, 487, 488, 489, 491, 492, 493, 
	494, 495, 496, 497, 498, 499, 481, 490, 
	2, 484, 500, 2, 501, 501, 502, 503, 
	504, 501, 500, 2, 505, 2, 506, 507, 
	2, 508, 2, 509, 509, 510, 512, 509, 
	511, 2, 513, 2, 515, 514, 2, 515, 
	2, 516, 2, 517, 2, 518, 2, 519, 
	2, 520, 2, 521, 521, 522, 523, 524, 
	521, 2, 525, 2, 521, 521, 523, 524, 
	521, 526, 2, 527, 527, 527, 527, 527, 
	527, 2, 521, 521, 527, 527, 524, 527, 
	521, 527, 527, 527, 2, 521, 521, 523, 
	524, 521, 528, 2, 521, 521, 523, 524, 
	521, 529, 2, 521, 521, 523, 524, 521, 
	530, 2, 521, 521, 523, 524, 521, 531, 
	2, 521, 521, 523, 524, 521, 532, 2, 
	521, 521, 523, 524, 521, 533, 2, 521, 
	521, 523, 524, 521, 534, 2, 521, 521, 
	523, 524, 521, 2, 509, 509, 510, 512, 
	509, 2, 506, 2, 535, 2, 536, 536, 
	537, 538, 536, 535, 2, 539, 540, 541, 
	2, 541, 2, 536, 536, 537, 536, 541, 
	2, 461, 461, 468, 461, 2, 484, 542, 
	494, 500, 2, 501, 501, 502, 503, 504, 
	543, 544, 545, 501, 500, 2, 546, 2, 
	501, 501, 504, 501, 546, 2, 547, 2, 
	501, 501, 504, 501, 547, 2, 548, 549, 
	2, 501, 501, 550, 504, 501, 548, 549, 
	2, 551, 552, 2, 553, 551, 552, 2, 
	554, 555, 556, 2, 556, 2, 557, 557, 
	558, 557, 556, 2, 559, 2, 560, 2, 
	561, 561, 562, 561, 2, 563, 564, 2, 
	501, 501, 502, 503, 566, 504, 543, 544, 
	545, 501, 565, 2, 501, 501, 502, 503, 
	566, 504, 501, 500, 2, 567, 2, 568, 
	2, 569, 2, 570, 2, 571, 2, 572, 
	572, 573, 574, 575, 572, 2, 576, 2, 
	572, 572, 574, 575, 572, 577, 2, 578, 
	578, 578, 578, 578, 578, 2, 572, 572, 
	578, 578, 575, 578, 572, 578, 578, 578, 
	2, 572, 572, 574, 575, 572, 579, 2, 
	572, 572, 574, 575, 572, 580, 2, 572, 
	572, 574, 575, 572, 581, 2, 572, 572, 
	574, 575, 572, 582, 2, 572, 572, 574, 
	575, 572, 583, 2, 572, 572, 574, 575, 
	572, 584, 2, 572, 572, 574, 575, 572, 
	585, 2, 572, 572, 574, 575, 572, 2, 
	501, 501, 502, 503, 566, 504, 501, 565, 
	2, 586, 2, 587, 2, 588, 2, 589, 
	2, 590, 591, 2, 592, 2, 593, 593, 
	594, 593, 2, 595, 2, 596, 2, 597, 
	2, 598, 2, 599, 599, 600, 599, 2, 
	601, 2, 602, 2, 603, 2, 604, 2, 
	605, 2, 606, 607, 2, 608, 2, 609, 
	609, 610, 612, 609, 611, 2, 482, 483, 
	613, 2, 615, 614, 2, 615, 2, 616, 
	2, 617, 2, 618, 2, 619, 2, 620, 
	2, 621, 621, 622, 623, 624, 621, 2, 
	625, 2, 621, 621, 623, 624, 621, 626, 
	2, 482, 627, 627, 628, 627, 627, 627, 
	627, 2, 621, 621, 627, 627, 629, 624, 
	627, 621, 627, 627, 627, 2, 621, 621, 
	482, 627, 627, 630, 624, 627, 621, 627, 
	627, 627, 2, 621, 621, 623, 624, 621, 
	631, 2, 621, 621, 623, 624, 621, 632, 
	2, 621, 621, 623, 624, 621, 633, 2, 
	621, 621, 623, 624, 621, 634, 2, 621, 
	621, 623, 624, 621, 635, 2, 621, 621, 
	623, 624, 621, 636, 2, 621, 621, 623, 
	624, 621, 637, 2, 621, 621, 623, 624, 
	621, 2, 609, 609, 610, 612, 609, 2, 
	606, 2, 638, 2, 639, 639, 640, 641, 
	642, 639, 638, 2, 643, 644, 645, 2, 
	645, 2, 639, 639, 640, 641, 639, 645, 
	2, 460, 646, 646, 462, 463, 464, 465, 
	466, 469, 470, 471, 472, 646, 467, 2, 
	460, 647, 470, 473, 2, 474, 474, 475, 
	476, 477, 478, 648, 649, 650, 474, 473, 
	2, 651, 2, 474, 474, 477, 478, 474, 
	651, 2, 652, 2, 474, 474, 477, 478, 
	474, 652, 2, 653, 654, 2, 474, 474, 
	655, 477, 478, 474, 653, 654, 2, 656, 
	657, 2, 658, 656, 657, 2, 659, 660, 
	661, 2, 661, 2, 662, 662, 663, 664, 
	662, 661, 2, 665, 2, 666, 2, 667, 
	667, 668, 669, 667, 2, 670, 671, 2, 
	474, 474, 475, 476, 477, 673, 478, 648, 
	649, 650, 474, 672, 2, 474, 474, 475, 
	476, 477, 673, 478, 474, 473, 2, 674, 
	2, 675, 2, 676, 2, 677, 2, 678, 
	2, 679, 679, 680, 681, 682, 679, 2, 
	683, 2, 679, 679, 681, 682, 679, 684, 
	2, 482, 685, 685, 686, 685, 685, 685, 
	685, 2, 679, 679, 685, 685, 687, 682, 
	685, 679, 685, 685, 685, 2, 679, 679, 
	482, 685, 685, 688, 682, 685, 679, 685, 
	685, 685, 2, 679, 679, 681, 682, 679, 
	689, 2, 679, 679, 681, 682, 679, 690, 
	2, 679, 679, 681, 682, 679, 691, 2, 
	679, 679, 681, 682, 679, 692, 2, 679, 
	679, 681, 682, 679, 693, 2, 679, 679, 
	681, 682, 679, 694, 2, 679, 679, 681, 
	682, 679, 695, 2, 679, 679, 681, 682, 
	679, 2, 474, 474, 475, 476, 477, 673, 
	478, 474, 672, 2, 696, 2, 697, 2, 
	698, 2, 699, 2, 700, 2, 701, 2, 
	702, 2, 703, 2, 704, 705, 705, 706, 
	707, 708, 709, 710, 711, 713, 714, 715, 
	716, 705, 712, 2, 704, 717, 2, 718, 
	718, 719, 720, 721, 722, 718, 717, 2, 
	723, 723, 724, 725, 723, 2, 726, 727, 
	2, 728, 725, 725, 729, 730, 731, 732, 
	733, 735, 736, 737, 738, 739, 740, 741, 
	742, 743, 725, 734, 2, 728, 744, 2, 
	745, 745, 746, 747, 748, 745, 744, 2, 
	749, 2, 750, 751, 2, 752, 2, 753, 
	753, 754, 755, 753, 756, 2, 757, 2, 
	759, 758, 2, 759, 2, 760, 2, 761, 
	2, 762, 2, 763, 2, 764, 2, 765, 
	765, 766, 767, 768, 765, 2, 769, 2, 
	765, 765, 766, 768, 765, 770, 2, 771, 
	771, 771, 771, 771, 771, 2, 765, 765, 
	766, 771, 771, 771, 765, 771, 771, 771, 
	2, 765, 765, 766, 768, 765, 772, 2, 
	765, 765, 766, 768, 765, 773, 2, 765, 
	765, 766, 768, 765, 774, 2, 765, 765, 
	766, 768, 765, 775, 2, 765, 765, 766, 
	768, 765, 776, 2, 765, 765, 766, 768, 
	765, 777, 2, 765, 765, 766, 768, 765, 
	778, 2, 765, 765, 766, 768, 765, 2, 
	753, 753, 754, 755, 753, 2, 750, 2, 
	779, 2, 780, 780, 781, 782, 780, 779, 
	2, 783, 784, 785, 2, 785, 2, 780, 
	780, 781, 780, 785, 2, 705, 705, 708, 
	705, 2, 728, 786, 738, 744, 2, 745, 
	745, 746, 747, 748, 787, 788, 789, 745, 
	744, 2, 790, 2, 745, 745, 746, 745, 
	790, 2, 791, 2, 745, 745, 746, 745, 
	791, 2, 792, 793, 2, 745, 745, 746, 
	794, 745, 792, 793, 2, 795, 796, 2, 
	797, 795, 796, 2, 798, 799, 800, 2, 
	800, 2, 801, 801, 802, 801, 800, 2, 
	803, 2, 804, 2, 805, 805, 806, 805, 
	2, 807, 808, 2, 745, 745, 746, 747, 
	748, 810, 787, 788, 789, 745, 809, 2, 
	745, 745, 746, 747, 748, 810, 745, 744, 
	2, 811, 2, 812, 2, 813, 2, 814, 
	2, 815, 2, 816, 816, 817, 818, 819, 
	816, 2, 820, 2, 816, 816, 817, 819, 
	816, 821, 2, 822, 822, 822, 822, 822, 
	822, 2, 816, 816, 817, 822, 822, 822, 
	816, 822, 822, 822, 2, 816, 816, 817, 
	819, 816, 823, 2, 816, 816, 817, 819, 
	816, 824, 2, 816, 816, 817, 819, 816, 
	825, 2, 816, 816, 817, 819, 816, 826, 
	2, 816, 816, 817, 819, 816, 827, 2, 
	816, 816, 817, 819, 816, 828, 2, 816, 
	816, 817, 819, 816, 829, 2, 816, 816, 
	817, 819, 816, 2, 745, 745, 746, 747, 
	748, 810, 745, 809, 2, 830, 2, 831, 
	2, 832, 2, 833, 2, 834, 835, 2, 
	836, 2, 837, 837, 838, 837, 2, 839, 
	2, 840, 2, 841, 2, 842, 2, 843, 
	843, 844, 843, 2, 845, 2, 846, 2, 
	847, 2, 848, 2, 849, 2, 850, 851, 
	2, 852, 2, 853, 853, 854, 856, 853, 
	855, 2, 726, 727, 857, 2, 859, 858, 
	2, 859, 2, 860, 2, 861, 2, 862, 
	2, 863, 2, 864, 2, 865, 865, 866, 
	867, 868, 865, 2, 869, 2, 865, 865, 
	867, 868, 865, 870, 2, 726, 871, 871, 
	872, 871, 871, 871, 871, 2, 865, 865, 
	871, 871, 873, 868, 871, 865, 871, 871, 
	871, 2, 865, 865, 726, 871, 871, 874, 
	868, 871, 865, 871, 871, 871, 2, 865, 
	865, 867, 868, 865, 875, 2, 865, 865, 
	867, 868, 865, 876, 2, 865, 865, 867, 
	868, 865, 877, 2, 865, 865, 867, 868, 
	865, 878, 2, 865, 865, 867, 868, 865, 
	879, 2, 865, 865, 867, 868, 865, 880, 
	2, 865, 865, 867, 868, 865, 881, 2, 
	865, 865, 867, 868, 865, 2, 853, 853, 
	854, 856, 853, 2, 850, 2, 882, 2, 
	883, 883, 884, 885, 886, 883, 882, 2, 
	887, 888, 889, 2, 889, 2, 883, 883, 
	884, 885, 883, 889, 2, 704, 890, 890, 
	706, 707, 709, 710, 711, 713, 714, 715, 
	716, 890, 712, 2, 704, 891, 714, 717, 
	2, 718, 718, 719, 720, 721, 722, 892, 
	893, 894, 718, 717, 2, 895, 2, 718, 
	718, 721, 722, 718, 895, 2, 896, 2, 
	718, 718, 721, 722, 718, 896, 2, 897, 
	898, 2, 718, 718, 899, 721, 722, 718, 
	897, 898, 2, 900, 901, 2, 902, 900, 
	901, 2, 903, 904, 905, 2, 905, 2, 
	906, 906, 907, 908, 906, 905, 2, 909, 
	2, 910, 2, 911, 911, 912, 913, 911, 
	2, 914, 915, 2, 718, 718, 719, 720, 
	721, 917, 722, 892, 893, 894, 718, 916, 
	2, 718, 718, 719, 720, 721, 917, 722, 
	718, 717, 2, 918, 2, 919, 2, 920, 
	2, 921, 2, 922, 2, 923, 923, 924, 
	925, 926, 923, 2, 927, 2, 923, 923, 
	925, 926, 923, 928, 2, 726, 929, 929, 
	930, 929, 929, 929, 929, 2, 923, 923, 
	929, 929, 931, 926, 929, 923, 929, 929, 
	929, 2, 923, 923, 726, 929, 929, 932, 
	926, 929, 923, 929, 929, 929, 2, 923, 
	923, 925, 926, 923, 933, 2, 923, 923, 
	925, 926, 923, 934, 2, 923, 923, 925, 
	926, 923, 935, 2, 923, 923, 925, 926, 
	923, 936, 2, 923, 923, 925, 926, 923, 
	937, 2, 923, 923, 925, 926, 923, 938, 
	2, 923, 923, 925, 926, 923, 939, 2, 
	923, 923, 925, 926, 923, 2, 718, 718, 
	719, 720, 721, 917, 722, 718, 916, 2, 
	940, 2, 941, 2, 942, 2, 943, 2, 
	944, 2, 945, 2, 946, 2, 947, 2, 
	948, 948, 949, 950, 948, 18, 2, 951, 
	951, 951, 2, 952, 952, 953, 952, 954, 
	2, 955, 955, 956, 957, 955, 2, 955, 
	955, 957, 955, 958, 2, 955, 955, 32, 
	32, 32, 955, 32, 32, 32, 2, 955, 
	955, 957, 955, 959, 2, 955, 955, 957, 
	955, 960, 2, 955, 955, 957, 955, 961, 
	2, 955, 955, 957, 955, 962, 2, 955, 
	955, 957, 955, 963, 2, 955, 955, 957, 
	955, 964, 2, 955, 955, 957, 955, 965, 
	2, 955, 955, 957, 955, 2, 952, 952, 
	953, 952, 2, 966, 966, 967, 966, 33, 
	2, 966, 966, 966, 36, 2, 948, 948, 
	949, 950, 968, 969, 970, 948, 18, 2, 
	948, 948, 948, 38, 2, 948, 948, 948, 
	39, 2, 948, 948, 971, 948, 40, 41, 
	2, 972, 972, 972, 47, 2, 973, 973, 
	973, 2, 948, 948, 949, 950, 975, 968, 
	969, 970, 948, 974, 2, 948, 948, 949, 
	950, 975, 948, 18, 2, 976, 976, 977, 
	978, 976, 2, 976, 976, 978, 976, 979, 
	2, 976, 976, 58, 58, 58, 976, 58, 
	58, 58, 2, 976, 976, 978, 976, 980, 
	2, 976, 976, 978, 976, 981, 2, 976, 
	976, 978, 976, 982, 2, 976, 976, 978, 
	976, 983, 2, 976, 976, 978, 976, 984, 
	2, 976, 976, 978, 976, 985, 2, 976, 
	976, 978, 976, 986, 2, 976, 976, 978, 
	976, 2, 948, 948, 949, 950, 975, 948, 
	974, 2, 987, 987, 987, 2, 988, 988, 
	988, 2, 2, 80, 78, 76, 2, 2, 
	2, 2, 2, 2, 
}

var _cte_trans_targs []int16 = []int16{
	2, 1, 0, 680, 1, 20, 30, 702, 
	715, 680, 680, 38, 28, 42, 45, 48, 
	51, 680, 679, 4, 5, 16, 681, 7, 
	8, 9, 10, 11, 12, 13, 682, 683, 
	684, 694, 19, 19, 695, 696, 697, 698, 
	699, 699, 25, 25, 26, 27, 27, 700, 
	29, 701, 1, 1, 32, 33, 34, 35, 
	704, 705, 706, 39, 40, 41, 680, 43, 
	44, 716, 680, 46, 47, 717, 49, 50, 
	680, 680, 52, 718, 53, 54, 55, 719, 
	54, 56, 720, 57, 56, 56, 56, 56, 
	56, 56, 59, 721, 61, 60, 95, 96, 
	97, 113, 114, 134, 95, 95, 722, 135, 
	110, 139, 143, 147, 150, 95, 62, 60, 
	63, 90, 722, 64, 65, 89, 66, 60, 
	67, 88, 722, 68, 69, 70, 71, 72, 
	73, 74, 75, 60, 76, 78, 722, 77, 
	80, 79, 81, 82, 83, 84, 85, 86, 
	87, 91, 60, 722, 92, 93, 93, 94, 
	96, 98, 99, 101, 103, 100, 102, 104, 
	104, 105, 106, 106, 107, 108, 108, 109, 
	60, 722, 111, 112, 60, 722, 96, 96, 
	115, 116, 117, 118, 119, 120, 121, 60, 
	122, 124, 722, 123, 126, 125, 127, 128, 
	129, 130, 131, 132, 133, 136, 137, 138, 
	95, 140, 142, 141, 60, 722, 95, 144, 
	145, 146, 60, 722, 148, 149, 95, 95, 
	152, 151, 154, 279, 280, 296, 297, 318, 
	319, 293, 323, 326, 723, 153, 154, 246, 
	274, 155, 156, 154, 155, 156, 154, 154, 
	157, 191, 156, 192, 208, 209, 229, 191, 
	191, 230, 205, 234, 238, 242, 245, 191, 
	158, 151, 159, 186, 723, 160, 161, 185, 
	162, 151, 163, 184, 723, 164, 165, 166, 
	167, 168, 169, 170, 171, 151, 172, 174, 
	723, 173, 176, 175, 177, 178, 179, 180, 
	181, 182, 183, 187, 151, 188, 723, 189, 
	189, 190, 193, 194, 196, 198, 195, 197, 
	199, 199, 200, 201, 201, 202, 203, 203, 
	204, 151, 723, 206, 207, 151, 723, 156, 
	156, 210, 211, 212, 213, 214, 215, 216, 
	151, 217, 219, 723, 218, 221, 220, 222, 
	223, 224, 225, 226, 227, 228, 231, 232, 
	233, 191, 235, 237, 236, 151, 723, 191, 
	239, 240, 241, 151, 723, 243, 244, 191, 
	191, 247, 248, 273, 249, 154, 250, 272, 
	156, 251, 252, 253, 254, 255, 256, 257, 
	258, 154, 259, 261, 156, 260, 264, 262, 
	262, 263, 263, 265, 266, 267, 268, 269, 
	270, 271, 275, 154, 155, 156, 276, 277, 
	277, 278, 279, 281, 282, 284, 286, 283, 
	285, 287, 287, 288, 289, 289, 290, 291, 
	291, 292, 154, 155, 156, 294, 295, 154, 
	155, 156, 279, 279, 298, 299, 300, 301, 
	302, 303, 304, 154, 305, 307, 156, 306, 
	310, 308, 308, 309, 309, 311, 312, 313, 
	314, 315, 316, 317, 320, 321, 322, 154, 
	324, 325, 154, 154, 328, 327, 330, 455, 
	456, 472, 473, 494, 724, 495, 469, 499, 
	502, 329, 330, 422, 450, 331, 332, 330, 
	331, 332, 330, 330, 333, 367, 332, 368, 
	384, 385, 405, 367, 367, 406, 381, 410, 
	414, 418, 421, 367, 334, 327, 335, 362, 
	724, 336, 337, 361, 338, 327, 339, 360, 
	724, 340, 341, 342, 343, 344, 345, 346, 
	347, 327, 348, 350, 724, 349, 352, 351, 
	353, 354, 355, 356, 357, 358, 359, 363, 
	327, 724, 364, 365, 365, 366, 369, 370, 
	372, 374, 371, 373, 375, 375, 376, 377, 
	377, 378, 379, 379, 380, 327, 724, 382, 
	383, 327, 724, 332, 332, 386, 387, 388, 
	389, 390, 391, 392, 327, 393, 395, 724, 
	394, 397, 396, 398, 399, 400, 401, 402, 
	403, 404, 407, 408, 409, 367, 411, 413, 
	412, 327, 724, 367, 415, 416, 417, 327, 
	724, 419, 420, 367, 367, 423, 424, 449, 
	425, 330, 426, 448, 332, 427, 428, 429, 
	430, 431, 432, 433, 434, 330, 435, 437, 
	332, 436, 440, 438, 438, 439, 439, 441, 
	442, 443, 444, 445, 446, 447, 451, 330, 
	331, 332, 452, 453, 453, 454, 455, 457, 
	458, 460, 462, 459, 461, 463, 463, 464, 
	465, 465, 466, 467, 467, 468, 330, 331, 
	332, 470, 471, 330, 331, 332, 455, 455, 
	474, 475, 476, 477, 478, 479, 480, 330, 
	481, 483, 332, 482, 486, 484, 484, 485, 
	485, 487, 488, 489, 490, 491, 492, 493, 
	496, 497, 498, 330, 500, 501, 330, 330, 
	504, 503, 506, 631, 725, 632, 648, 649, 
	670, 671, 645, 675, 678, 505, 506, 598, 
	626, 507, 508, 506, 507, 508, 506, 506, 
	509, 543, 508, 544, 560, 561, 581, 543, 
	543, 582, 557, 586, 590, 594, 597, 543, 
	510, 503, 725, 511, 538, 512, 513, 537, 
	514, 503, 725, 515, 536, 516, 517, 518, 
	519, 520, 521, 522, 523, 503, 725, 524, 
	526, 525, 528, 527, 529, 530, 531, 532, 
	533, 534, 535, 539, 503, 725, 540, 541, 
	541, 542, 545, 546, 548, 550, 547, 549, 
	551, 551, 552, 553, 553, 554, 555, 555, 
	556, 503, 725, 558, 559, 503, 725, 508, 
	508, 562, 563, 564, 565, 566, 567, 568, 
	503, 725, 569, 571, 570, 573, 572, 574, 
	575, 576, 577, 578, 579, 580, 583, 584, 
	585, 543, 587, 589, 588, 503, 725, 543, 
	591, 592, 593, 503, 725, 595, 596, 543, 
	543, 599, 600, 625, 601, 506, 602, 624, 
	508, 603, 604, 605, 606, 607, 608, 609, 
	610, 506, 611, 613, 508, 612, 616, 614, 
	614, 615, 615, 617, 618, 619, 620, 621, 
	622, 623, 627, 506, 507, 508, 628, 629, 
	629, 630, 631, 633, 634, 636, 638, 635, 
	637, 639, 639, 640, 641, 641, 642, 643, 
	643, 644, 506, 507, 508, 646, 647, 506, 
	507, 508, 631, 631, 650, 651, 652, 653, 
	654, 655, 656, 506, 657, 659, 508, 658, 
	662, 660, 660, 661, 661, 663, 664, 665, 
	666, 667, 668, 669, 672, 673, 674, 506, 
	676, 677, 506, 506, 680, 3, 17, 680, 
	680, 6, 693, 680, 14, 15, 685, 686, 
	687, 688, 689, 690, 691, 692, 680, 18, 
	21, 22, 23, 24, 680, 680, 703, 31, 
	680, 36, 37, 707, 708, 709, 710, 711, 
	712, 713, 714, 680, 680, 
}

var _cte_trans_actions []byte = []byte{
	0, 0, 0, 73, 67, 7, 0, 105, 
	105, 65, 61, 0, 0, 0, 0, 0, 
	0, 63, 11, 41, 0, 41, 43, 45, 
	45, 0, 47, 47, 0, 49, 49, 51, 
	53, 17, 0, 9, 23, 11, 25, 27, 
	13, 15, 19, 21, 0, 0, 9, 23, 
	0, 0, 71, 69, 47, 47, 0, 49, 
	49, 51, 53, 0, 0, 0, 5, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	3, 75, 0, 77, 0, 0, 0, 79, 
	71, 0, 93, 0, 91, 89, 81, 83, 
	85, 87, 0, 95, 0, 0, 73, 67, 
	7, 0, 105, 105, 65, 61, 97, 0, 
	0, 0, 0, 0, 0, 63, 11, 29, 
	0, 0, 108, 41, 0, 41, 43, 55, 
	0, 43, 189, 45, 45, 0, 47, 47, 
	0, 49, 49, 59, 0, 0, 213, 51, 
	51, 53, 51, 51, 51, 51, 51, 51, 
	51, 17, 31, 120, 0, 0, 9, 23, 
	0, 11, 0, 0, 0, 25, 27, 13, 
	15, 0, 19, 21, 0, 0, 9, 23, 
	33, 132, 0, 0, 35, 144, 71, 69, 
	105, 0, 47, 47, 0, 49, 49, 57, 
	0, 0, 201, 51, 51, 53, 51, 51, 
	51, 51, 51, 51, 51, 0, 0, 0, 
	5, 0, 0, 0, 37, 156, 1, 0, 
	0, 0, 39, 168, 0, 0, 3, 75, 
	0, 0, 73, 67, 7, 0, 105, 105, 
	0, 0, 0, 0, 99, 11, 29, 0, 
	0, 29, 29, 0, 0, 0, 71, 69, 
	0, 73, 67, 7, 0, 105, 105, 65, 
	61, 0, 0, 0, 0, 0, 0, 63, 
	11, 29, 0, 0, 111, 41, 0, 41, 
	43, 55, 0, 43, 192, 45, 45, 0, 
	47, 47, 0, 49, 49, 59, 0, 0, 
	216, 51, 51, 53, 51, 51, 51, 51, 
	51, 51, 51, 17, 31, 0, 123, 0, 
	9, 23, 11, 0, 0, 0, 25, 27, 
	13, 15, 0, 19, 21, 0, 0, 9, 
	23, 33, 135, 0, 0, 35, 147, 71, 
	69, 105, 0, 47, 47, 0, 49, 49, 
	57, 0, 0, 204, 51, 51, 53, 51, 
	51, 51, 51, 51, 51, 51, 0, 0, 
	0, 5, 0, 0, 0, 37, 159, 1, 
	0, 0, 0, 39, 171, 0, 0, 3, 
	75, 41, 0, 41, 43, 55, 55, 43, 
	55, 45, 45, 0, 47, 47, 0, 49, 
	49, 59, 0, 59, 59, 51, 51, 53, 
	186, 183, 229, 51, 51, 51, 51, 51, 
	51, 51, 17, 31, 31, 31, 0, 0, 
	9, 23, 0, 11, 0, 0, 0, 25, 
	27, 13, 15, 0, 19, 21, 0, 0, 
	9, 23, 33, 33, 33, 0, 0, 35, 
	35, 35, 71, 69, 105, 0, 47, 47, 
	0, 49, 49, 57, 0, 57, 57, 51, 
	51, 53, 186, 180, 225, 51, 51, 51, 
	51, 51, 51, 51, 0, 0, 0, 5, 
	0, 0, 3, 75, 0, 0, 73, 67, 
	7, 0, 105, 105, 101, 0, 0, 0, 
	0, 11, 29, 0, 0, 29, 29, 0, 
	0, 0, 71, 69, 0, 73, 67, 7, 
	0, 105, 105, 65, 61, 0, 0, 0, 
	0, 0, 0, 63, 11, 29, 0, 0, 
	114, 41, 0, 41, 43, 55, 0, 43, 
	195, 45, 45, 0, 47, 47, 0, 49, 
	49, 59, 0, 0, 219, 51, 51, 53, 
	51, 51, 51, 51, 51, 51, 51, 17, 
	31, 126, 0, 0, 9, 23, 11, 0, 
	0, 0, 25, 27, 13, 15, 0, 19, 
	21, 0, 0, 9, 23, 33, 138, 0, 
	0, 35, 150, 71, 69, 105, 0, 47, 
	47, 0, 49, 49, 57, 0, 0, 207, 
	51, 51, 53, 51, 51, 51, 51, 51, 
	51, 51, 0, 0, 0, 5, 0, 0, 
	0, 37, 162, 1, 0, 0, 0, 39, 
	174, 0, 0, 3, 75, 41, 0, 41, 
	43, 55, 55, 43, 55, 45, 45, 0, 
	47, 47, 0, 49, 49, 59, 0, 59, 
	59, 51, 51, 53, 186, 183, 229, 51, 
	51, 51, 51, 51, 51, 51, 17, 31, 
	31, 31, 0, 0, 9, 23, 0, 11, 
	0, 0, 0, 25, 27, 13, 15, 0, 
	19, 21, 0, 0, 9, 23, 33, 33, 
	33, 0, 0, 35, 35, 35, 71, 69, 
	105, 0, 47, 47, 0, 49, 49, 57, 
	0, 57, 57, 51, 51, 53, 186, 180, 
	225, 51, 51, 51, 51, 51, 51, 51, 
	0, 0, 0, 5, 0, 0, 3, 75, 
	0, 0, 73, 67, 103, 7, 0, 105, 
	105, 0, 0, 0, 0, 11, 29, 0, 
	0, 29, 29, 0, 0, 0, 71, 69, 
	0, 73, 67, 7, 0, 105, 105, 65, 
	61, 0, 0, 0, 0, 0, 0, 63, 
	11, 29, 117, 0, 0, 41, 0, 41, 
	43, 55, 198, 0, 43, 45, 45, 0, 
	47, 47, 0, 49, 49, 59, 222, 0, 
	0, 51, 51, 53, 51, 51, 51, 51, 
	51, 51, 51, 17, 31, 129, 0, 0, 
	9, 23, 11, 0, 0, 0, 25, 27, 
	13, 15, 0, 19, 21, 0, 0, 9, 
	23, 33, 141, 0, 0, 35, 153, 71, 
	69, 105, 0, 47, 47, 0, 49, 49, 
	57, 210, 0, 0, 51, 51, 53, 51, 
	51, 51, 51, 51, 51, 51, 0, 0, 
	0, 5, 0, 0, 0, 37, 165, 1, 
	0, 0, 0, 39, 177, 0, 0, 3, 
	75, 41, 0, 41, 43, 55, 55, 43, 
	55, 45, 45, 0, 47, 47, 0, 49, 
	49, 59, 0, 59, 59, 51, 51, 53, 
	186, 183, 229, 51, 51, 51, 51, 51, 
	51, 51, 17, 31, 31, 31, 0, 0, 
	9, 23, 0, 11, 0, 0, 0, 25, 
	27, 13, 15, 0, 19, 21, 0, 0, 
	9, 23, 33, 33, 33, 0, 0, 35, 
	35, 35, 71, 69, 105, 0, 47, 47, 
	0, 49, 49, 57, 0, 57, 57, 51, 
	51, 53, 186, 180, 225, 51, 51, 51, 
	51, 51, 51, 51, 0, 0, 0, 5, 
	0, 0, 3, 75, 29, 0, 0, 0, 
	55, 0, 43, 59, 0, 0, 51, 51, 
	51, 51, 51, 51, 51, 51, 31, 0, 
	0, 0, 0, 0, 33, 35, 105, 0, 
	57, 0, 0, 51, 51, 51, 51, 51, 
	51, 51, 51, 37, 39, 
}

var _cte_eof_actions []byte = []byte{
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 29, 
	0, 55, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 55, 31, 31, 
	29, 29, 29, 29, 33, 35, 29, 29, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 29, 37, 39, 0, 0, 
	0, 0, 0, 0, 0, 0, 
}

const cte_start int = 1
const cte_error int = 0

const cte_en_comment_iterate int = 52
const cte_en_multiline_comment_iterate int = 53
const cte_en_string_iterate int = 56
const cte_en_uri_iterate int = 58
const cte_en_list_iterate int = 60
const cte_en_unordered_map_iterate int = 151
const cte_en_ordered_map_iterate int = 327
const cte_en_metadata_map_iterate int = 503
const cte_en_main int = 1


//line cte.rl:426

type Parser struct {
    cs int // Current Ragel state
    ts int // Position: start of token
    te int // Position: end of token
    top int // Index of top of stack
    stack []int
    data []byte
    arrayStart int // Start of the current item of interest
    commentDepth int
    significand uint64
    significandSign int
    exponent int
    exponentSign int
    exponentAdjust int
    month int
    day int
    hour int
    minute int
    second int
    subsecond int
    subsecondMultiplier int
    timezone []byte
}

func (this *Parser) Init(maxDepth int) {
    this.stack = make([]int, maxDepth)
    this.significandSign = 1
    this.exponentSign = 1
    this.subsecondMultiplier = 1000000000
    this.timezone = make([]byte, 0, 40)
}

func NewParser(maxDepth int) *Parser {
    this := new(Parser)
    this.Init(maxDepth)
    return this
}

func (this *Parser) flushByteArray(index int, callbacks CteDecoderCallbacks) error {
    err := callbacks.OnArrayData(this.data[this.arrayStart:index])
    if err != nil {
        return err
    }
    this.arrayStart = index
    return nil
}

func (this *Parser) flushAndAddEscapedCharacter(index int, escapedCharacter byte, callbacks CteDecoderCallbacks) error {
    this.data[index] = escapedCharacter
    if err := this.flushByteArray(index+1, callbacks); err != nil {
        return err
    }
    // Get past escape initiator and escape char
    this.arrayStart = index + 2
    return nil
}

func (this *Parser) Parse(src []byte, callbacks CteDecoderCallbacks) (isComplete bool, err error) {
//  if this.ts > 0 {
        // TODO: Read from undeflow buffer
//  }
    this.data = src
    p := 0 // Position: current
    pe := len(this.data) // Position: end of buffer
    // TODO: Change to -1 and check for end of file
    eof := pe // Position: end of file

    _ = eof
    
    
//line cte.go:1804
	{
	 this.cs = cte_start
	 this.top = 0
	}

//line cte.go:1810
	{
	var _klen int
	var _trans int
	var _acts int
	var _nacts uint
	var _keys int
	if p == pe {
		goto _test_eof
	}
	if  this.cs == 0 {
		goto _out
	}
_resume:
	_keys = int(_cte_key_offsets[ this.cs])
	_trans = int(_cte_index_offsets[ this.cs])

	_klen = int(_cte_single_lengths[ this.cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + _klen - 1)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + ((_upper - _lower) >> 1)
			switch {
			case  this.data[p] < _cte_trans_keys[_mid]:
				_upper = _mid - 1
			case  this.data[p] > _cte_trans_keys[_mid]:
				_lower = _mid + 1
			default:
				_trans += int(_mid - int(_keys))
				goto _match
			}
		}
		_keys += _klen
		_trans += _klen
	}

	_klen = int(_cte_range_lengths[ this.cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + (_klen << 1) - 2)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + (((_upper - _lower) >> 1) & ^1)
			switch {
			case  this.data[p] < _cte_trans_keys[_mid]:
				_upper = _mid - 2
			case  this.data[p] > _cte_trans_keys[_mid + 1]:
				_lower = _mid + 2
			default:
				_trans += int((_mid - int(_keys)) >> 1)
				goto _match
			}
		}
		_trans += _klen
	}

_match:
	_trans = int(_cte_indicies[_trans])
	 this.cs = int(_cte_trans_targs[_trans])

	if _cte_trans_actions[_trans] == 0 {
		goto _again
	}

	_acts = int(_cte_trans_actions[_trans])
	_nacts = uint(_cte_actions[_acts]); _acts++
	for ; _nacts > 0; _nacts-- {
		_acts++
		switch _cte_actions[_acts-1] {
		case 0:
//line cte.rl:47

        err = callbacks.OnNil()
        if err != nil {
            p++; goto _out

        }
    
		case 1:
//line cte.rl:54

        err = callbacks.OnBool(true)
        if err != nil {
            p++; goto _out

        }
    
		case 2:
//line cte.rl:61

        err = callbacks.OnBool(false)
        if err != nil {
            p++; goto _out

        }
    
		case 3:
//line cte.rl:70

        this.significandSign = -1
    
		case 4:
//line cte.rl:74

        this.exponentSign = -1
    
		case 5:
//line cte.rl:78

        this.significand = this.significand * 10 + uint64( this.data[p] - '0')
    
		case 6:
//line cte.rl:82

        this.significand = (this.significand << 4) | uint64( this.data[p] - '0')
    
		case 7:
//line cte.rl:84

        this.significand = (this.significand << 4) | uint64( this.data[p] - 'a' + 10)
    
		case 8:
//line cte.rl:88

        this.significand = this.significand * 10 + uint64( this.data[p] - '0')
        this.exponentAdjust--
    
		case 9:
//line cte.rl:93

        this.significand = (this.significand << 4) | uint64( this.data[p] - '0')
        this.exponentAdjust -= 4
    
		case 10:
//line cte.rl:96

        this.significand = (this.significand << 4) | uint64( this.data[p] - 'a' + 10)
        this.exponentAdjust -= 4
    
		case 11:
//line cte.rl:101

        this.exponent = this.exponent * 10 + int( this.data[p] - '0')
    
		case 12:
//line cte.rl:110

        this.significand = (this.significand << 1) | uint64( this.data[p] - '0')
    
		case 13:
//line cte.rl:114

        this.significand = (this.significand << 3) | uint64( this.data[p] - '0')
    
		case 14:
//line cte.rl:120

        if this.significandSign >= 0 {
            callbacks.OnPositiveInt(this.significand)
        } else {
            callbacks.OnNegativeInt(this.significand)
        }
        this.significandSign = 1
        this.significand = 0
    
		case 15:
//line cte.rl:130

        callbacks.OnDecimalFloat(int64(this.significand) * int64(this.significandSign), (this.exponent+this.exponentAdjust) * this.exponentSign)
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
    
		case 16:
//line cte.rl:139

        exponent := float64((this.exponent * this.exponentSign + this.exponentAdjust))
        callbacks.OnFloat(float64(this.significandSign) * float64(this.significand) * math.Pow(2.0, exponent))
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
    
		case 17:
//line cte.rl:151

        callbacks.OnFloat(math.Inf(this.significandSign))
        this.significandSign = 1
    
		case 18:
//line cte.rl:156
callbacks.OnFloat(math.NaN())
		case 19:
//line cte.rl:157
callbacks.OnFloat(math.NaN())
		case 20:
//line cte.rl:159

        this.month = this.month * 10 + int( this.data[p] - '0')
    
		case 21:
//line cte.rl:163

        this.day = this.day * 10 + int( this.data[p] - '0')
    
		case 22:
//line cte.rl:167

        this.hour = this.hour * 10 + int( this.data[p] - '0')
    
		case 23:
//line cte.rl:171

        this.minute = this.minute * 10 + int( this.data[p] - '0')
    
		case 24:
//line cte.rl:175

        this.second = this.second * 10 + int( this.data[p] - '0')
    
		case 25:
//line cte.rl:179

        this.subsecond = this.subsecond * 10 + int( this.data[p] - '0')
        this.subsecondMultiplier /= 10
    
		case 26:
//line cte.rl:184

        this.timezone = append(this.timezone,  this.data[p])
    
		case 27:
//line cte.rl:191

        year := int(this.significand) * this.significandSign
        callbacks.OnDate(year, this.month, this.day)
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
    
		case 28:
//line cte.rl:200

        nanosecond := this.subsecond * this.subsecondMultiplier
        callbacks.OnTimeTZ(this.hour, this.minute, this.second, nanosecond, string(this.timezone))
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
    
		case 29:
//line cte.rl:211

        year := int(this.significand) * this.significandSign
        nanosecond := this.subsecond * this.subsecondMultiplier
        callbacks.OnTimestampTZ(year, this.month, this.day, this.hour, this.minute, this.second, nanosecond, string(this.timezone))
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
    
		case 30:
//line cte.rl:227

        err = callbacks.OnListBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 60; goto _again

    
		case 31:
//line cte.rl:235

        err = callbacks.OnUnorderedMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 151; goto _again

    
		case 32:
//line cte.rl:243

        err = callbacks.OnOrderedMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 327; goto _again

    
		case 33:
//line cte.rl:251

        err = callbacks.OnMetadataMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 503; goto _again

    
		case 34:
//line cte.rl:259

        this.arrayStart = p + 1
        err = callbacks.OnCommentBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 52; goto _again

    
		case 35:
//line cte.rl:268

        if this.commentDepth == 0 {
            err = callbacks.OnCommentBegin()
            if err != nil {
                p++; goto _out

            }
        } else {
            err = callbacks.OnArrayData(this.data[this.arrayStart:p+1])
            if err != nil {
                p++; goto _out

            }
        }
        this.arrayStart = p + 1
        this.commentDepth++
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 53; goto _again

    
		case 36:
//line cte.rl:285

        this.arrayStart = p + 1
        err = callbacks.OnStringBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 56; goto _again

    
		case 37:
//line cte.rl:294

        this.arrayStart = p + 1
        err = callbacks.OnURIBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 58; goto _again

    
		case 38:
//line cte.rl:313

            err = callbacks.OnArrayData(this.data[this.arrayStart:p])
            if err != nil {
                p++; goto _out

            }
            err = callbacks.OnArrayEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 39:
//line cte.rl:326

            err = callbacks.OnArrayData(this.data[this.arrayStart:p-1])
            if err != nil {
                p++; goto _out

            }
            this.arrayStart = p-1
            this.commentDepth--
            if this.commentDepth == 0 {
                err = callbacks.OnArrayEnd()
                if err != nil {
                    p++; goto _out

                }
            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 40:
//line cte.rl:346
this.flushAndAddEscapedCharacter(p-1, '\\', callbacks)
		case 41:
//line cte.rl:347
this.flushAndAddEscapedCharacter(p-1, '\n', callbacks)
		case 42:
//line cte.rl:348
this.flushAndAddEscapedCharacter(p-1, '\r', callbacks)
		case 43:
//line cte.rl:349
this.flushAndAddEscapedCharacter(p-1, '\t', callbacks)
		case 44:
//line cte.rl:350
this.flushAndAddEscapedCharacter(p-1, '"', callbacks)
		case 45:
//line cte.rl:351
return false, fmt.Errorf("\\%c: Illegal escape encoding", this.data[p])
		case 46:
//line cte.rl:355

            err = callbacks.OnArrayData(this.data[this.arrayStart:p])
            if err != nil {
                p++; goto _out

            }
            err = callbacks.OnArrayEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 47:
//line cte.rl:367

            err = callbacks.OnArrayData(this.data[this.arrayStart:p])
            if err != nil {
                p++; goto _out

            }
            err = callbacks.OnArrayEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 48:
//line cte.rl:381

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 49:
//line cte.rl:391

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 50:
//line cte.rl:401

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 51:
//line cte.rl:411

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
//line cte.go:2332
		}
	}

_again:
	if  this.cs == 0 {
		goto _out
	}
	p++
	if p != pe {
		goto _resume
	}
	_test_eof: {}
	if p == eof {
		__acts := _cte_eof_actions[ this.cs]
		__nacts := uint(_cte_actions[__acts]); __acts++
		for ; __nacts > 0; __nacts-- {
			__acts++
			switch _cte_actions[__acts-1] {
			case 14:
//line cte.rl:120

        if this.significandSign >= 0 {
            callbacks.OnPositiveInt(this.significand)
        } else {
            callbacks.OnNegativeInt(this.significand)
        }
        this.significandSign = 1
        this.significand = 0
    
			case 15:
//line cte.rl:130

        callbacks.OnDecimalFloat(int64(this.significand) * int64(this.significandSign), (this.exponent+this.exponentAdjust) * this.exponentSign)
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
    
			case 16:
//line cte.rl:139

        exponent := float64((this.exponent * this.exponentSign + this.exponentAdjust))
        callbacks.OnFloat(float64(this.significandSign) * float64(this.significand) * math.Pow(2.0, exponent))
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
    
			case 17:
//line cte.rl:151

        callbacks.OnFloat(math.Inf(this.significandSign))
        this.significandSign = 1
    
			case 18:
//line cte.rl:156
callbacks.OnFloat(math.NaN())
			case 19:
//line cte.rl:157
callbacks.OnFloat(math.NaN())
			case 27:
//line cte.rl:191

        year := int(this.significand) * this.significandSign
        callbacks.OnDate(year, this.month, this.day)
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
    
			case 28:
//line cte.rl:200

        nanosecond := this.subsecond * this.subsecondMultiplier
        callbacks.OnTimeTZ(this.hour, this.minute, this.second, nanosecond, string(this.timezone))
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
    
			case 29:
//line cte.rl:211

        year := int(this.significand) * this.significandSign
        nanosecond := this.subsecond * this.subsecondMultiplier
        callbacks.OnTimestampTZ(year, this.month, this.day, this.hour, this.minute, this.second, nanosecond, string(this.timezone))
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
    
//line cte.go:2434
			}
		}
	}

	_out: {}
	}

//line cte.rl:499


    if this.ts > 0 {
        // TODO: Copy to underflow buffer
        // arrayStart
        // ts doesn't seem to get used?
        // copy(this.underflow, data[ts:pe])
        // p = 0
        // pe = pe - ts
    }
    // TODO
    if this.cs == cte_error {
        err = fmt.Errorf("Parse error at %v", p)
    }
//    isComplete = this.cs == cte_parse_first;
    // TODO: Maybe there's no way to detect completion?
    isComplete = true
    return
}
