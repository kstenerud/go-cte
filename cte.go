
//line cte.rl:1
package cte

import (
    "fmt"
    "math"
)

type CteDecoderCallbacks interface {
    OnNil() error
    OnBool(value bool) error
    OnPositiveInt(value uint64) error
    OnNegativeInt(value uint64) error
    OnDecimalFloat(significand int64, exponent int) error
    OnFloat(value float64) error
    OnDate(year, month, day int) error
    OnTimeTZ(hour, minute, second, nanosecond int, tz string) error
    OnTimeLoc(hour, minute, second, nanosecond int, latitude, longitude float32) error
    OnTimestampTZ(year, month, day, hour, minute, second, nanosecond int, tz string) error
    OnTimestampLoc(year, month, day, hour, minute, second, nanosecond int, latitude, longitude float32) error
    OnListBegin() error
    OnOrderedMapBegin() error
    OnUnorderedMapBegin() error
    OnMetadataMapBegin() error
    OnContainerEnd() error
    OnBytesBegin() error
    OnStringBegin() error
    OnURIBegin() error
    OnCommentBegin() error
    OnArrayData(bytes []byte) error
    OnArrayEnd() error
}


//line cte.rl:499




//line cte.go:42
var _cte_actions []byte = []byte{
	0, 1, 0, 1, 1, 1, 2, 1, 3, 
	1, 4, 1, 5, 1, 6, 1, 7, 
	1, 8, 1, 9, 1, 10, 1, 11, 
	1, 12, 1, 13, 1, 14, 1, 15, 
	1, 16, 1, 17, 1, 18, 1, 19, 
	1, 20, 1, 21, 1, 22, 1, 23, 
	1, 24, 1, 25, 1, 26, 1, 27, 
	1, 28, 1, 29, 1, 30, 1, 31, 
	1, 32, 1, 33, 1, 34, 1, 35, 
	1, 36, 1, 37, 1, 38, 1, 39, 
	1, 40, 1, 41, 1, 42, 1, 43, 
	1, 44, 1, 45, 1, 46, 1, 47, 
	1, 48, 1, 49, 1, 50, 1, 51, 
	1, 52, 2, 5, 22, 2, 14, 49, 
	2, 14, 50, 2, 14, 51, 2, 14, 
	52, 2, 15, 49, 2, 15, 50, 2, 
	15, 51, 2, 15, 52, 2, 16, 49, 
	2, 16, 50, 2, 16, 51, 2, 16, 
	52, 2, 17, 49, 2, 17, 50, 2, 
	17, 51, 2, 17, 52, 2, 18, 49, 
	2, 18, 50, 2, 18, 51, 2, 18, 
	52, 2, 19, 49, 2, 19, 50, 2, 
	19, 51, 2, 19, 52, 2, 26, 28, 
	2, 26, 29, 2, 26, 34, 2, 27, 
	49, 2, 27, 50, 2, 27, 51, 2, 
	27, 52, 2, 28, 49, 2, 28, 50, 
	2, 28, 51, 2, 28, 52, 2, 29, 
	49, 2, 29, 50, 2, 29, 51, 2, 
	29, 52, 3, 26, 28, 34, 3, 26, 
	29, 34, 
}

var _cte_key_offsets []int16 = []int16{
	0, 0, 17, 20, 22, 25, 27, 29, 
	32, 33, 35, 37, 38, 40, 42, 44, 
	53, 54, 56, 60, 62, 67, 69, 71, 
	75, 79, 84, 88, 90, 91, 92, 93, 
	95, 97, 99, 100, 102, 104, 106, 115, 
	120, 121, 122, 123, 124, 126, 127, 128, 
	129, 130, 131, 132, 133, 134, 135, 136, 
	138, 140, 142, 144, 149, 151, 153, 155, 
	159, 162, 180, 183, 192, 194, 197, 199, 
	207, 209, 212, 213, 215, 217, 218, 220, 
	222, 229, 231, 239, 248, 262, 270, 278, 
	286, 294, 302, 310, 318, 324, 330, 331, 
	333, 341, 345, 347, 354, 359, 376, 381, 
	393, 395, 402, 404, 411, 415, 425, 429, 
	434, 438, 440, 447, 448, 449, 450, 455, 
	457, 470, 480, 482, 484, 485, 487, 489, 
	496, 498, 506, 515, 529, 537, 545, 553, 
	561, 569, 577, 585, 591, 601, 606, 607, 
	608, 609, 610, 612, 613, 618, 619, 620, 
	621, 622, 627, 628, 629, 630, 631, 646, 
	649, 659, 665, 667, 684, 687, 696, 698, 
	701, 703, 711, 713, 716, 717, 719, 721, 
	722, 724, 726, 733, 735, 743, 752, 766, 
	774, 782, 790, 798, 806, 814, 822, 828, 
	834, 835, 837, 845, 849, 851, 858, 863, 
	868, 880, 882, 889, 891, 898, 902, 912, 
	916, 921, 925, 927, 934, 935, 936, 937, 
	942, 944, 957, 967, 969, 971, 972, 974, 
	976, 983, 985, 993, 1002, 1016, 1024, 1032, 
	1040, 1048, 1056, 1064, 1072, 1078, 1088, 1093, 
	1094, 1095, 1096, 1097, 1099, 1100, 1105, 1106, 
	1107, 1108, 1109, 1114, 1115, 1116, 1117, 1118, 
	1120, 1123, 1125, 1133, 1137, 1140, 1141, 1143, 
	1145, 1146, 1148, 1150, 1157, 1159, 1167, 1178, 
	1193, 1209, 1217, 1225, 1233, 1241, 1249, 1257, 
	1265, 1271, 1277, 1278, 1280, 1289, 1293, 1295, 
	1303, 1317, 1322, 1335, 1337, 1345, 1347, 1355, 
	1359, 1370, 1374, 1379, 1383, 1385, 1393, 1394, 
	1395, 1396, 1402, 1404, 1418, 1429, 1431, 1433, 
	1434, 1436, 1438, 1445, 1447, 1455, 1466, 1481, 
	1497, 1505, 1513, 1521, 1529, 1537, 1545, 1553, 
	1559, 1570, 1573, 1574, 1575, 1576, 1577, 1578, 
	1579, 1580, 1581, 1596, 1599, 1609, 1615, 1617, 
	1634, 1637, 1646, 1648, 1651, 1653, 1661, 1663, 
	1666, 1667, 1669, 1671, 1672, 1674, 1676, 1683, 
	1685, 1693, 1702, 1716, 1724, 1732, 1740, 1748, 
	1756, 1764, 1772, 1778, 1784, 1785, 1787, 1795, 
	1799, 1801, 1808, 1813, 1818, 1830, 1832, 1839, 
	1841, 1848, 1852, 1862, 1866, 1871, 1875, 1877, 
	1884, 1885, 1886, 1887, 1892, 1894, 1907, 1917, 
	1919, 1921, 1922, 1924, 1926, 1933, 1935, 1943, 
	1952, 1966, 1974, 1982, 1990, 1998, 2006, 2014, 
	2022, 2028, 2038, 2043, 2044, 2045, 2046, 2047, 
	2049, 2050, 2055, 2056, 2057, 2058, 2059, 2064, 
	2065, 2066, 2067, 2068, 2070, 2073, 2075, 2083, 
	2087, 2090, 2091, 2093, 2095, 2096, 2098, 2100, 
	2107, 2109, 2117, 2128, 2143, 2159, 2167, 2175, 
	2183, 2191, 2199, 2207, 2215, 2221, 2227, 2228, 
	2230, 2239, 2243, 2245, 2253, 2267, 2272, 2285, 
	2287, 2295, 2297, 2305, 2309, 2320, 2324, 2329, 
	2333, 2335, 2343, 2344, 2345, 2346, 2352, 2354, 
	2368, 2379, 2381, 2383, 2384, 2386, 2388, 2395, 
	2397, 2405, 2416, 2431, 2447, 2455, 2463, 2471, 
	2479, 2487, 2495, 2503, 2509, 2520, 2523, 2524, 
	2525, 2526, 2527, 2528, 2529, 2530, 2531, 2546, 
	2549, 2559, 2565, 2567, 2584, 2587, 2596, 2598, 
	2601, 2603, 2611, 2613, 2616, 2617, 2619, 2621, 
	2622, 2624, 2626, 2633, 2635, 2643, 2652, 2666, 
	2674, 2682, 2690, 2698, 2706, 2714, 2722, 2728, 
	2734, 2735, 2737, 2745, 2749, 2751, 2758, 2763, 
	2768, 2780, 2782, 2789, 2791, 2798, 2802, 2812, 
	2816, 2821, 2825, 2827, 2834, 2835, 2836, 2837, 
	2842, 2844, 2857, 2867, 2869, 2871, 2872, 2874, 
	2876, 2883, 2885, 2893, 2902, 2916, 2924, 2932, 
	2940, 2948, 2956, 2964, 2972, 2978, 2988, 2993, 
	2994, 2995, 2996, 2997, 2999, 3000, 3005, 3006, 
	3007, 3008, 3009, 3014, 3015, 3016, 3017, 3018, 
	3020, 3023, 3025, 3033, 3037, 3040, 3041, 3043, 
	3045, 3046, 3048, 3050, 3057, 3059, 3067, 3078, 
	3093, 3109, 3117, 3125, 3133, 3141, 3149, 3157, 
	3165, 3171, 3177, 3178, 3180, 3189, 3193, 3195, 
	3203, 3217, 3222, 3235, 3237, 3245, 3247, 3255, 
	3259, 3270, 3274, 3279, 3283, 3285, 3293, 3294, 
	3295, 3296, 3302, 3304, 3318, 3329, 3331, 3333, 
	3334, 3336, 3338, 3345, 3347, 3355, 3366, 3381, 
	3397, 3405, 3413, 3421, 3429, 3437, 3445, 3453, 
	3459, 3470, 3473, 3474, 3475, 3476, 3477, 3478, 
	3479, 3480, 3481, 3489, 3493, 3500, 3506, 3513, 
	3526, 3533, 3540, 3547, 3554, 3561, 3568, 3575, 
	3580, 3585, 3592, 3598, 3609, 3615, 3621, 3630, 
	3636, 3640, 3652, 3661, 3667, 3674, 3687, 3694, 
	3701, 3708, 3715, 3722, 3729, 3736, 3741, 3750, 
	3754, 3758, 3758, 3760, 3760, 3773, 3773, 3773, 
	3773, 3773, 
}

var _cte_trans_keys []byte = []byte{
	0, 13, 32, 34, 40, 45, 47, 48, 
	60, 64, 91, 117, 123, 9, 10, 49, 
	57, 0, 48, 57, 48, 57, 45, 48, 
	57, 48, 57, 48, 57, 58, 48, 57, 
	58, 48, 57, 48, 57, 58, 48, 57, 
	48, 57, 48, 57, 43, 45, 95, 47, 
	57, 65, 90, 97, 122, 45, 48, 57, 
	43, 45, 48, 57, 48, 57, 0, 48, 
	64, 49, 57, 48, 49, 48, 55, 48, 
	57, 97, 102, 48, 57, 97, 102, 112, 
	48, 57, 97, 102, 43, 45, 48, 57, 
	48, 57, 105, 110, 102, 42, 47, 48, 
	57, 48, 57, 58, 48, 57, 48, 57, 
	48, 57, 43, 45, 95, 47, 57, 65, 
	90, 97, 122, 102, 105, 110, 115, 116, 
	97, 108, 115, 101, 97, 105, 110, 108, 
	110, 97, 110, 114, 117, 101, 34, 10, 
	42, 47, 42, 47, 42, 47, 34, 92, 
	34, 92, 110, 114, 116, 128, 191, 128, 
	191, 128, 191, 32, 33, 35, 126, 34, 
	32, 126, 0, 13, 32, 34, 40, 45, 
	47, 48, 60, 64, 91, 93, 117, 123, 
	9, 10, 49, 57, 0, 48, 57, 13, 
	32, 45, 46, 93, 9, 10, 48, 57, 
	48, 57, 45, 48, 57, 48, 57, 13, 
	32, 47, 93, 9, 10, 48, 57, 48, 
	57, 58, 48, 57, 58, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 13, 32, 
	46, 47, 93, 9, 10, 48, 57, 13, 
	32, 47, 93, 9, 10, 48, 57, 43, 
	45, 95, 47, 57, 65, 90, 97, 122, 
	13, 32, 43, 45, 93, 95, 9, 10, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	47, 93, 9, 10, 48, 57, 13, 32, 
	47, 93, 9, 10, 48, 57, 13, 32, 
	47, 93, 9, 10, 48, 57, 13, 32, 
	47, 93, 9, 10, 48, 57, 13, 32, 
	47, 93, 9, 10, 48, 57, 13, 32, 
	47, 93, 9, 10, 48, 57, 13, 32, 
	47, 93, 9, 10, 48, 57, 13, 32, 
	47, 93, 9, 10, 13, 32, 47, 93, 
	9, 10, 45, 48, 57, 13, 32, 93, 
	101, 9, 10, 48, 57, 43, 45, 48, 
	57, 48, 57, 13, 32, 93, 9, 10, 
	48, 57, 13, 32, 93, 9, 10, 0, 
	13, 32, 34, 40, 45, 47, 48, 60, 
	64, 91, 117, 123, 9, 10, 49, 57, 
	0, 48, 64, 49, 57, 13, 32, 45, 
	46, 93, 98, 111, 120, 9, 10, 48, 
	57, 48, 49, 13, 32, 93, 9, 10, 
	48, 49, 48, 55, 13, 32, 93, 9, 
	10, 48, 55, 48, 57, 97, 102, 13, 
	32, 46, 93, 9, 10, 48, 57, 97, 
	102, 48, 57, 97, 102, 112, 48, 57, 
	97, 102, 43, 45, 48, 57, 48, 57, 
	13, 32, 93, 9, 10, 48, 57, 105, 
	110, 102, 13, 32, 93, 9, 10, 42, 
	47, 13, 32, 45, 46, 58, 93, 98, 
	111, 120, 9, 10, 48, 57, 13, 32, 
	45, 46, 58, 93, 9, 10, 48, 57, 
	48, 57, 48, 57, 58, 48, 57, 48, 
	57, 13, 32, 46, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	48, 57, 43, 45, 95, 47, 57, 65, 
	90, 97, 122, 13, 32, 43, 45, 93, 
	95, 9, 10, 47, 57, 65, 90, 97, 
	122, 13, 32, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 13, 
	32, 45, 46, 58, 93, 9, 10, 48, 
	57, 102, 105, 110, 115, 116, 97, 108, 
	115, 101, 97, 105, 110, 13, 32, 93, 
	9, 10, 108, 110, 97, 110, 13, 32, 
	93, 9, 10, 114, 117, 101, 34, 0, 
	13, 32, 34, 40, 45, 47, 48, 64, 
	117, 125, 9, 10, 49, 57, 0, 48, 
	57, 13, 32, 45, 46, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 42, 47, 0, 13, 32, 34, 40, 
	45, 47, 48, 60, 64, 91, 117, 123, 
	9, 10, 49, 57, 0, 48, 57, 13, 
	32, 45, 46, 125, 9, 10, 48, 57, 
	48, 57, 45, 48, 57, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 48, 
	57, 58, 48, 57, 58, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 13, 32, 
	46, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 43, 
	45, 95, 47, 57, 65, 90, 97, 122, 
	13, 32, 43, 45, 95, 125, 9, 10, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 13, 32, 47, 125, 
	9, 10, 45, 48, 57, 13, 32, 101, 
	125, 9, 10, 48, 57, 43, 45, 48, 
	57, 48, 57, 13, 32, 125, 9, 10, 
	48, 57, 13, 32, 125, 9, 10, 0, 
	48, 64, 49, 57, 13, 32, 45, 46, 
	98, 111, 120, 125, 9, 10, 48, 57, 
	48, 49, 13, 32, 125, 9, 10, 48, 
	49, 48, 55, 13, 32, 125, 9, 10, 
	48, 55, 48, 57, 97, 102, 13, 32, 
	46, 125, 9, 10, 48, 57, 97, 102, 
	48, 57, 97, 102, 112, 48, 57, 97, 
	102, 43, 45, 48, 57, 48, 57, 13, 
	32, 125, 9, 10, 48, 57, 105, 110, 
	102, 13, 32, 125, 9, 10, 42, 47, 
	13, 32, 45, 46, 58, 98, 111, 120, 
	125, 9, 10, 48, 57, 13, 32, 45, 
	46, 58, 125, 9, 10, 48, 57, 48, 
	57, 48, 57, 58, 48, 57, 48, 57, 
	13, 32, 46, 47, 125, 9, 10, 48, 
	57, 13, 32, 47, 125, 9, 10, 48, 
	57, 43, 45, 95, 47, 57, 65, 90, 
	97, 122, 13, 32, 43, 45, 95, 125, 
	9, 10, 47, 57, 65, 90, 97, 122, 
	13, 32, 47, 125, 9, 10, 48, 57, 
	13, 32, 47, 125, 9, 10, 48, 57, 
	13, 32, 47, 125, 9, 10, 48, 57, 
	13, 32, 47, 125, 9, 10, 48, 57, 
	13, 32, 47, 125, 9, 10, 48, 57, 
	13, 32, 47, 125, 9, 10, 48, 57, 
	13, 32, 47, 125, 9, 10, 48, 57, 
	13, 32, 47, 125, 9, 10, 13, 32, 
	45, 46, 58, 125, 9, 10, 48, 57, 
	102, 105, 110, 115, 116, 97, 108, 115, 
	101, 97, 105, 110, 13, 32, 125, 9, 
	10, 108, 110, 97, 110, 13, 32, 125, 
	9, 10, 114, 117, 101, 34, 48, 57, 
	45, 48, 57, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 42, 47, 48, 
	57, 58, 48, 57, 58, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 13, 32, 
	46, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 42, 
	43, 45, 47, 95, 48, 57, 65, 90, 
	97, 122, 13, 32, 43, 45, 47, 61, 
	95, 9, 10, 48, 57, 65, 90, 97, 
	122, 13, 32, 42, 43, 45, 47, 61, 
	95, 9, 10, 48, 57, 65, 90, 97, 
	122, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 13, 
	32, 47, 61, 9, 10, 45, 48, 57, 
	13, 32, 47, 61, 101, 9, 10, 48, 
	57, 43, 45, 48, 57, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 0, 
	13, 32, 34, 40, 45, 47, 48, 64, 
	117, 9, 10, 49, 57, 0, 48, 64, 
	49, 57, 13, 32, 45, 46, 47, 61, 
	98, 111, 120, 9, 10, 48, 57, 48, 
	49, 13, 32, 47, 61, 9, 10, 48, 
	49, 48, 55, 13, 32, 47, 61, 9, 
	10, 48, 55, 48, 57, 97, 102, 13, 
	32, 46, 47, 61, 9, 10, 48, 57, 
	97, 102, 48, 57, 97, 102, 112, 48, 
	57, 97, 102, 43, 45, 48, 57, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 105, 110, 102, 13, 32, 47, 61, 
	9, 10, 42, 47, 13, 32, 45, 46, 
	47, 58, 61, 98, 111, 120, 9, 10, 
	48, 57, 13, 32, 45, 46, 47, 58, 
	61, 9, 10, 48, 57, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 13, 32, 
	46, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 42, 
	43, 45, 47, 95, 48, 57, 65, 90, 
	97, 122, 13, 32, 43, 45, 47, 61, 
	95, 9, 10, 48, 57, 65, 90, 97, 
	122, 13, 32, 42, 43, 45, 47, 61, 
	95, 9, 10, 48, 57, 65, 90, 97, 
	122, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 13, 
	32, 45, 46, 47, 58, 61, 9, 10, 
	48, 57, 102, 105, 116, 97, 108, 115, 
	101, 114, 117, 101, 34, 0, 13, 32, 
	34, 40, 45, 47, 48, 62, 64, 117, 
	9, 10, 49, 57, 0, 48, 57, 13, 
	32, 45, 46, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 42, 
	47, 0, 13, 32, 34, 40, 45, 47, 
	48, 60, 64, 91, 117, 123, 9, 10, 
	49, 57, 0, 48, 57, 13, 32, 45, 
	46, 62, 9, 10, 48, 57, 48, 57, 
	45, 48, 57, 48, 57, 13, 32, 47, 
	62, 9, 10, 48, 57, 48, 57, 58, 
	48, 57, 58, 48, 57, 48, 57, 58, 
	48, 57, 48, 57, 13, 32, 46, 47, 
	62, 9, 10, 48, 57, 13, 32, 47, 
	62, 9, 10, 48, 57, 43, 45, 95, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	43, 45, 62, 95, 9, 10, 47, 57, 
	65, 90, 97, 122, 13, 32, 47, 62, 
	9, 10, 48, 57, 13, 32, 47, 62, 
	9, 10, 48, 57, 13, 32, 47, 62, 
	9, 10, 48, 57, 13, 32, 47, 62, 
	9, 10, 48, 57, 13, 32, 47, 62, 
	9, 10, 48, 57, 13, 32, 47, 62, 
	9, 10, 48, 57, 13, 32, 47, 62, 
	9, 10, 48, 57, 13, 32, 47, 62, 
	9, 10, 13, 32, 47, 62, 9, 10, 
	45, 48, 57, 13, 32, 62, 101, 9, 
	10, 48, 57, 43, 45, 48, 57, 48, 
	57, 13, 32, 62, 9, 10, 48, 57, 
	13, 32, 62, 9, 10, 0, 48, 64, 
	49, 57, 13, 32, 45, 46, 62, 98, 
	111, 120, 9, 10, 48, 57, 48, 49, 
	13, 32, 62, 9, 10, 48, 49, 48, 
	55, 13, 32, 62, 9, 10, 48, 55, 
	48, 57, 97, 102, 13, 32, 46, 62, 
	9, 10, 48, 57, 97, 102, 48, 57, 
	97, 102, 112, 48, 57, 97, 102, 43, 
	45, 48, 57, 48, 57, 13, 32, 62, 
	9, 10, 48, 57, 105, 110, 102, 13, 
	32, 62, 9, 10, 42, 47, 13, 32, 
	45, 46, 58, 62, 98, 111, 120, 9, 
	10, 48, 57, 13, 32, 45, 46, 58, 
	62, 9, 10, 48, 57, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 13, 32, 
	46, 47, 62, 9, 10, 48, 57, 13, 
	32, 47, 62, 9, 10, 48, 57, 43, 
	45, 95, 47, 57, 65, 90, 97, 122, 
	13, 32, 43, 45, 62, 95, 9, 10, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	47, 62, 9, 10, 48, 57, 13, 32, 
	47, 62, 9, 10, 48, 57, 13, 32, 
	47, 62, 9, 10, 48, 57, 13, 32, 
	47, 62, 9, 10, 48, 57, 13, 32, 
	47, 62, 9, 10, 48, 57, 13, 32, 
	47, 62, 9, 10, 48, 57, 13, 32, 
	47, 62, 9, 10, 48, 57, 13, 32, 
	47, 62, 9, 10, 13, 32, 45, 46, 
	58, 62, 9, 10, 48, 57, 102, 105, 
	110, 115, 116, 97, 108, 115, 101, 97, 
	105, 110, 13, 32, 62, 9, 10, 108, 
	110, 97, 110, 13, 32, 62, 9, 10, 
	114, 117, 101, 34, 48, 57, 45, 48, 
	57, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 42, 47, 48, 57, 58, 
	48, 57, 58, 48, 57, 48, 57, 58, 
	48, 57, 48, 57, 13, 32, 46, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 42, 43, 45, 
	47, 95, 48, 57, 65, 90, 97, 122, 
	13, 32, 43, 45, 47, 61, 95, 9, 
	10, 48, 57, 65, 90, 97, 122, 13, 
	32, 42, 43, 45, 47, 61, 95, 9, 
	10, 48, 57, 65, 90, 97, 122, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 13, 32, 47, 
	61, 9, 10, 45, 48, 57, 13, 32, 
	47, 61, 101, 9, 10, 48, 57, 43, 
	45, 48, 57, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 0, 13, 32, 
	34, 40, 45, 47, 48, 64, 117, 9, 
	10, 49, 57, 0, 48, 64, 49, 57, 
	13, 32, 45, 46, 47, 61, 98, 111, 
	120, 9, 10, 48, 57, 48, 49, 13, 
	32, 47, 61, 9, 10, 48, 49, 48, 
	55, 13, 32, 47, 61, 9, 10, 48, 
	55, 48, 57, 97, 102, 13, 32, 46, 
	47, 61, 9, 10, 48, 57, 97, 102, 
	48, 57, 97, 102, 112, 48, 57, 97, 
	102, 43, 45, 48, 57, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 105, 
	110, 102, 13, 32, 47, 61, 9, 10, 
	42, 47, 13, 32, 45, 46, 47, 58, 
	61, 98, 111, 120, 9, 10, 48, 57, 
	13, 32, 45, 46, 47, 58, 61, 9, 
	10, 48, 57, 48, 57, 48, 57, 58, 
	48, 57, 48, 57, 13, 32, 46, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 42, 43, 45, 
	47, 95, 48, 57, 65, 90, 97, 122, 
	13, 32, 43, 45, 47, 61, 95, 9, 
	10, 48, 57, 65, 90, 97, 122, 13, 
	32, 42, 43, 45, 47, 61, 95, 9, 
	10, 48, 57, 65, 90, 97, 122, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 13, 32, 45, 
	46, 47, 58, 61, 9, 10, 48, 57, 
	102, 105, 116, 97, 108, 115, 101, 114, 
	117, 101, 34, 0, 13, 32, 34, 40, 
	41, 45, 47, 48, 64, 117, 9, 10, 
	49, 57, 0, 48, 57, 13, 32, 45, 
	46, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 42, 47, 0, 
	13, 32, 34, 40, 45, 47, 48, 60, 
	64, 91, 117, 123, 9, 10, 49, 57, 
	0, 48, 57, 13, 32, 41, 45, 46, 
	9, 10, 48, 57, 48, 57, 45, 48, 
	57, 48, 57, 13, 32, 41, 47, 9, 
	10, 48, 57, 48, 57, 58, 48, 57, 
	58, 48, 57, 48, 57, 58, 48, 57, 
	48, 57, 13, 32, 41, 46, 47, 9, 
	10, 48, 57, 13, 32, 41, 47, 9, 
	10, 48, 57, 43, 45, 95, 47, 57, 
	65, 90, 97, 122, 13, 32, 41, 43, 
	45, 95, 9, 10, 47, 57, 65, 90, 
	97, 122, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	13, 32, 41, 47, 9, 10, 45, 48, 
	57, 13, 32, 41, 101, 9, 10, 48, 
	57, 43, 45, 48, 57, 48, 57, 13, 
	32, 41, 9, 10, 48, 57, 13, 32, 
	41, 9, 10, 0, 48, 64, 49, 57, 
	13, 32, 41, 45, 46, 98, 111, 120, 
	9, 10, 48, 57, 48, 49, 13, 32, 
	41, 9, 10, 48, 49, 48, 55, 13, 
	32, 41, 9, 10, 48, 55, 48, 57, 
	97, 102, 13, 32, 41, 46, 9, 10, 
	48, 57, 97, 102, 48, 57, 97, 102, 
	112, 48, 57, 97, 102, 43, 45, 48, 
	57, 48, 57, 13, 32, 41, 9, 10, 
	48, 57, 105, 110, 102, 13, 32, 41, 
	9, 10, 42, 47, 13, 32, 41, 45, 
	46, 58, 98, 111, 120, 9, 10, 48, 
	57, 13, 32, 41, 45, 46, 58, 9, 
	10, 48, 57, 48, 57, 48, 57, 58, 
	48, 57, 48, 57, 13, 32, 41, 46, 
	47, 9, 10, 48, 57, 13, 32, 41, 
	47, 9, 10, 48, 57, 43, 45, 95, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	41, 43, 45, 95, 9, 10, 47, 57, 
	65, 90, 97, 122, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 13, 32, 41, 45, 46, 58, 
	9, 10, 48, 57, 102, 105, 110, 115, 
	116, 97, 108, 115, 101, 97, 105, 110, 
	13, 32, 41, 9, 10, 108, 110, 97, 
	110, 13, 32, 41, 9, 10, 114, 117, 
	101, 34, 48, 57, 45, 48, 57, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 42, 47, 48, 57, 58, 48, 57, 
	58, 48, 57, 48, 57, 58, 48, 57, 
	48, 57, 13, 32, 46, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 42, 43, 45, 47, 95, 
	48, 57, 65, 90, 97, 122, 13, 32, 
	43, 45, 47, 61, 95, 9, 10, 48, 
	57, 65, 90, 97, 122, 13, 32, 42, 
	43, 45, 47, 61, 95, 9, 10, 48, 
	57, 65, 90, 97, 122, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 13, 32, 47, 61, 9, 
	10, 45, 48, 57, 13, 32, 47, 61, 
	101, 9, 10, 48, 57, 43, 45, 48, 
	57, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 0, 13, 32, 34, 40, 
	45, 47, 48, 64, 117, 9, 10, 49, 
	57, 0, 48, 64, 49, 57, 13, 32, 
	45, 46, 47, 61, 98, 111, 120, 9, 
	10, 48, 57, 48, 49, 13, 32, 47, 
	61, 9, 10, 48, 49, 48, 55, 13, 
	32, 47, 61, 9, 10, 48, 55, 48, 
	57, 97, 102, 13, 32, 46, 47, 61, 
	9, 10, 48, 57, 97, 102, 48, 57, 
	97, 102, 112, 48, 57, 97, 102, 43, 
	45, 48, 57, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 105, 110, 102, 
	13, 32, 47, 61, 9, 10, 42, 47, 
	13, 32, 45, 46, 47, 58, 61, 98, 
	111, 120, 9, 10, 48, 57, 13, 32, 
	45, 46, 47, 58, 61, 9, 10, 48, 
	57, 48, 57, 48, 57, 58, 48, 57, 
	48, 57, 13, 32, 46, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 42, 43, 45, 47, 95, 
	48, 57, 65, 90, 97, 122, 13, 32, 
	43, 45, 47, 61, 95, 9, 10, 48, 
	57, 65, 90, 97, 122, 13, 32, 42, 
	43, 45, 47, 61, 95, 9, 10, 48, 
	57, 65, 90, 97, 122, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 13, 32, 45, 46, 47, 
	58, 61, 9, 10, 48, 57, 102, 105, 
	116, 97, 108, 115, 101, 114, 117, 101, 
	34, 13, 32, 45, 46, 9, 10, 48, 
	57, 13, 32, 9, 10, 13, 32, 47, 
	9, 10, 48, 57, 13, 32, 46, 47, 
	9, 10, 13, 32, 47, 9, 10, 48, 
	57, 13, 32, 43, 45, 95, 9, 10, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	47, 9, 10, 48, 57, 13, 32, 47, 
	9, 10, 48, 57, 13, 32, 47, 9, 
	10, 48, 57, 13, 32, 47, 9, 10, 
	48, 57, 13, 32, 47, 9, 10, 48, 
	57, 13, 32, 47, 9, 10, 48, 57, 
	13, 32, 47, 9, 10, 48, 57, 13, 
	32, 47, 9, 10, 13, 32, 47, 9, 
	10, 13, 32, 101, 9, 10, 48, 57, 
	13, 32, 9, 10, 48, 57, 13, 32, 
	45, 46, 98, 111, 120, 9, 10, 48, 
	57, 13, 32, 9, 10, 48, 49, 13, 
	32, 9, 10, 48, 55, 13, 32, 46, 
	9, 10, 48, 57, 97, 102, 13, 32, 
	9, 10, 48, 57, 13, 32, 9, 10, 
	13, 32, 45, 46, 58, 98, 111, 120, 
	9, 10, 48, 57, 13, 32, 45, 46, 
	58, 9, 10, 48, 57, 13, 32, 46, 
	47, 9, 10, 13, 32, 47, 9, 10, 
	48, 57, 13, 32, 43, 45, 95, 9, 
	10, 47, 57, 65, 90, 97, 122, 13, 
	32, 47, 9, 10, 48, 57, 13, 32, 
	47, 9, 10, 48, 57, 13, 32, 47, 
	9, 10, 48, 57, 13, 32, 47, 9, 
	10, 48, 57, 13, 32, 47, 9, 10, 
	48, 57, 13, 32, 47, 9, 10, 48, 
	57, 13, 32, 47, 9, 10, 48, 57, 
	13, 32, 47, 9, 10, 13, 32, 45, 
	46, 58, 9, 10, 48, 57, 13, 32, 
	9, 10, 13, 32, 9, 10, 42, 47, 
	95, 48, 57, 65, 90, 97, 122, 194, 
	223, 224, 239, 240, 244, 
}

var _cte_single_lengths []byte = []byte{
	0, 13, 1, 0, 1, 0, 0, 1, 
	1, 0, 0, 1, 0, 0, 0, 3, 
	1, 0, 2, 0, 3, 0, 0, 0, 
	0, 1, 2, 0, 1, 1, 1, 2, 
	0, 0, 1, 0, 0, 0, 3, 5, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 2, 2, 5, 0, 0, 0, 0, 
	1, 14, 1, 5, 0, 1, 0, 4, 
	0, 1, 1, 0, 0, 1, 0, 0, 
	5, 0, 4, 3, 6, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 0, 
	4, 2, 0, 3, 3, 13, 3, 8, 
	0, 3, 0, 3, 0, 4, 0, 1, 
	2, 0, 3, 1, 1, 1, 3, 2, 
	9, 6, 0, 0, 1, 0, 0, 5, 
	0, 4, 3, 6, 4, 4, 4, 4, 
	4, 4, 4, 4, 6, 5, 1, 1, 
	1, 1, 2, 1, 3, 1, 1, 1, 
	1, 3, 1, 1, 1, 1, 11, 1, 
	6, 4, 2, 13, 1, 5, 0, 1, 
	0, 4, 0, 1, 1, 0, 0, 1, 
	0, 0, 5, 0, 4, 3, 6, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	1, 0, 4, 2, 0, 3, 3, 3, 
	8, 0, 3, 0, 3, 0, 4, 0, 
	1, 2, 0, 3, 1, 1, 1, 3, 
	2, 9, 6, 0, 0, 1, 0, 0, 
	5, 0, 4, 3, 6, 4, 4, 4, 
	4, 4, 4, 4, 4, 6, 5, 1, 
	1, 1, 1, 2, 1, 3, 1, 1, 
	1, 1, 3, 1, 1, 1, 1, 0, 
	1, 0, 4, 2, 1, 1, 0, 0, 
	1, 0, 0, 5, 0, 4, 5, 7, 
	8, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 1, 0, 5, 2, 0, 4, 
	10, 3, 9, 0, 4, 0, 4, 0, 
	5, 0, 1, 2, 0, 4, 1, 1, 
	1, 4, 2, 10, 7, 0, 0, 1, 
	0, 0, 5, 0, 4, 5, 7, 8, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	7, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 11, 1, 6, 4, 2, 13, 
	1, 5, 0, 1, 0, 4, 0, 1, 
	1, 0, 0, 1, 0, 0, 5, 0, 
	4, 3, 6, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 1, 0, 4, 2, 
	0, 3, 3, 3, 8, 0, 3, 0, 
	3, 0, 4, 0, 1, 2, 0, 3, 
	1, 1, 1, 3, 2, 9, 6, 0, 
	0, 1, 0, 0, 5, 0, 4, 3, 
	6, 4, 4, 4, 4, 4, 4, 4, 
	4, 6, 5, 1, 1, 1, 1, 2, 
	1, 3, 1, 1, 1, 1, 3, 1, 
	1, 1, 1, 0, 1, 0, 4, 2, 
	1, 1, 0, 0, 1, 0, 0, 5, 
	0, 4, 5, 7, 8, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 0, 
	5, 2, 0, 4, 10, 3, 9, 0, 
	4, 0, 4, 0, 5, 0, 1, 2, 
	0, 4, 1, 1, 1, 4, 2, 10, 
	7, 0, 0, 1, 0, 0, 5, 0, 
	4, 5, 7, 8, 4, 4, 4, 4, 
	4, 4, 4, 4, 7, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 11, 1, 
	6, 4, 2, 13, 1, 5, 0, 1, 
	0, 4, 0, 1, 1, 0, 0, 1, 
	0, 0, 5, 0, 4, 3, 6, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	1, 0, 4, 2, 0, 3, 3, 3, 
	8, 0, 3, 0, 3, 0, 4, 0, 
	1, 2, 0, 3, 1, 1, 1, 3, 
	2, 9, 6, 0, 0, 1, 0, 0, 
	5, 0, 4, 3, 6, 4, 4, 4, 
	4, 4, 4, 4, 4, 6, 5, 1, 
	1, 1, 1, 2, 1, 3, 1, 1, 
	1, 1, 3, 1, 1, 1, 1, 0, 
	1, 0, 4, 2, 1, 1, 0, 0, 
	1, 0, 0, 5, 0, 4, 5, 7, 
	8, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 1, 0, 5, 2, 0, 4, 
	10, 3, 9, 0, 4, 0, 4, 0, 
	5, 0, 1, 2, 0, 4, 1, 1, 
	1, 4, 2, 10, 7, 0, 0, 1, 
	0, 0, 5, 0, 4, 5, 7, 8, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	7, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 4, 2, 3, 4, 3, 5, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 2, 7, 2, 2, 3, 2, 
	2, 8, 5, 4, 3, 5, 3, 3, 
	3, 3, 3, 3, 3, 3, 5, 2, 
	2, 0, 2, 0, 1, 0, 0, 0, 
	0, 0, 
}

var _cte_range_lengths []byte = []byte{
	0, 2, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 0, 1, 1, 1, 3, 
	0, 1, 1, 1, 1, 1, 1, 2, 
	2, 2, 1, 1, 0, 0, 0, 0, 
	1, 1, 0, 1, 1, 1, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 2, 
	1, 2, 1, 2, 1, 1, 1, 2, 
	1, 1, 0, 1, 1, 0, 1, 1, 
	1, 1, 2, 3, 4, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 0, 1, 
	2, 1, 1, 2, 1, 2, 1, 2, 
	1, 2, 1, 2, 2, 3, 2, 2, 
	1, 1, 2, 0, 0, 0, 1, 0, 
	2, 2, 1, 1, 0, 1, 1, 1, 
	1, 2, 3, 4, 2, 2, 2, 2, 
	2, 2, 2, 1, 2, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 2, 1, 
	2, 1, 0, 2, 1, 2, 1, 1, 
	1, 2, 1, 1, 0, 1, 1, 0, 
	1, 1, 1, 1, 2, 3, 4, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0, 1, 2, 1, 1, 2, 1, 1, 
	2, 1, 2, 1, 2, 2, 3, 2, 
	2, 1, 1, 2, 0, 0, 0, 1, 
	0, 2, 2, 1, 1, 0, 1, 1, 
	1, 1, 2, 3, 4, 2, 2, 2, 
	2, 2, 2, 2, 1, 2, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 1, 
	1, 1, 2, 1, 1, 0, 1, 1, 
	0, 1, 1, 1, 1, 2, 3, 4, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0, 1, 2, 1, 1, 2, 
	2, 1, 2, 1, 2, 1, 2, 2, 
	3, 2, 2, 1, 1, 2, 0, 0, 
	0, 1, 0, 2, 2, 1, 1, 0, 
	1, 1, 1, 1, 2, 3, 4, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	2, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 1, 2, 1, 0, 2, 
	1, 2, 1, 1, 1, 2, 1, 1, 
	0, 1, 1, 0, 1, 1, 1, 1, 
	2, 3, 4, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 0, 1, 2, 1, 
	1, 2, 1, 1, 2, 1, 2, 1, 
	2, 2, 3, 2, 2, 1, 1, 2, 
	0, 0, 0, 1, 0, 2, 2, 1, 
	1, 0, 1, 1, 1, 1, 2, 3, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	1, 2, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 1, 1, 1, 2, 1, 
	1, 0, 1, 1, 0, 1, 1, 1, 
	1, 2, 3, 4, 4, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 0, 1, 
	2, 1, 1, 2, 2, 1, 2, 1, 
	2, 1, 2, 2, 3, 2, 2, 1, 
	1, 2, 0, 0, 0, 1, 0, 2, 
	2, 1, 1, 0, 1, 1, 1, 1, 
	2, 3, 4, 4, 2, 2, 2, 2, 
	2, 2, 2, 1, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 2, 1, 
	2, 1, 0, 2, 1, 2, 1, 1, 
	1, 2, 1, 1, 0, 1, 1, 0, 
	1, 1, 1, 1, 2, 3, 4, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0, 1, 2, 1, 1, 2, 1, 1, 
	2, 1, 2, 1, 2, 2, 3, 2, 
	2, 1, 1, 2, 0, 0, 0, 1, 
	0, 2, 2, 1, 1, 0, 1, 1, 
	1, 1, 2, 3, 4, 2, 2, 2, 
	2, 2, 2, 2, 1, 2, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 1, 
	1, 1, 2, 1, 1, 0, 1, 1, 
	0, 1, 1, 1, 1, 2, 3, 4, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0, 1, 2, 1, 1, 2, 
	2, 1, 2, 1, 2, 1, 2, 2, 
	3, 2, 2, 1, 1, 2, 0, 0, 
	0, 1, 0, 2, 2, 1, 1, 0, 
	1, 1, 1, 1, 2, 3, 4, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	2, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 1, 2, 1, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 2, 2, 2, 2, 2, 3, 2, 
	1, 2, 2, 1, 2, 4, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 1, 
	1, 0, 0, 0, 6, 0, 0, 0, 
	0, 0, 
}

var _cte_index_offsets []int16 = []int16{
	0, 0, 16, 19, 21, 24, 26, 28, 
	31, 33, 35, 37, 39, 41, 43, 45, 
	52, 54, 56, 60, 62, 67, 69, 71, 
	74, 77, 81, 85, 87, 89, 91, 93, 
	96, 98, 100, 102, 104, 106, 108, 115, 
	121, 123, 125, 127, 129, 132, 134, 136, 
	138, 140, 142, 144, 146, 148, 150, 152, 
	155, 158, 161, 164, 170, 172, 174, 176, 
	179, 182, 199, 202, 210, 212, 215, 217, 
	224, 226, 229, 231, 233, 235, 237, 239, 
	241, 248, 250, 257, 264, 275, 282, 289, 
	296, 303, 310, 317, 324, 330, 336, 338, 
	340, 347, 351, 353, 359, 364, 380, 385, 
	396, 398, 404, 406, 412, 415, 423, 426, 
	430, 434, 436, 442, 444, 446, 448, 453, 
	456, 468, 477, 479, 481, 483, 485, 487, 
	494, 496, 503, 510, 521, 528, 535, 542, 
	549, 556, 563, 570, 576, 585, 591, 593, 
	595, 597, 599, 602, 604, 609, 611, 613, 
	615, 617, 622, 624, 626, 628, 630, 644, 
	647, 656, 662, 665, 681, 684, 692, 694, 
	697, 699, 706, 708, 711, 713, 715, 717, 
	719, 721, 723, 730, 732, 739, 746, 757, 
	764, 771, 778, 785, 792, 799, 806, 812, 
	818, 820, 822, 829, 833, 835, 841, 846, 
	851, 862, 864, 870, 872, 878, 881, 889, 
	892, 896, 900, 902, 908, 910, 912, 914, 
	919, 922, 934, 943, 945, 947, 949, 951, 
	953, 960, 962, 969, 976, 987, 994, 1001, 
	1008, 1015, 1022, 1029, 1036, 1042, 1051, 1057, 
	1059, 1061, 1063, 1065, 1068, 1070, 1075, 1077, 
	1079, 1081, 1083, 1088, 1090, 1092, 1094, 1096, 
	1098, 1101, 1103, 1110, 1114, 1117, 1119, 1121, 
	1123, 1125, 1127, 1129, 1136, 1138, 1145, 1154, 
	1166, 1179, 1186, 1193, 1200, 1207, 1214, 1221, 
	1228, 1234, 1240, 1242, 1244, 1252, 1256, 1258, 
	1265, 1278, 1283, 1295, 1297, 1304, 1306, 1313, 
	1316, 1325, 1328, 1332, 1336, 1338, 1345, 1347, 
	1349, 1351, 1357, 1360, 1373, 1383, 1385, 1387, 
	1389, 1391, 1393, 1400, 1402, 1409, 1418, 1430, 
	1443, 1450, 1457, 1464, 1471, 1478, 1485, 1492, 
	1498, 1508, 1512, 1514, 1516, 1518, 1520, 1522, 
	1524, 1526, 1528, 1542, 1545, 1554, 1560, 1563, 
	1579, 1582, 1590, 1592, 1595, 1597, 1604, 1606, 
	1609, 1611, 1613, 1615, 1617, 1619, 1621, 1628, 
	1630, 1637, 1644, 1655, 1662, 1669, 1676, 1683, 
	1690, 1697, 1704, 1710, 1716, 1718, 1720, 1727, 
	1731, 1733, 1739, 1744, 1749, 1760, 1762, 1768, 
	1770, 1776, 1779, 1787, 1790, 1794, 1798, 1800, 
	1806, 1808, 1810, 1812, 1817, 1820, 1832, 1841, 
	1843, 1845, 1847, 1849, 1851, 1858, 1860, 1867, 
	1874, 1885, 1892, 1899, 1906, 1913, 1920, 1927, 
	1934, 1940, 1949, 1955, 1957, 1959, 1961, 1963, 
	1966, 1968, 1973, 1975, 1977, 1979, 1981, 1986, 
	1988, 1990, 1992, 1994, 1996, 1999, 2001, 2008, 
	2012, 2015, 2017, 2019, 2021, 2023, 2025, 2027, 
	2034, 2036, 2043, 2052, 2064, 2077, 2084, 2091, 
	2098, 2105, 2112, 2119, 2126, 2132, 2138, 2140, 
	2142, 2150, 2154, 2156, 2163, 2176, 2181, 2193, 
	2195, 2202, 2204, 2211, 2214, 2223, 2226, 2230, 
	2234, 2236, 2243, 2245, 2247, 2249, 2255, 2258, 
	2271, 2281, 2283, 2285, 2287, 2289, 2291, 2298, 
	2300, 2307, 2316, 2328, 2341, 2348, 2355, 2362, 
	2369, 2376, 2383, 2390, 2396, 2406, 2410, 2412, 
	2414, 2416, 2418, 2420, 2422, 2424, 2426, 2440, 
	2443, 2452, 2458, 2461, 2477, 2480, 2488, 2490, 
	2493, 2495, 2502, 2504, 2507, 2509, 2511, 2513, 
	2515, 2517, 2519, 2526, 2528, 2535, 2542, 2553, 
	2560, 2567, 2574, 2581, 2588, 2595, 2602, 2608, 
	2614, 2616, 2618, 2625, 2629, 2631, 2637, 2642, 
	2647, 2658, 2660, 2666, 2668, 2674, 2677, 2685, 
	2688, 2692, 2696, 2698, 2704, 2706, 2708, 2710, 
	2715, 2718, 2730, 2739, 2741, 2743, 2745, 2747, 
	2749, 2756, 2758, 2765, 2772, 2783, 2790, 2797, 
	2804, 2811, 2818, 2825, 2832, 2838, 2847, 2853, 
	2855, 2857, 2859, 2861, 2864, 2866, 2871, 2873, 
	2875, 2877, 2879, 2884, 2886, 2888, 2890, 2892, 
	2894, 2897, 2899, 2906, 2910, 2913, 2915, 2917, 
	2919, 2921, 2923, 2925, 2932, 2934, 2941, 2950, 
	2962, 2975, 2982, 2989, 2996, 3003, 3010, 3017, 
	3024, 3030, 3036, 3038, 3040, 3048, 3052, 3054, 
	3061, 3074, 3079, 3091, 3093, 3100, 3102, 3109, 
	3112, 3121, 3124, 3128, 3132, 3134, 3141, 3143, 
	3145, 3147, 3153, 3156, 3169, 3179, 3181, 3183, 
	3185, 3187, 3189, 3196, 3198, 3205, 3214, 3226, 
	3239, 3246, 3253, 3260, 3267, 3274, 3281, 3288, 
	3294, 3304, 3308, 3310, 3312, 3314, 3316, 3318, 
	3320, 3322, 3324, 3331, 3335, 3341, 3347, 3353, 
	3363, 3369, 3375, 3381, 3387, 3393, 3399, 3405, 
	3410, 3415, 3421, 3426, 3436, 3441, 3446, 3453, 
	3458, 3462, 3473, 3481, 3487, 3493, 3503, 3509, 
	3515, 3521, 3527, 3533, 3539, 3545, 3550, 3558, 
	3562, 3566, 3567, 3570, 3571, 3579, 3580, 3581, 
	3582, 3583, 
}

var _cte_indicies []int16 = []int16{
	0, 1, 1, 3, 4, 5, 6, 7, 
	9, 10, 11, 12, 13, 1, 8, 2, 
	0, 14, 2, 15, 2, 16, 17, 2, 
	18, 2, 19, 2, 21, 20, 2, 21, 
	2, 22, 2, 23, 2, 24, 2, 25, 
	2, 26, 2, 27, 2, 28, 28, 28, 
	28, 28, 28, 2, 16, 2, 29, 2, 
	30, 31, 32, 2, 32, 2, 0, 33, 
	34, 14, 2, 35, 2, 36, 2, 37, 
	38, 2, 39, 40, 2, 41, 39, 40, 
	2, 42, 43, 44, 2, 44, 2, 45, 
	2, 46, 2, 47, 2, 48, 49, 2, 
	50, 2, 51, 2, 52, 2, 53, 2, 
	54, 2, 55, 2, 56, 56, 56, 56, 
	56, 56, 2, 57, 45, 58, 59, 60, 
	2, 61, 2, 62, 2, 63, 2, 64, 
	2, 65, 66, 2, 67, 2, 68, 2, 
	69, 2, 70, 2, 71, 2, 72, 2, 
	73, 2, 74, 2, 75, 2, 77, 76, 
	79, 80, 78, 79, 81, 78, 82, 80, 
	78, 84, 85, 83, 87, 88, 89, 90, 
	91, 86, 92, 2, 93, 2, 94, 2, 
	95, 95, 2, 96, 95, 2, 97, 98, 
	98, 99, 100, 101, 102, 103, 105, 106, 
	107, 108, 109, 110, 98, 104, 2, 97, 
	111, 2, 112, 112, 113, 114, 115, 112, 
	111, 2, 116, 2, 117, 118, 2, 119, 
	2, 120, 120, 121, 123, 120, 122, 2, 
	124, 2, 126, 125, 2, 126, 2, 127, 
	2, 128, 2, 129, 2, 130, 2, 131, 
	2, 132, 132, 133, 134, 135, 132, 2, 
	136, 2, 132, 132, 134, 135, 132, 137, 
	2, 138, 138, 138, 138, 138, 138, 2, 
	132, 132, 138, 138, 135, 138, 132, 138, 
	138, 138, 2, 132, 132, 134, 135, 132, 
	139, 2, 132, 132, 134, 135, 132, 140, 
	2, 132, 132, 134, 135, 132, 141, 2, 
	132, 132, 134, 135, 132, 142, 2, 132, 
	132, 134, 135, 132, 143, 2, 132, 132, 
	134, 135, 132, 144, 2, 132, 132, 134, 
	135, 132, 145, 2, 132, 132, 134, 135, 
	132, 2, 120, 120, 121, 123, 120, 2, 
	117, 2, 146, 2, 147, 147, 148, 149, 
	147, 146, 2, 150, 151, 152, 2, 152, 
	2, 147, 147, 148, 147, 152, 2, 98, 
	98, 108, 98, 2, 97, 153, 153, 99, 
	100, 101, 102, 103, 105, 106, 107, 109, 
	110, 153, 104, 2, 97, 154, 155, 111, 
	2, 112, 112, 113, 114, 115, 156, 157, 
	158, 112, 111, 2, 159, 2, 112, 112, 
	115, 112, 159, 2, 160, 2, 112, 112, 
	115, 112, 160, 2, 161, 162, 2, 112, 
	112, 163, 115, 112, 161, 162, 2, 164, 
	165, 2, 166, 164, 165, 2, 167, 168, 
	169, 2, 169, 2, 170, 170, 171, 170, 
	169, 2, 172, 2, 173, 2, 174, 2, 
	175, 175, 176, 175, 2, 177, 178, 2, 
	112, 112, 113, 114, 180, 115, 156, 157, 
	158, 112, 179, 2, 112, 112, 113, 114, 
	180, 115, 112, 111, 2, 181, 2, 182, 
	2, 183, 2, 184, 2, 185, 2, 186, 
	186, 187, 188, 189, 186, 2, 190, 2, 
	186, 186, 188, 189, 186, 191, 2, 192, 
	192, 192, 192, 192, 192, 2, 186, 186, 
	192, 192, 189, 192, 186, 192, 192, 192, 
	2, 186, 186, 188, 189, 186, 193, 2, 
	186, 186, 188, 189, 186, 194, 2, 186, 
	186, 188, 189, 186, 195, 2, 186, 186, 
	188, 189, 186, 196, 2, 186, 186, 188, 
	189, 186, 197, 2, 186, 186, 188, 189, 
	186, 198, 2, 186, 186, 188, 189, 186, 
	199, 2, 186, 186, 188, 189, 186, 2, 
	112, 112, 113, 114, 180, 115, 112, 179, 
	2, 200, 172, 201, 202, 203, 2, 204, 
	2, 205, 2, 206, 2, 207, 2, 208, 
	209, 2, 210, 2, 211, 211, 212, 211, 
	2, 213, 2, 214, 2, 215, 2, 216, 
	2, 217, 217, 218, 217, 2, 219, 2, 
	220, 2, 221, 2, 222, 2, 223, 224, 
	224, 225, 226, 227, 228, 229, 231, 232, 
	233, 224, 230, 2, 223, 234, 2, 235, 
	235, 236, 237, 238, 239, 235, 234, 2, 
	240, 240, 241, 242, 240, 2, 243, 244, 
	2, 245, 242, 242, 246, 247, 248, 249, 
	250, 252, 253, 254, 255, 256, 242, 251, 
	2, 245, 257, 2, 258, 258, 259, 260, 
	261, 258, 257, 2, 262, 2, 263, 264, 
	2, 265, 2, 266, 266, 267, 269, 266, 
	268, 2, 270, 2, 272, 271, 2, 272, 
	2, 273, 2, 274, 2, 275, 2, 276, 
	2, 277, 2, 278, 278, 279, 280, 281, 
	278, 2, 282, 2, 278, 278, 280, 281, 
	278, 283, 2, 284, 284, 284, 284, 284, 
	284, 2, 278, 278, 284, 284, 284, 281, 
	278, 284, 284, 284, 2, 278, 278, 280, 
	281, 278, 285, 2, 278, 278, 280, 281, 
	278, 286, 2, 278, 278, 280, 281, 278, 
	287, 2, 278, 278, 280, 281, 278, 288, 
	2, 278, 278, 280, 281, 278, 289, 2, 
	278, 278, 280, 281, 278, 290, 2, 278, 
	278, 280, 281, 278, 291, 2, 278, 278, 
	280, 281, 278, 2, 266, 266, 267, 269, 
	266, 2, 263, 2, 292, 2, 293, 293, 
	294, 295, 293, 292, 2, 296, 297, 298, 
	2, 298, 2, 293, 293, 295, 293, 298, 
	2, 224, 224, 233, 224, 2, 245, 299, 
	300, 257, 2, 258, 258, 259, 260, 301, 
	302, 303, 261, 258, 257, 2, 304, 2, 
	258, 258, 261, 258, 304, 2, 305, 2, 
	258, 258, 261, 258, 305, 2, 306, 307, 
	2, 258, 258, 308, 261, 258, 306, 307, 
	2, 309, 310, 2, 311, 309, 310, 2, 
	312, 313, 314, 2, 314, 2, 315, 315, 
	316, 315, 314, 2, 317, 2, 318, 2, 
	319, 2, 320, 320, 321, 320, 2, 322, 
	323, 2, 258, 258, 259, 260, 325, 301, 
	302, 303, 261, 258, 324, 2, 258, 258, 
	259, 260, 325, 261, 258, 257, 2, 326, 
	2, 327, 2, 328, 2, 329, 2, 330, 
	2, 331, 331, 332, 333, 334, 331, 2, 
	335, 2, 331, 331, 333, 334, 331, 336, 
	2, 337, 337, 337, 337, 337, 337, 2, 
	331, 331, 337, 337, 337, 334, 331, 337, 
	337, 337, 2, 331, 331, 333, 334, 331, 
	338, 2, 331, 331, 333, 334, 331, 339, 
	2, 331, 331, 333, 334, 331, 340, 2, 
	331, 331, 333, 334, 331, 341, 2, 331, 
	331, 333, 334, 331, 342, 2, 331, 331, 
	333, 334, 331, 343, 2, 331, 331, 333, 
	334, 331, 344, 2, 331, 331, 333, 334, 
	331, 2, 258, 258, 259, 260, 325, 261, 
	258, 324, 2, 345, 317, 346, 347, 348, 
	2, 349, 2, 350, 2, 351, 2, 352, 
	2, 353, 354, 2, 355, 2, 356, 356, 
	357, 356, 2, 358, 2, 359, 2, 360, 
	2, 361, 2, 362, 362, 363, 362, 2, 
	364, 2, 365, 2, 366, 2, 367, 2, 
	368, 2, 369, 370, 2, 371, 2, 372, 
	372, 373, 375, 372, 374, 2, 243, 244, 
	376, 2, 378, 377, 2, 378, 2, 379, 
	2, 380, 2, 381, 2, 382, 2, 383, 
	2, 384, 384, 385, 386, 387, 384, 2, 
	388, 2, 384, 384, 386, 387, 384, 389, 
	2, 243, 390, 390, 391, 390, 390, 390, 
	390, 2, 384, 384, 390, 390, 392, 387, 
	390, 384, 390, 390, 390, 2, 384, 384, 
	243, 390, 390, 393, 387, 390, 384, 390, 
	390, 390, 2, 384, 384, 386, 387, 384, 
	394, 2, 384, 384, 386, 387, 384, 395, 
	2, 384, 384, 386, 387, 384, 396, 2, 
	384, 384, 386, 387, 384, 397, 2, 384, 
	384, 386, 387, 384, 398, 2, 384, 384, 
	386, 387, 384, 399, 2, 384, 384, 386, 
	387, 384, 400, 2, 384, 384, 386, 387, 
	384, 2, 372, 372, 373, 375, 372, 2, 
	369, 2, 401, 2, 402, 402, 403, 404, 
	405, 402, 401, 2, 406, 407, 408, 2, 
	408, 2, 402, 402, 403, 404, 402, 408, 
	2, 223, 409, 409, 225, 226, 227, 228, 
	229, 231, 232, 409, 230, 2, 223, 410, 
	411, 234, 2, 235, 235, 236, 237, 238, 
	239, 412, 413, 414, 235, 234, 2, 415, 
	2, 235, 235, 238, 239, 235, 415, 2, 
	416, 2, 235, 235, 238, 239, 235, 416, 
	2, 417, 418, 2, 235, 235, 419, 238, 
	239, 235, 417, 418, 2, 420, 421, 2, 
	422, 420, 421, 2, 423, 424, 425, 2, 
	425, 2, 426, 426, 427, 428, 426, 425, 
	2, 429, 2, 430, 2, 431, 2, 432, 
	432, 433, 434, 432, 2, 435, 436, 2, 
	235, 235, 236, 237, 238, 438, 239, 412, 
	413, 414, 235, 437, 2, 235, 235, 236, 
	237, 238, 438, 239, 235, 234, 2, 439, 
	2, 440, 2, 441, 2, 442, 2, 443, 
	2, 444, 444, 445, 446, 447, 444, 2, 
	448, 2, 444, 444, 446, 447, 444, 449, 
	2, 243, 450, 450, 451, 450, 450, 450, 
	450, 2, 444, 444, 450, 450, 452, 447, 
	450, 444, 450, 450, 450, 2, 444, 444, 
	243, 450, 450, 453, 447, 450, 444, 450, 
	450, 450, 2, 444, 444, 446, 447, 444, 
	454, 2, 444, 444, 446, 447, 444, 455, 
	2, 444, 444, 446, 447, 444, 456, 2, 
	444, 444, 446, 447, 444, 457, 2, 444, 
	444, 446, 447, 444, 458, 2, 444, 444, 
	446, 447, 444, 459, 2, 444, 444, 446, 
	447, 444, 460, 2, 444, 444, 446, 447, 
	444, 2, 235, 235, 236, 237, 238, 438, 
	239, 235, 437, 2, 461, 429, 462, 2, 
	463, 2, 464, 2, 465, 2, 466, 2, 
	467, 2, 468, 2, 469, 2, 470, 2, 
	471, 472, 472, 473, 474, 475, 476, 477, 
	479, 480, 481, 472, 478, 2, 471, 482, 
	2, 483, 483, 484, 485, 486, 487, 483, 
	482, 2, 488, 488, 489, 490, 488, 2, 
	491, 492, 2, 493, 490, 490, 494, 495, 
	496, 497, 498, 500, 501, 502, 503, 504, 
	490, 499, 2, 493, 505, 2, 506, 506, 
	507, 508, 509, 506, 505, 2, 510, 2, 
	511, 512, 2, 513, 2, 514, 514, 515, 
	517, 514, 516, 2, 518, 2, 520, 519, 
	2, 520, 2, 521, 2, 522, 2, 523, 
	2, 524, 2, 525, 2, 526, 526, 527, 
	528, 529, 526, 2, 530, 2, 526, 526, 
	528, 529, 526, 531, 2, 532, 532, 532, 
	532, 532, 532, 2, 526, 526, 532, 532, 
	529, 532, 526, 532, 532, 532, 2, 526, 
	526, 528, 529, 526, 533, 2, 526, 526, 
	528, 529, 526, 534, 2, 526, 526, 528, 
	529, 526, 535, 2, 526, 526, 528, 529, 
	526, 536, 2, 526, 526, 528, 529, 526, 
	537, 2, 526, 526, 528, 529, 526, 538, 
	2, 526, 526, 528, 529, 526, 539, 2, 
	526, 526, 528, 529, 526, 2, 514, 514, 
	515, 517, 514, 2, 511, 2, 540, 2, 
	541, 541, 542, 543, 541, 540, 2, 544, 
	545, 546, 2, 546, 2, 541, 541, 542, 
	541, 546, 2, 472, 472, 479, 472, 2, 
	493, 547, 548, 505, 2, 506, 506, 507, 
	508, 509, 549, 550, 551, 506, 505, 2, 
	552, 2, 506, 506, 509, 506, 552, 2, 
	553, 2, 506, 506, 509, 506, 553, 2, 
	554, 555, 2, 506, 506, 556, 509, 506, 
	554, 555, 2, 557, 558, 2, 559, 557, 
	558, 2, 560, 561, 562, 2, 562, 2, 
	563, 563, 564, 563, 562, 2, 565, 2, 
	566, 2, 567, 2, 568, 568, 569, 568, 
	2, 570, 571, 2, 506, 506, 507, 508, 
	573, 509, 549, 550, 551, 506, 572, 2, 
	506, 506, 507, 508, 573, 509, 506, 505, 
	2, 574, 2, 575, 2, 576, 2, 577, 
	2, 578, 2, 579, 579, 580, 581, 582, 
	579, 2, 583, 2, 579, 579, 581, 582, 
	579, 584, 2, 585, 585, 585, 585, 585, 
	585, 2, 579, 579, 585, 585, 582, 585, 
	579, 585, 585, 585, 2, 579, 579, 581, 
	582, 579, 586, 2, 579, 579, 581, 582, 
	579, 587, 2, 579, 579, 581, 582, 579, 
	588, 2, 579, 579, 581, 582, 579, 589, 
	2, 579, 579, 581, 582, 579, 590, 2, 
	579, 579, 581, 582, 579, 591, 2, 579, 
	579, 581, 582, 579, 592, 2, 579, 579, 
	581, 582, 579, 2, 506, 506, 507, 508, 
	573, 509, 506, 572, 2, 593, 565, 594, 
	595, 596, 2, 597, 2, 598, 2, 599, 
	2, 600, 2, 601, 602, 2, 603, 2, 
	604, 604, 605, 604, 2, 606, 2, 607, 
	2, 608, 2, 609, 2, 610, 610, 611, 
	610, 2, 612, 2, 613, 2, 614, 2, 
	615, 2, 616, 2, 617, 618, 2, 619, 
	2, 620, 620, 621, 623, 620, 622, 2, 
	491, 492, 624, 2, 626, 625, 2, 626, 
	2, 627, 2, 628, 2, 629, 2, 630, 
	2, 631, 2, 632, 632, 633, 634, 635, 
	632, 2, 636, 2, 632, 632, 634, 635, 
	632, 637, 2, 491, 638, 638, 639, 638, 
	638, 638, 638, 2, 632, 632, 638, 638, 
	640, 635, 638, 632, 638, 638, 638, 2, 
	632, 632, 491, 638, 638, 641, 635, 638, 
	632, 638, 638, 638, 2, 632, 632, 634, 
	635, 632, 642, 2, 632, 632, 634, 635, 
	632, 643, 2, 632, 632, 634, 635, 632, 
	644, 2, 632, 632, 634, 635, 632, 645, 
	2, 632, 632, 634, 635, 632, 646, 2, 
	632, 632, 634, 635, 632, 647, 2, 632, 
	632, 634, 635, 632, 648, 2, 632, 632, 
	634, 635, 632, 2, 620, 620, 621, 623, 
	620, 2, 617, 2, 649, 2, 650, 650, 
	651, 652, 653, 650, 649, 2, 654, 655, 
	656, 2, 656, 2, 650, 650, 651, 652, 
	650, 656, 2, 471, 657, 657, 473, 474, 
	475, 476, 477, 480, 481, 657, 478, 2, 
	471, 658, 659, 482, 2, 483, 483, 484, 
	485, 486, 487, 660, 661, 662, 483, 482, 
	2, 663, 2, 483, 483, 486, 487, 483, 
	663, 2, 664, 2, 483, 483, 486, 487, 
	483, 664, 2, 665, 666, 2, 483, 483, 
	667, 486, 487, 483, 665, 666, 2, 668, 
	669, 2, 670, 668, 669, 2, 671, 672, 
	673, 2, 673, 2, 674, 674, 675, 676, 
	674, 673, 2, 677, 2, 678, 2, 679, 
	2, 680, 680, 681, 682, 680, 2, 683, 
	684, 2, 483, 483, 484, 485, 486, 686, 
	487, 660, 661, 662, 483, 685, 2, 483, 
	483, 484, 485, 486, 686, 487, 483, 482, 
	2, 687, 2, 688, 2, 689, 2, 690, 
	2, 691, 2, 692, 692, 693, 694, 695, 
	692, 2, 696, 2, 692, 692, 694, 695, 
	692, 697, 2, 491, 698, 698, 699, 698, 
	698, 698, 698, 2, 692, 692, 698, 698, 
	700, 695, 698, 692, 698, 698, 698, 2, 
	692, 692, 491, 698, 698, 701, 695, 698, 
	692, 698, 698, 698, 2, 692, 692, 694, 
	695, 692, 702, 2, 692, 692, 694, 695, 
	692, 703, 2, 692, 692, 694, 695, 692, 
	704, 2, 692, 692, 694, 695, 692, 705, 
	2, 692, 692, 694, 695, 692, 706, 2, 
	692, 692, 694, 695, 692, 707, 2, 692, 
	692, 694, 695, 692, 708, 2, 692, 692, 
	694, 695, 692, 2, 483, 483, 484, 485, 
	486, 686, 487, 483, 685, 2, 709, 677, 
	710, 2, 711, 2, 712, 2, 713, 2, 
	714, 2, 715, 2, 716, 2, 717, 2, 
	718, 2, 719, 720, 720, 721, 722, 723, 
	724, 725, 726, 728, 729, 720, 727, 2, 
	719, 730, 2, 731, 731, 732, 733, 734, 
	735, 731, 730, 2, 736, 736, 737, 738, 
	736, 2, 739, 740, 2, 741, 738, 738, 
	742, 743, 744, 745, 746, 748, 749, 750, 
	751, 752, 738, 747, 2, 741, 753, 2, 
	754, 754, 755, 756, 757, 754, 753, 2, 
	758, 2, 759, 760, 2, 761, 2, 762, 
	762, 763, 764, 762, 765, 2, 766, 2, 
	768, 767, 2, 768, 2, 769, 2, 770, 
	2, 771, 2, 772, 2, 773, 2, 774, 
	774, 775, 776, 777, 774, 2, 778, 2, 
	774, 774, 775, 777, 774, 779, 2, 780, 
	780, 780, 780, 780, 780, 2, 774, 774, 
	775, 780, 780, 780, 774, 780, 780, 780, 
	2, 774, 774, 775, 777, 774, 781, 2, 
	774, 774, 775, 777, 774, 782, 2, 774, 
	774, 775, 777, 774, 783, 2, 774, 774, 
	775, 777, 774, 784, 2, 774, 774, 775, 
	777, 774, 785, 2, 774, 774, 775, 777, 
	774, 786, 2, 774, 774, 775, 777, 774, 
	787, 2, 774, 774, 775, 777, 774, 2, 
	762, 762, 763, 764, 762, 2, 759, 2, 
	788, 2, 789, 789, 790, 791, 789, 788, 
	2, 792, 793, 794, 2, 794, 2, 789, 
	789, 790, 789, 794, 2, 720, 720, 723, 
	720, 2, 741, 795, 796, 753, 2, 754, 
	754, 755, 756, 757, 797, 798, 799, 754, 
	753, 2, 800, 2, 754, 754, 755, 754, 
	800, 2, 801, 2, 754, 754, 755, 754, 
	801, 2, 802, 803, 2, 754, 754, 755, 
	804, 754, 802, 803, 2, 805, 806, 2, 
	807, 805, 806, 2, 808, 809, 810, 2, 
	810, 2, 811, 811, 812, 811, 810, 2, 
	813, 2, 814, 2, 815, 2, 816, 816, 
	817, 816, 2, 818, 819, 2, 754, 754, 
	755, 756, 757, 821, 797, 798, 799, 754, 
	820, 2, 754, 754, 755, 756, 757, 821, 
	754, 753, 2, 822, 2, 823, 2, 824, 
	2, 825, 2, 826, 2, 827, 827, 828, 
	829, 830, 827, 2, 831, 2, 827, 827, 
	828, 830, 827, 832, 2, 833, 833, 833, 
	833, 833, 833, 2, 827, 827, 828, 833, 
	833, 833, 827, 833, 833, 833, 2, 827, 
	827, 828, 830, 827, 834, 2, 827, 827, 
	828, 830, 827, 835, 2, 827, 827, 828, 
	830, 827, 836, 2, 827, 827, 828, 830, 
	827, 837, 2, 827, 827, 828, 830, 827, 
	838, 2, 827, 827, 828, 830, 827, 839, 
	2, 827, 827, 828, 830, 827, 840, 2, 
	827, 827, 828, 830, 827, 2, 754, 754, 
	755, 756, 757, 821, 754, 820, 2, 841, 
	813, 842, 843, 844, 2, 845, 2, 846, 
	2, 847, 2, 848, 2, 849, 850, 2, 
	851, 2, 852, 852, 853, 852, 2, 854, 
	2, 855, 2, 856, 2, 857, 2, 858, 
	858, 859, 858, 2, 860, 2, 861, 2, 
	862, 2, 863, 2, 864, 2, 865, 866, 
	2, 867, 2, 868, 868, 869, 871, 868, 
	870, 2, 739, 740, 872, 2, 874, 873, 
	2, 874, 2, 875, 2, 876, 2, 877, 
	2, 878, 2, 879, 2, 880, 880, 881, 
	882, 883, 880, 2, 884, 2, 880, 880, 
	882, 883, 880, 885, 2, 739, 886, 886, 
	887, 886, 886, 886, 886, 2, 880, 880, 
	886, 886, 888, 883, 886, 880, 886, 886, 
	886, 2, 880, 880, 739, 886, 886, 889, 
	883, 886, 880, 886, 886, 886, 2, 880, 
	880, 882, 883, 880, 890, 2, 880, 880, 
	882, 883, 880, 891, 2, 880, 880, 882, 
	883, 880, 892, 2, 880, 880, 882, 883, 
	880, 893, 2, 880, 880, 882, 883, 880, 
	894, 2, 880, 880, 882, 883, 880, 895, 
	2, 880, 880, 882, 883, 880, 896, 2, 
	880, 880, 882, 883, 880, 2, 868, 868, 
	869, 871, 868, 2, 865, 2, 897, 2, 
	898, 898, 899, 900, 901, 898, 897, 2, 
	902, 903, 904, 2, 904, 2, 898, 898, 
	899, 900, 898, 904, 2, 719, 905, 905, 
	721, 722, 724, 725, 726, 728, 729, 905, 
	727, 2, 719, 906, 907, 730, 2, 731, 
	731, 732, 733, 734, 735, 908, 909, 910, 
	731, 730, 2, 911, 2, 731, 731, 734, 
	735, 731, 911, 2, 912, 2, 731, 731, 
	734, 735, 731, 912, 2, 913, 914, 2, 
	731, 731, 915, 734, 735, 731, 913, 914, 
	2, 916, 917, 2, 918, 916, 917, 2, 
	919, 920, 921, 2, 921, 2, 922, 922, 
	923, 924, 922, 921, 2, 925, 2, 926, 
	2, 927, 2, 928, 928, 929, 930, 928, 
	2, 931, 932, 2, 731, 731, 732, 733, 
	734, 934, 735, 908, 909, 910, 731, 933, 
	2, 731, 731, 732, 733, 734, 934, 735, 
	731, 730, 2, 935, 2, 936, 2, 937, 
	2, 938, 2, 939, 2, 940, 940, 941, 
	942, 943, 940, 2, 944, 2, 940, 940, 
	942, 943, 940, 945, 2, 739, 946, 946, 
	947, 946, 946, 946, 946, 2, 940, 940, 
	946, 946, 948, 943, 946, 940, 946, 946, 
	946, 2, 940, 940, 739, 946, 946, 949, 
	943, 946, 940, 946, 946, 946, 2, 940, 
	940, 942, 943, 940, 950, 2, 940, 940, 
	942, 943, 940, 951, 2, 940, 940, 942, 
	943, 940, 952, 2, 940, 940, 942, 943, 
	940, 953, 2, 940, 940, 942, 943, 940, 
	954, 2, 940, 940, 942, 943, 940, 955, 
	2, 940, 940, 942, 943, 940, 956, 2, 
	940, 940, 942, 943, 940, 2, 731, 731, 
	732, 733, 734, 934, 735, 731, 933, 2, 
	957, 925, 958, 2, 959, 2, 960, 2, 
	961, 2, 962, 2, 963, 2, 964, 2, 
	965, 2, 966, 2, 967, 967, 968, 969, 
	967, 14, 2, 970, 970, 970, 2, 971, 
	971, 972, 971, 973, 2, 974, 974, 975, 
	976, 974, 2, 974, 974, 976, 974, 977, 
	2, 974, 974, 28, 28, 28, 974, 28, 
	28, 28, 2, 974, 974, 976, 974, 978, 
	2, 974, 974, 976, 974, 979, 2, 974, 
	974, 976, 974, 980, 2, 974, 974, 976, 
	974, 981, 2, 974, 974, 976, 974, 982, 
	2, 974, 974, 976, 974, 983, 2, 974, 
	974, 976, 974, 984, 2, 974, 974, 976, 
	974, 2, 971, 971, 972, 971, 2, 985, 
	985, 986, 985, 29, 2, 985, 985, 985, 
	32, 2, 967, 967, 968, 969, 987, 988, 
	989, 967, 14, 2, 967, 967, 967, 35, 
	2, 967, 967, 967, 36, 2, 967, 967, 
	990, 967, 37, 38, 2, 991, 991, 991, 
	44, 2, 992, 992, 992, 2, 967, 967, 
	968, 969, 994, 987, 988, 989, 967, 993, 
	2, 967, 967, 968, 969, 994, 967, 14, 
	2, 995, 995, 996, 997, 995, 2, 995, 
	995, 997, 995, 998, 2, 995, 995, 56, 
	56, 56, 995, 56, 56, 56, 2, 995, 
	995, 997, 995, 999, 2, 995, 995, 997, 
	995, 1000, 2, 995, 995, 997, 995, 1001, 
	2, 995, 995, 997, 995, 1002, 2, 995, 
	995, 997, 995, 1003, 2, 995, 995, 997, 
	995, 1004, 2, 995, 995, 997, 995, 1005, 
	2, 995, 995, 997, 995, 2, 967, 967, 
	968, 969, 994, 967, 993, 2, 1006, 1006, 
	1006, 2, 1007, 1007, 1007, 2, 2, 82, 
	80, 78, 2, 92, 92, 92, 92, 93, 
	94, 1008, 2, 2, 2, 2, 2, 2, 
	
}

var _cte_trans_targs []int16 = []int16{
	2, 1, 0, 699, 1, 20, 31, 721, 
	734, 699, 39, 699, 53, 699, 698, 4, 
	5, 16, 700, 7, 8, 9, 10, 11, 
	12, 13, 701, 702, 703, 713, 19, 19, 
	714, 715, 28, 716, 717, 718, 718, 25, 
	25, 26, 27, 27, 719, 29, 30, 720, 
	1, 1, 33, 34, 35, 36, 723, 724, 
	725, 40, 44, 47, 50, 41, 42, 43, 
	699, 45, 46, 735, 699, 48, 49, 736, 
	51, 52, 699, 699, 54, 737, 55, 56, 
	57, 738, 56, 58, 739, 59, 58, 58, 
	58, 58, 58, 58, 740, 60, 61, 64, 
	741, 66, 65, 100, 101, 102, 119, 120, 
	140, 100, 141, 100, 742, 157, 100, 67, 
	65, 68, 95, 742, 69, 70, 94, 71, 
	65, 72, 93, 742, 73, 74, 75, 76, 
	77, 78, 79, 80, 65, 81, 83, 742, 
	82, 85, 84, 86, 87, 88, 89, 90, 
	91, 92, 96, 65, 742, 97, 98, 98, 
	99, 101, 103, 115, 104, 106, 108, 105, 
	107, 109, 109, 110, 111, 111, 112, 113, 
	113, 114, 65, 742, 116, 117, 118, 65, 
	742, 101, 101, 121, 122, 123, 124, 125, 
	126, 127, 65, 128, 130, 742, 129, 132, 
	131, 133, 134, 135, 136, 137, 138, 139, 
	142, 146, 150, 154, 143, 144, 145, 100, 
	147, 149, 148, 65, 742, 100, 151, 152, 
	153, 65, 742, 155, 156, 100, 100, 159, 
	158, 161, 288, 289, 306, 307, 328, 329, 
	337, 743, 160, 161, 255, 283, 162, 163, 
	161, 162, 163, 161, 161, 164, 198, 163, 
	199, 216, 217, 237, 198, 238, 198, 254, 
	198, 165, 158, 166, 193, 743, 167, 168, 
	192, 169, 158, 170, 191, 743, 171, 172, 
	173, 174, 175, 176, 177, 178, 158, 179, 
	181, 743, 180, 183, 182, 184, 185, 186, 
	187, 188, 189, 190, 194, 158, 195, 743, 
	196, 196, 197, 200, 212, 201, 203, 205, 
	202, 204, 206, 206, 207, 208, 208, 209, 
	210, 210, 211, 158, 743, 213, 214, 215, 
	158, 743, 163, 163, 218, 219, 220, 221, 
	222, 223, 224, 158, 225, 227, 743, 226, 
	229, 228, 230, 231, 232, 233, 234, 235, 
	236, 239, 243, 247, 251, 240, 241, 242, 
	198, 244, 246, 245, 158, 743, 198, 248, 
	249, 250, 158, 743, 252, 253, 198, 198, 
	256, 257, 282, 258, 161, 259, 281, 163, 
	260, 261, 262, 263, 264, 265, 266, 267, 
	161, 268, 270, 163, 269, 273, 271, 271, 
	272, 272, 274, 275, 276, 277, 278, 279, 
	280, 284, 161, 162, 163, 285, 286, 286, 
	287, 288, 290, 302, 291, 293, 295, 292, 
	294, 296, 296, 297, 298, 298, 299, 300, 
	300, 301, 161, 162, 163, 303, 304, 305, 
	161, 162, 163, 288, 288, 308, 309, 310, 
	311, 312, 313, 314, 161, 315, 317, 163, 
	316, 320, 318, 318, 319, 319, 321, 322, 
	323, 324, 325, 326, 327, 330, 334, 331, 
	332, 333, 161, 335, 336, 161, 161, 339, 
	338, 341, 468, 469, 486, 487, 508, 744, 
	509, 517, 340, 341, 435, 463, 342, 343, 
	341, 342, 343, 341, 341, 344, 378, 343, 
	379, 396, 397, 417, 378, 418, 378, 434, 
	378, 345, 338, 346, 373, 744, 347, 348, 
	372, 349, 338, 350, 371, 744, 351, 352, 
	353, 354, 355, 356, 357, 358, 338, 359, 
	361, 744, 360, 363, 362, 364, 365, 366, 
	367, 368, 369, 370, 374, 338, 744, 375, 
	376, 376, 377, 380, 392, 381, 383, 385, 
	382, 384, 386, 386, 387, 388, 388, 389, 
	390, 390, 391, 338, 744, 393, 394, 395, 
	338, 744, 343, 343, 398, 399, 400, 401, 
	402, 403, 404, 338, 405, 407, 744, 406, 
	409, 408, 410, 411, 412, 413, 414, 415, 
	416, 419, 423, 427, 431, 420, 421, 422, 
	378, 424, 426, 425, 338, 744, 378, 428, 
	429, 430, 338, 744, 432, 433, 378, 378, 
	436, 437, 462, 438, 341, 439, 461, 343, 
	440, 441, 442, 443, 444, 445, 446, 447, 
	341, 448, 450, 343, 449, 453, 451, 451, 
	452, 452, 454, 455, 456, 457, 458, 459, 
	460, 464, 341, 342, 343, 465, 466, 466, 
	467, 468, 470, 482, 471, 473, 475, 472, 
	474, 476, 476, 477, 478, 478, 479, 480, 
	480, 481, 341, 342, 343, 483, 484, 485, 
	341, 342, 343, 468, 468, 488, 489, 490, 
	491, 492, 493, 494, 341, 495, 497, 343, 
	496, 500, 498, 498, 499, 499, 501, 502, 
	503, 504, 505, 506, 507, 510, 514, 511, 
	512, 513, 341, 515, 516, 341, 341, 519, 
	518, 521, 648, 745, 649, 666, 667, 688, 
	689, 697, 520, 521, 615, 643, 522, 523, 
	521, 522, 523, 521, 521, 524, 558, 523, 
	559, 576, 577, 597, 558, 598, 558, 614, 
	558, 525, 518, 745, 526, 553, 527, 528, 
	552, 529, 518, 745, 530, 551, 531, 532, 
	533, 534, 535, 536, 537, 538, 518, 745, 
	539, 541, 540, 543, 542, 544, 545, 546, 
	547, 548, 549, 550, 554, 518, 745, 555, 
	556, 556, 557, 560, 572, 561, 563, 565, 
	562, 564, 566, 566, 567, 568, 568, 569, 
	570, 570, 571, 518, 745, 573, 574, 575, 
	518, 745, 523, 523, 578, 579, 580, 581, 
	582, 583, 584, 518, 745, 585, 587, 586, 
	589, 588, 590, 591, 592, 593, 594, 595, 
	596, 599, 603, 607, 611, 600, 601, 602, 
	558, 604, 606, 605, 518, 745, 558, 608, 
	609, 610, 518, 745, 612, 613, 558, 558, 
	616, 617, 642, 618, 521, 619, 641, 523, 
	620, 621, 622, 623, 624, 625, 626, 627, 
	521, 628, 630, 523, 629, 633, 631, 631, 
	632, 632, 634, 635, 636, 637, 638, 639, 
	640, 644, 521, 522, 523, 645, 646, 646, 
	647, 648, 650, 662, 651, 653, 655, 652, 
	654, 656, 656, 657, 658, 658, 659, 660, 
	660, 661, 521, 522, 523, 663, 664, 665, 
	521, 522, 523, 648, 648, 668, 669, 670, 
	671, 672, 673, 674, 521, 675, 677, 523, 
	676, 680, 678, 678, 679, 679, 681, 682, 
	683, 684, 685, 686, 687, 690, 694, 691, 
	692, 693, 521, 695, 696, 521, 521, 699, 
	3, 17, 699, 699, 6, 712, 699, 14, 
	15, 704, 705, 706, 707, 708, 709, 710, 
	711, 699, 18, 21, 22, 23, 24, 699, 
	699, 722, 32, 699, 37, 38, 726, 727, 
	728, 729, 730, 731, 732, 733, 699, 699, 
	62, 
}

var _cte_trans_actions []byte = []byte{
	0, 0, 0, 73, 67, 7, 0, 107, 
	107, 65, 0, 61, 0, 63, 11, 41, 
	0, 41, 43, 45, 45, 0, 47, 47, 
	0, 49, 49, 51, 53, 17, 0, 9, 
	23, 11, 0, 25, 27, 13, 15, 19, 
	21, 0, 0, 9, 23, 0, 0, 0, 
	71, 69, 47, 47, 0, 49, 49, 51, 
	53, 0, 0, 0, 0, 0, 0, 0, 
	5, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 3, 75, 0, 77, 0, 0, 
	0, 79, 71, 0, 93, 0, 91, 89, 
	81, 83, 85, 87, 0, 0, 0, 0, 
	97, 0, 0, 73, 67, 7, 0, 107, 
	107, 65, 0, 61, 99, 0, 63, 11, 
	29, 0, 0, 110, 41, 0, 41, 43, 
	55, 0, 43, 191, 45, 45, 0, 47, 
	47, 0, 49, 49, 59, 0, 0, 215, 
	51, 51, 53, 51, 51, 51, 51, 51, 
	51, 51, 17, 31, 122, 0, 0, 9, 
	23, 0, 11, 0, 0, 0, 0, 25, 
	27, 13, 15, 0, 19, 21, 0, 0, 
	9, 23, 33, 134, 0, 0, 0, 35, 
	146, 71, 69, 107, 0, 47, 47, 0, 
	49, 49, 57, 0, 0, 203, 51, 51, 
	53, 51, 51, 51, 51, 51, 51, 51, 
	0, 0, 0, 0, 0, 0, 0, 5, 
	0, 0, 0, 37, 158, 1, 0, 0, 
	0, 39, 170, 0, 0, 3, 75, 0, 
	0, 73, 67, 7, 0, 107, 107, 0, 
	0, 101, 11, 29, 0, 0, 29, 29, 
	0, 0, 0, 71, 69, 0, 73, 67, 
	7, 0, 107, 107, 65, 0, 61, 0, 
	63, 11, 29, 0, 0, 113, 41, 0, 
	41, 43, 55, 0, 43, 194, 45, 45, 
	0, 47, 47, 0, 49, 49, 59, 0, 
	0, 218, 51, 51, 53, 51, 51, 51, 
	51, 51, 51, 51, 17, 31, 0, 125, 
	0, 9, 23, 11, 0, 0, 0, 0, 
	25, 27, 13, 15, 0, 19, 21, 0, 
	0, 9, 23, 33, 137, 0, 0, 0, 
	35, 149, 71, 69, 107, 0, 47, 47, 
	0, 49, 49, 57, 0, 0, 206, 51, 
	51, 53, 51, 51, 51, 51, 51, 51, 
	51, 0, 0, 0, 0, 0, 0, 0, 
	5, 0, 0, 0, 37, 161, 1, 0, 
	0, 0, 39, 173, 0, 0, 3, 75, 
	41, 0, 41, 43, 55, 55, 43, 55, 
	45, 45, 0, 47, 47, 0, 49, 49, 
	59, 0, 59, 59, 51, 51, 53, 188, 
	185, 231, 51, 51, 51, 51, 51, 51, 
	51, 17, 31, 31, 31, 0, 0, 9, 
	23, 0, 11, 0, 0, 0, 0, 25, 
	27, 13, 15, 0, 19, 21, 0, 0, 
	9, 23, 33, 33, 33, 0, 0, 0, 
	35, 35, 35, 71, 69, 107, 0, 47, 
	47, 0, 49, 49, 57, 0, 57, 57, 
	51, 51, 53, 188, 182, 227, 51, 51, 
	51, 51, 51, 51, 51, 0, 0, 0, 
	0, 0, 5, 0, 0, 3, 75, 0, 
	0, 73, 67, 7, 0, 107, 107, 103, 
	0, 0, 11, 29, 0, 0, 29, 29, 
	0, 0, 0, 71, 69, 0, 73, 67, 
	7, 0, 107, 107, 65, 0, 61, 0, 
	63, 11, 29, 0, 0, 116, 41, 0, 
	41, 43, 55, 0, 43, 197, 45, 45, 
	0, 47, 47, 0, 49, 49, 59, 0, 
	0, 221, 51, 51, 53, 51, 51, 51, 
	51, 51, 51, 51, 17, 31, 128, 0, 
	0, 9, 23, 11, 0, 0, 0, 0, 
	25, 27, 13, 15, 0, 19, 21, 0, 
	0, 9, 23, 33, 140, 0, 0, 0, 
	35, 152, 71, 69, 107, 0, 47, 47, 
	0, 49, 49, 57, 0, 0, 209, 51, 
	51, 53, 51, 51, 51, 51, 51, 51, 
	51, 0, 0, 0, 0, 0, 0, 0, 
	5, 0, 0, 0, 37, 164, 1, 0, 
	0, 0, 39, 176, 0, 0, 3, 75, 
	41, 0, 41, 43, 55, 55, 43, 55, 
	45, 45, 0, 47, 47, 0, 49, 49, 
	59, 0, 59, 59, 51, 51, 53, 188, 
	185, 231, 51, 51, 51, 51, 51, 51, 
	51, 17, 31, 31, 31, 0, 0, 9, 
	23, 0, 11, 0, 0, 0, 0, 25, 
	27, 13, 15, 0, 19, 21, 0, 0, 
	9, 23, 33, 33, 33, 0, 0, 0, 
	35, 35, 35, 71, 69, 107, 0, 47, 
	47, 0, 49, 49, 57, 0, 57, 57, 
	51, 51, 53, 188, 182, 227, 51, 51, 
	51, 51, 51, 51, 51, 0, 0, 0, 
	0, 0, 5, 0, 0, 3, 75, 0, 
	0, 73, 67, 105, 7, 0, 107, 107, 
	0, 0, 11, 29, 0, 0, 29, 29, 
	0, 0, 0, 71, 69, 0, 73, 67, 
	7, 0, 107, 107, 65, 0, 61, 0, 
	63, 11, 29, 119, 0, 0, 41, 0, 
	41, 43, 55, 200, 0, 43, 45, 45, 
	0, 47, 47, 0, 49, 49, 59, 224, 
	0, 0, 51, 51, 53, 51, 51, 51, 
	51, 51, 51, 51, 17, 31, 131, 0, 
	0, 9, 23, 11, 0, 0, 0, 0, 
	25, 27, 13, 15, 0, 19, 21, 0, 
	0, 9, 23, 33, 143, 0, 0, 0, 
	35, 155, 71, 69, 107, 0, 47, 47, 
	0, 49, 49, 57, 212, 0, 0, 51, 
	51, 53, 51, 51, 51, 51, 51, 51, 
	51, 0, 0, 0, 0, 0, 0, 0, 
	5, 0, 0, 0, 37, 167, 1, 0, 
	0, 0, 39, 179, 0, 0, 3, 75, 
	41, 0, 41, 43, 55, 55, 43, 55, 
	45, 45, 0, 47, 47, 0, 49, 49, 
	59, 0, 59, 59, 51, 51, 53, 188, 
	185, 231, 51, 51, 51, 51, 51, 51, 
	51, 17, 31, 31, 31, 0, 0, 9, 
	23, 0, 11, 0, 0, 0, 0, 25, 
	27, 13, 15, 0, 19, 21, 0, 0, 
	9, 23, 33, 33, 33, 0, 0, 0, 
	35, 35, 35, 71, 69, 107, 0, 47, 
	47, 0, 49, 49, 57, 0, 57, 57, 
	51, 51, 53, 188, 182, 227, 51, 51, 
	51, 51, 51, 51, 51, 0, 0, 0, 
	0, 0, 5, 0, 0, 3, 75, 29, 
	0, 0, 0, 55, 0, 43, 59, 0, 
	0, 51, 51, 51, 51, 51, 51, 51, 
	51, 31, 0, 0, 0, 0, 0, 33, 
	35, 107, 0, 57, 0, 0, 51, 51, 
	51, 51, 51, 51, 51, 51, 37, 39, 
	0, 
}

var _cte_eof_actions []byte = []byte{
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 29, 0, 55, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	55, 31, 31, 29, 29, 29, 29, 33, 
	35, 29, 29, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 29, 37, 
	39, 0, 0, 0, 95, 0, 0, 0, 
	0, 0, 
}

const cte_start int = 1
const cte_error int = 0

const cte_en_comment_iterate int = 54
const cte_en_multiline_comment_iterate int = 55
const cte_en_string_iterate int = 58
const cte_en_unquoted_string_iterate int = 740
const cte_en_uri_iterate int = 63
const cte_en_list_iterate int = 65
const cte_en_unordered_map_iterate int = 158
const cte_en_ordered_map_iterate int = 338
const cte_en_metadata_map_iterate int = 518
const cte_en_main int = 1


//line cte.rl:503

type Parser struct {
    cs int // Current Ragel state
    ts int // Position: start of token
    te int // Position: end of token
    top int // Index of top of stack
    stack []int
    data []byte
    arrayStart int // Start of the current item of interest
    commentDepth int
    significand uint64
    significandSign int
    exponent int
    exponentSign int
    exponentAdjust int
    month int
    day int
    hour int
    minute int
    second int
    subsecond int
    subsecondMultiplier int
    timezone []byte
}

func (this *Parser) Init(maxDepth int) {
    this.stack = make([]int, maxDepth)
    this.significandSign = 1
    this.exponentSign = 1
    this.subsecondMultiplier = 1000000000
    this.timezone = make([]byte, 0, 40)
}

func NewParser(maxDepth int) *Parser {
    this := new(Parser)
    this.Init(maxDepth)
    return this
}

func (this *Parser) flushByteArray(index int, callbacks CteDecoderCallbacks) error {
    err := callbacks.OnArrayData(this.data[this.arrayStart:index])
    if err != nil {
        return err
    }
    this.arrayStart = index
    return nil
}

func (this *Parser) flushAndAddEscapedCharacter(index int, escapedCharacter byte, callbacks CteDecoderCallbacks) error {
    this.data[index] = escapedCharacter
    if err := this.flushByteArray(index+1, callbacks); err != nil {
        return err
    }
    // Get past escape initiator and escape char
    this.arrayStart = index + 2
    return nil
}

func (this *Parser) Parse(src []byte, callbacks CteDecoderCallbacks) (isComplete bool, err error) {
//  if this.ts > 0 {
        // TODO: Read from undeflow buffer
//  }
    this.data = src
    p := 0 // Position: current
    pe := len(this.data) // Position: end of buffer
    // TODO: Change to -1 and check for end of file
    eof := pe // Position: end of file

    _ = eof
    
    
//line cte.go:1835
	{
	 this.cs = cte_start
	 this.top = 0
	}

//line cte.go:1841
	{
	var _klen int
	var _trans int
	var _acts int
	var _nacts uint
	var _keys int
	if p == pe {
		goto _test_eof
	}
	if  this.cs == 0 {
		goto _out
	}
_resume:
	_keys = int(_cte_key_offsets[ this.cs])
	_trans = int(_cte_index_offsets[ this.cs])

	_klen = int(_cte_single_lengths[ this.cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + _klen - 1)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + ((_upper - _lower) >> 1)
			switch {
			case  this.data[p] < _cte_trans_keys[_mid]:
				_upper = _mid - 1
			case  this.data[p] > _cte_trans_keys[_mid]:
				_lower = _mid + 1
			default:
				_trans += int(_mid - int(_keys))
				goto _match
			}
		}
		_keys += _klen
		_trans += _klen
	}

	_klen = int(_cte_range_lengths[ this.cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + (_klen << 1) - 2)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + (((_upper - _lower) >> 1) & ^1)
			switch {
			case  this.data[p] < _cte_trans_keys[_mid]:
				_upper = _mid - 2
			case  this.data[p] > _cte_trans_keys[_mid + 1]:
				_lower = _mid + 2
			default:
				_trans += int((_mid - int(_keys)) >> 1)
				goto _match
			}
		}
		_trans += _klen
	}

_match:
	_trans = int(_cte_indicies[_trans])
	 this.cs = int(_cte_trans_targs[_trans])

	if _cte_trans_actions[_trans] == 0 {
		goto _again
	}

	_acts = int(_cte_trans_actions[_trans])
	_nacts = uint(_cte_actions[_acts]); _acts++
	for ; _nacts > 0; _nacts-- {
		_acts++
		switch _cte_actions[_acts-1] {
		case 0:
//line cte.rl:46

        err = callbacks.OnNil()
        if err != nil {
            p++; goto _out

        }
    
		case 1:
//line cte.rl:53

        err = callbacks.OnBool(true)
        if err != nil {
            p++; goto _out

        }
    
		case 2:
//line cte.rl:60

        err = callbacks.OnBool(false)
        if err != nil {
            p++; goto _out

        }
    
		case 3:
//line cte.rl:69

        this.significandSign = -1
    
		case 4:
//line cte.rl:73

        this.exponentSign = -1
    
		case 5:
//line cte.rl:77

        this.significand = this.significand * 10 + uint64( this.data[p] - '0')
    
		case 6:
//line cte.rl:81

        this.significand = (this.significand << 4) | uint64( this.data[p] - '0')
    
		case 7:
//line cte.rl:83

        this.significand = (this.significand << 4) | uint64( this.data[p] - 'a' + 10)
    
		case 8:
//line cte.rl:87

        this.significand = this.significand * 10 + uint64( this.data[p] - '0')
        this.exponentAdjust--
    
		case 9:
//line cte.rl:92

        this.significand = (this.significand << 4) | uint64( this.data[p] - '0')
        this.exponentAdjust -= 4
    
		case 10:
//line cte.rl:95

        this.significand = (this.significand << 4) | uint64( this.data[p] - 'a' + 10)
        this.exponentAdjust -= 4
    
		case 11:
//line cte.rl:100

        this.exponent = this.exponent * 10 + int( this.data[p] - '0')
    
		case 12:
//line cte.rl:109

        this.significand = (this.significand << 1) | uint64( this.data[p] - '0')
    
		case 13:
//line cte.rl:113

        this.significand = (this.significand << 3) | uint64( this.data[p] - '0')
    
		case 14:
//line cte.rl:119

        if this.significandSign >= 0 {
            err = callbacks.OnPositiveInt(this.significand)
        } else {
            err = callbacks.OnNegativeInt(this.significand)
        }
        this.significandSign = 1
        this.significand = 0
        if err != nil {
            p++; goto _out

        }
    
		case 15:
//line cte.rl:132

        err = callbacks.OnDecimalFloat(int64(this.significand) * int64(this.significandSign), (this.exponent+this.exponentAdjust) * this.exponentSign)
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
        if err != nil {
            p++; goto _out

        }
    
		case 16:
//line cte.rl:144

        exponent := float64((this.exponent * this.exponentSign + this.exponentAdjust))
        err = callbacks.OnFloat(float64(this.significandSign) * float64(this.significand) * math.Pow(2.0, exponent))
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
        if err != nil {
            p++; goto _out

        }
    
		case 17:
//line cte.rl:159

        err = callbacks.OnFloat(math.Inf(this.significandSign))
        this.significandSign = 1
        if err != nil {
            p++; goto _out

        }
    
		case 18:
//line cte.rl:167

        err = callbacks.OnFloat(math.NaN())
        if err != nil {
            p++; goto _out

        }
    
		case 19:
//line cte.rl:173

        // Just map it to regular NaN
        err = callbacks.OnFloat(math.NaN())
        if err != nil {
            p++; goto _out

        }
    
		case 20:
//line cte.rl:181

        this.month = this.month * 10 + int( this.data[p] - '0')
    
		case 21:
//line cte.rl:185

        this.day = this.day * 10 + int( this.data[p] - '0')
    
		case 22:
//line cte.rl:189

        this.hour = this.hour * 10 + int( this.data[p] - '0')
    
		case 23:
//line cte.rl:193

        this.minute = this.minute * 10 + int( this.data[p] - '0')
    
		case 24:
//line cte.rl:197

        this.second = this.second * 10 + int( this.data[p] - '0')
    
		case 25:
//line cte.rl:201

        this.subsecond = this.subsecond * 10 + int( this.data[p] - '0')
        this.subsecondMultiplier /= 10
    
		case 26:
//line cte.rl:206

        this.timezone = append(this.timezone,  this.data[p])
    
		case 27:
//line cte.rl:213

        year := int(this.significand) * this.significandSign
        err = callbacks.OnDate(year, this.month, this.day)
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        if err != nil {
            p++; goto _out

        }
    
		case 28:
//line cte.rl:225

        nanosecond := this.subsecond * this.subsecondMultiplier
        err = callbacks.OnTimeTZ(this.hour, this.minute, this.second, nanosecond, string(this.timezone))
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
        if err != nil {
            p++; goto _out

        }
    
		case 29:
//line cte.rl:239

        year := int(this.significand) * this.significandSign
        nanosecond := this.subsecond * this.subsecondMultiplier
        err = callbacks.OnTimestampTZ(year, this.month, this.day, this.hour, this.minute, this.second, nanosecond, string(this.timezone))
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
        if err != nil {
            p++; goto _out

        }
    
		case 30:
//line cte.rl:258

        err = callbacks.OnListBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 65; goto _again

    
		case 31:
//line cte.rl:266

        err = callbacks.OnUnorderedMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 158; goto _again

    
		case 32:
//line cte.rl:274

        err = callbacks.OnOrderedMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 338; goto _again

    
		case 33:
//line cte.rl:282

        err = callbacks.OnMetadataMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 518; goto _again

    
		case 34:
//line cte.rl:290

        this.arrayStart = p + 1
        err = callbacks.OnCommentBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 54; goto _again

    
		case 35:
//line cte.rl:299

        if this.commentDepth == 0 {
            err = callbacks.OnCommentBegin()
        } else {
            err = callbacks.OnArrayData(this.data[this.arrayStart:p+1])
        }
        this.arrayStart = p + 1
        this.commentDepth++
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 55; goto _again

    
		case 36:
//line cte.rl:313

        this.arrayStart = p + 1
        err = callbacks.OnStringBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 58; goto _again

    
		case 37:
//line cte.rl:331

        this.arrayStart = p + 1
        err = callbacks.OnURIBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 63; goto _again

    
		case 38:
//line cte.rl:350

            err = callbacks.OnArrayData(this.data[this.arrayStart:p])
            if err != nil {
                p++; goto _out

            }
            err = callbacks.OnArrayEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 39:
//line cte.rl:363

            err = callbacks.OnArrayData(this.data[this.arrayStart:p-1])
            if err != nil {
                p++; goto _out

            }
            this.arrayStart = p-1
            this.commentDepth--
            if this.commentDepth == 0 {
                err = callbacks.OnArrayEnd()
                if err != nil {
                    p++; goto _out

                }
            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 40:
//line cte.rl:383

                    err = this.flushAndAddEscapedCharacter(p-1, '\\', callbacks)
                    if err != nil {
                        p++; goto _out

                    }
                
		case 41:
//line cte.rl:389

                    err = this.flushAndAddEscapedCharacter(p-1, '\n', callbacks)
                    if err != nil {
                        p++; goto _out

                    }
                
		case 42:
//line cte.rl:395

                    err = this.flushAndAddEscapedCharacter(p-1, '\r', callbacks)
                    if err != nil {
                        p++; goto _out

                    }
                
		case 43:
//line cte.rl:401

                    err = this.flushAndAddEscapedCharacter(p-1, '\t', callbacks)
                    if err != nil {
                        p++; goto _out

                    }
                
		case 44:
//line cte.rl:407

                    err = this.flushAndAddEscapedCharacter(p-1, '"', callbacks)
                    if err != nil {
                        p++; goto _out

                    }
                
		case 45:
//line cte.rl:413

                    return false, fmt.Errorf("\\%c: Illegal escape encoding", this.data[p])
                
		case 46:
//line cte.rl:420

        err = callbacks.OnArrayData(this.data[this.arrayStart:p])
        if err != nil {
            p++; goto _out

        }
        err = callbacks.OnArrayEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 48:
//line cte.rl:444

            err = callbacks.OnArrayData(this.data[this.arrayStart:p])
            if err != nil {
                p++; goto _out

            }
            err = callbacks.OnArrayEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 49:
//line cte.rl:458

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 50:
//line cte.rl:468

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 51:
//line cte.rl:478

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
		case 52:
//line cte.rl:488

            err = callbacks.OnContainerEnd()
            if err != nil {
                p++; goto _out

            }
             this.top--;  this.cs =  this.stack[ this.top]
goto _again

        
//line cte.go:2432
		}
	}

_again:
	if  this.cs == 0 {
		goto _out
	}
	p++
	if p != pe {
		goto _resume
	}
	_test_eof: {}
	if p == eof {
		__acts := _cte_eof_actions[ this.cs]
		__nacts := uint(_cte_actions[__acts]); __acts++
		for ; __nacts > 0; __nacts-- {
			__acts++
			switch _cte_actions[__acts-1] {
			case 14:
//line cte.rl:119

        if this.significandSign >= 0 {
            err = callbacks.OnPositiveInt(this.significand)
        } else {
            err = callbacks.OnNegativeInt(this.significand)
        }
        this.significandSign = 1
        this.significand = 0
        if err != nil {
            p++; goto _out

        }
    
			case 15:
//line cte.rl:132

        err = callbacks.OnDecimalFloat(int64(this.significand) * int64(this.significandSign), (this.exponent+this.exponentAdjust) * this.exponentSign)
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
        if err != nil {
            p++; goto _out

        }
    
			case 16:
//line cte.rl:144

        exponent := float64((this.exponent * this.exponentSign + this.exponentAdjust))
        err = callbacks.OnFloat(float64(this.significandSign) * float64(this.significand) * math.Pow(2.0, exponent))
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
        if err != nil {
            p++; goto _out

        }
    
			case 17:
//line cte.rl:159

        err = callbacks.OnFloat(math.Inf(this.significandSign))
        this.significandSign = 1
        if err != nil {
            p++; goto _out

        }
    
			case 18:
//line cte.rl:167

        err = callbacks.OnFloat(math.NaN())
        if err != nil {
            p++; goto _out

        }
    
			case 19:
//line cte.rl:173

        // Just map it to regular NaN
        err = callbacks.OnFloat(math.NaN())
        if err != nil {
            p++; goto _out

        }
    
			case 27:
//line cte.rl:213

        year := int(this.significand) * this.significandSign
        err = callbacks.OnDate(year, this.month, this.day)
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        if err != nil {
            p++; goto _out

        }
    
			case 28:
//line cte.rl:225

        nanosecond := this.subsecond * this.subsecondMultiplier
        err = callbacks.OnTimeTZ(this.hour, this.minute, this.second, nanosecond, string(this.timezone))
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
        if err != nil {
            p++; goto _out

        }
    
			case 29:
//line cte.rl:239

        year := int(this.significand) * this.significandSign
        nanosecond := this.subsecond * this.subsecondMultiplier
        err = callbacks.OnTimestampTZ(year, this.month, this.day, this.hour, this.minute, this.second, nanosecond, string(this.timezone))
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
        if err != nil {
            p++; goto _out

        }
    
			case 47:
//line cte.rl:432

        err = callbacks.OnArrayData(this.data[this.arrayStart:p])
        if err != nil {
            p++; goto _out

        }
        err = callbacks.OnArrayEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
//line cte.go:2592
			}
		}
	}

	_out: {}
	}

//line cte.rl:576


    if this.ts > 0 {
        // TODO: Copy to underflow buffer
        // arrayStart
        // ts doesn't seem to get used?
        // copy(this.underflow, data[ts:pe])
        // p = 0
        // pe = pe - ts
    }
    // TODO
    if this.cs == cte_error {
        err = fmt.Errorf("Parse error at %v", p)
    }
//    isComplete = this.cs == cte_parse_first;
    // TODO: Maybe there's no way to detect completion?
    isComplete = true
    return
}
