
//line decoder.rl:1
package cte

import (
    "fmt"
    "math"
)

type CteDecoderCallbacks interface {
    OnNil() error
    OnBool(value bool) error
    OnPositiveInt(value uint64) error
    OnNegativeInt(value uint64) error
    OnDecimalFloat(significand int64, exponent int) error
    OnFloat(value float64) error
    OnDate(year, month, day int) error
    OnTimeTZ(hour, minute, second, nanosecond int, tz string) error
    OnTimeLoc(hour, minute, second, nanosecond int, latitude, longitude float32) error
    OnTimestampTZ(year, month, day, hour, minute, second, nanosecond int, tz string) error
    OnTimestampLoc(year, month, day, hour, minute, second, nanosecond int, latitude, longitude float32) error
    OnListBegin() error
    OnMapBegin() error
    OnMetadataMapBegin() error
    OnContainerEnd() error
    OnBytesBegin() error
    OnStringBegin() error
    OnURIBegin() error
    OnCommentBegin() error
    OnArrayData(bytes []byte) error
    OnArrayEnd() error
}


//line decoder.rl:580




//line decoder.go:41
var _cte_actions []byte = []byte{
	0, 1, 0, 1, 1, 1, 2, 1, 3, 
	1, 4, 1, 5, 1, 6, 1, 7, 
	1, 8, 1, 9, 1, 10, 1, 11, 
	1, 12, 1, 13, 1, 14, 1, 15, 
	1, 16, 1, 17, 1, 18, 1, 19, 
	1, 20, 1, 21, 1, 22, 1, 23, 
	1, 24, 1, 25, 1, 26, 1, 27, 
	1, 28, 1, 29, 1, 30, 1, 31, 
	1, 32, 1, 33, 1, 34, 1, 35, 
	1, 36, 1, 37, 1, 41, 1, 42, 
	1, 43, 1, 44, 1, 45, 1, 46, 
	1, 47, 1, 48, 1, 49, 1, 50, 
	1, 51, 1, 52, 1, 56, 1, 65, 
	1, 66, 1, 67, 2, 5, 22, 2, 
	14, 65, 2, 14, 66, 2, 14, 67, 
	2, 15, 65, 2, 15, 66, 2, 15, 
	67, 2, 16, 65, 2, 16, 66, 2, 
	16, 67, 2, 17, 65, 2, 17, 66, 
	2, 17, 67, 2, 18, 65, 2, 18, 
	66, 2, 18, 67, 2, 19, 65, 2, 
	19, 66, 2, 19, 67, 2, 26, 28, 
	2, 26, 29, 2, 26, 33, 2, 27, 
	65, 2, 27, 66, 2, 27, 67, 2, 
	28, 65, 2, 28, 66, 2, 28, 67, 
	2, 29, 65, 2, 29, 66, 2, 29, 
	67, 2, 36, 37, 2, 36, 38, 2, 
	36, 39, 2, 36, 40, 2, 37, 65, 
	2, 37, 66, 2, 37, 67, 2, 53, 
	55, 2, 54, 55, 2, 57, 62, 2, 
	58, 62, 2, 59, 62, 2, 60, 62, 
	2, 61, 62, 2, 63, 64, 3, 26, 
	28, 33, 3, 26, 29, 33, 3, 36, 
	37, 65, 3, 36, 37, 66, 3, 36, 
	37, 67, 
}

var _cte_key_offsets []int16 = []int16{
	0, 0, 29, 32, 34, 37, 39, 41, 
	44, 45, 47, 49, 50, 52, 54, 56, 
	65, 66, 68, 72, 74, 79, 81, 83, 
	87, 91, 96, 100, 102, 103, 104, 105, 
	107, 109, 111, 112, 114, 116, 118, 127, 
	132, 133, 134, 135, 136, 138, 139, 140, 
	141, 142, 143, 144, 145, 146, 148, 150, 
	152, 154, 156, 158, 159, 161, 163, 165, 
	167, 172, 176, 179, 188, 196, 204, 217, 
	247, 250, 259, 261, 264, 266, 274, 276, 
	279, 280, 282, 284, 285, 287, 289, 296, 
	298, 306, 315, 329, 337, 345, 353, 361, 
	369, 377, 385, 391, 397, 398, 400, 408, 
	412, 414, 421, 426, 455, 460, 472, 474, 
	481, 483, 490, 494, 504, 508, 513, 517, 
	519, 526, 527, 528, 529, 534, 536, 549, 
	559, 561, 563, 564, 566, 568, 575, 577, 
	585, 594, 608, 616, 624, 632, 640, 648, 
	656, 664, 670, 680, 685, 686, 687, 688, 
	689, 691, 692, 697, 698, 699, 700, 701, 
	706, 707, 708, 709, 728, 733, 751, 753, 
	755, 757, 776, 795, 814, 816, 818, 820, 
	848, 851, 861, 867, 869, 898, 901, 910, 
	912, 915, 917, 925, 927, 930, 931, 933, 
	935, 936, 938, 940, 947, 949, 957, 966, 
	980, 988, 996, 1004, 1012, 1020, 1028, 1036, 
	1042, 1048, 1049, 1051, 1059, 1063, 1065, 1072, 
	1077, 1082, 1094, 1096, 1103, 1105, 1112, 1116, 
	1126, 1130, 1135, 1139, 1141, 1148, 1149, 1150, 
	1151, 1156, 1158, 1171, 1181, 1183, 1185, 1186, 
	1188, 1190, 1197, 1199, 1207, 1216, 1230, 1238, 
	1246, 1254, 1262, 1270, 1278, 1286, 1292, 1302, 
	1307, 1308, 1309, 1310, 1311, 1313, 1314, 1319, 
	1320, 1321, 1322, 1323, 1328, 1329, 1330, 1331, 
	1350, 1355, 1373, 1375, 1377, 1379, 1398, 1417, 
	1436, 1438, 1440, 1442, 1444, 1447, 1449, 1457, 
	1461, 1464, 1465, 1467, 1469, 1470, 1472, 1474, 
	1481, 1483, 1491, 1502, 1517, 1533, 1541, 1549, 
	1557, 1565, 1573, 1581, 1589, 1595, 1601, 1602, 
	1604, 1613, 1617, 1619, 1627, 1654, 1659, 1672, 
	1674, 1682, 1684, 1692, 1696, 1707, 1711, 1716, 
	1720, 1722, 1730, 1731, 1732, 1733, 1739, 1741, 
	1755, 1766, 1768, 1770, 1771, 1773, 1775, 1782, 
	1784, 1792, 1803, 1818, 1834, 1842, 1850, 1858, 
	1866, 1874, 1882, 1890, 1896, 1907, 1910, 1911, 
	1912, 1913, 1914, 1915, 1916, 1917, 1937, 1943, 
	1962, 1964, 1966, 1968, 1988, 2008, 2028, 2030, 
	2032, 2034, 2062, 2065, 2075, 2081, 2083, 2112, 
	2115, 2124, 2126, 2129, 2131, 2139, 2141, 2144, 
	2145, 2147, 2149, 2150, 2152, 2154, 2161, 2163, 
	2171, 2180, 2194, 2202, 2210, 2218, 2226, 2234, 
	2242, 2250, 2256, 2262, 2263, 2265, 2273, 2277, 
	2279, 2286, 2291, 2296, 2308, 2310, 2317, 2319, 
	2326, 2330, 2340, 2344, 2349, 2353, 2355, 2362, 
	2363, 2364, 2365, 2370, 2372, 2385, 2395, 2397, 
	2399, 2400, 2402, 2404, 2411, 2413, 2421, 2430, 
	2444, 2452, 2460, 2468, 2476, 2484, 2492, 2500, 
	2506, 2516, 2521, 2522, 2523, 2524, 2525, 2527, 
	2528, 2533, 2534, 2535, 2536, 2537, 2542, 2543, 
	2544, 2545, 2564, 2569, 2587, 2589, 2591, 2593, 
	2612, 2631, 2650, 2652, 2654, 2656, 2658, 2661, 
	2663, 2671, 2675, 2678, 2679, 2681, 2683, 2684, 
	2686, 2688, 2695, 2697, 2705, 2716, 2731, 2747, 
	2755, 2763, 2771, 2779, 2787, 2795, 2803, 2809, 
	2815, 2816, 2818, 2827, 2831, 2833, 2841, 2868, 
	2873, 2886, 2888, 2896, 2898, 2906, 2910, 2921, 
	2925, 2930, 2934, 2936, 2944, 2945, 2946, 2947, 
	2953, 2955, 2969, 2980, 2982, 2984, 2985, 2987, 
	2989, 2996, 2998, 3006, 3017, 3032, 3048, 3056, 
	3064, 3072, 3080, 3088, 3096, 3104, 3110, 3121, 
	3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 
	3151, 3157, 3176, 3178, 3180, 3182, 3202, 3222, 
	3242, 3244, 3246, 3248, 3256, 3260, 3267, 3273, 
	3280, 3293, 3300, 3307, 3314, 3321, 3328, 3335, 
	3342, 3347, 3352, 3359, 3365, 3376, 3382, 3388, 
	3397, 3403, 3407, 3419, 3428, 3434, 3441, 3454, 
	3461, 3468, 3475, 3482, 3489, 3496, 3503, 3508, 
	3517, 3521, 3525, 3543, 3547, 3564, 3582, 3600, 
	3618, 3618, 3620, 3620, 3620, 3620, 3620, 3620, 
	3620, 
}

var _cte_trans_keys []byte = []byte{
	0, 13, 32, 34, 40, 45, 47, 48, 
	64, 91, 95, 98, 104, 117, 123, 9, 
	10, 49, 57, 65, 90, 97, 122, 194, 
	223, 224, 239, 240, 244, 0, 48, 57, 
	48, 57, 45, 48, 57, 48, 57, 48, 
	57, 58, 48, 57, 58, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 48, 57, 
	43, 45, 95, 47, 57, 65, 90, 97, 
	122, 45, 48, 57, 43, 45, 48, 57, 
	48, 57, 0, 48, 64, 49, 57, 48, 
	49, 48, 55, 48, 57, 97, 102, 48, 
	57, 97, 102, 112, 48, 57, 97, 102, 
	43, 45, 48, 57, 48, 57, 105, 110, 
	102, 42, 47, 48, 57, 48, 57, 58, 
	48, 57, 48, 57, 48, 57, 43, 45, 
	95, 47, 57, 65, 90, 97, 122, 102, 
	105, 110, 115, 116, 97, 108, 115, 101, 
	97, 105, 110, 108, 110, 97, 110, 114, 
	117, 101, 128, 191, 128, 191, 128, 191, 
	128, 191, 128, 191, 128, 191, 10, 42, 
	47, 42, 47, 42, 47, 34, 92, 34, 
	92, 110, 114, 116, 32, 33, 35, 126, 
	34, 32, 126, 13, 32, 34, 9, 10, 
	48, 57, 97, 102, 13, 32, 9, 10, 
	48, 57, 97, 102, 13, 32, 9, 10, 
	48, 57, 97, 102, 13, 32, 34, 43, 
	47, 9, 10, 48, 57, 65, 90, 97, 
	122, 0, 13, 32, 34, 40, 45, 47, 
	48, 64, 91, 93, 95, 98, 104, 117, 
	123, 9, 10, 49, 57, 65, 90, 97, 
	122, 194, 223, 224, 239, 240, 244, 0, 
	48, 57, 13, 32, 45, 46, 93, 9, 
	10, 48, 57, 48, 57, 45, 48, 57, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	48, 57, 48, 57, 58, 48, 57, 58, 
	48, 57, 48, 57, 58, 48, 57, 48, 
	57, 13, 32, 46, 47, 93, 9, 10, 
	48, 57, 13, 32, 47, 93, 9, 10, 
	48, 57, 43, 45, 95, 47, 57, 65, 
	90, 97, 122, 13, 32, 43, 45, 93, 
	95, 9, 10, 47, 57, 65, 90, 97, 
	122, 13, 32, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 13, 
	32, 47, 93, 9, 10, 45, 48, 57, 
	13, 32, 93, 101, 9, 10, 48, 57, 
	43, 45, 48, 57, 48, 57, 13, 32, 
	93, 9, 10, 48, 57, 13, 32, 93, 
	9, 10, 0, 13, 32, 34, 40, 45, 
	47, 48, 64, 91, 95, 98, 104, 117, 
	123, 9, 10, 49, 57, 65, 90, 97, 
	122, 194, 223, 224, 239, 240, 244, 0, 
	48, 64, 49, 57, 13, 32, 45, 46, 
	93, 98, 111, 120, 9, 10, 48, 57, 
	48, 49, 13, 32, 93, 9, 10, 48, 
	49, 48, 55, 13, 32, 93, 9, 10, 
	48, 55, 48, 57, 97, 102, 13, 32, 
	46, 93, 9, 10, 48, 57, 97, 102, 
	48, 57, 97, 102, 112, 48, 57, 97, 
	102, 43, 45, 48, 57, 48, 57, 13, 
	32, 93, 9, 10, 48, 57, 105, 110, 
	102, 13, 32, 93, 9, 10, 42, 47, 
	13, 32, 45, 46, 58, 93, 98, 111, 
	120, 9, 10, 48, 57, 13, 32, 45, 
	46, 58, 93, 9, 10, 48, 57, 48, 
	57, 48, 57, 58, 48, 57, 48, 57, 
	13, 32, 46, 47, 93, 9, 10, 48, 
	57, 13, 32, 47, 93, 9, 10, 48, 
	57, 43, 45, 95, 47, 57, 65, 90, 
	97, 122, 13, 32, 43, 45, 93, 95, 
	9, 10, 47, 57, 65, 90, 97, 122, 
	13, 32, 47, 93, 9, 10, 48, 57, 
	13, 32, 47, 93, 9, 10, 48, 57, 
	13, 32, 47, 93, 9, 10, 48, 57, 
	13, 32, 47, 93, 9, 10, 48, 57, 
	13, 32, 47, 93, 9, 10, 48, 57, 
	13, 32, 47, 93, 9, 10, 48, 57, 
	13, 32, 47, 93, 9, 10, 48, 57, 
	13, 32, 47, 93, 9, 10, 13, 32, 
	45, 46, 58, 93, 9, 10, 48, 57, 
	102, 105, 110, 115, 116, 97, 108, 115, 
	101, 97, 105, 110, 13, 32, 93, 9, 
	10, 108, 110, 97, 110, 13, 32, 93, 
	9, 10, 114, 117, 101, 13, 32, 34, 
	93, 95, 9, 10, 48, 57, 65, 90, 
	97, 122, 194, 223, 224, 239, 240, 244, 
	13, 32, 93, 9, 10, 13, 32, 93, 
	95, 9, 10, 48, 57, 65, 90, 97, 
	122, 194, 223, 224, 239, 240, 244, 128, 
	191, 128, 191, 128, 191, 13, 32, 34, 
	93, 95, 9, 10, 48, 57, 65, 90, 
	97, 122, 194, 223, 224, 239, 240, 244, 
	13, 32, 34, 93, 95, 9, 10, 48, 
	57, 65, 90, 97, 122, 194, 223, 224, 
	239, 240, 244, 13, 32, 34, 93, 95, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	194, 223, 224, 239, 240, 244, 128, 191, 
	128, 191, 128, 191, 0, 13, 32, 34, 
	40, 45, 47, 48, 64, 95, 98, 104, 
	117, 125, 9, 10, 49, 57, 65, 90, 
	97, 122, 194, 223, 224, 239, 240, 244, 
	0, 48, 57, 13, 32, 45, 46, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 42, 47, 0, 13, 32, 
	34, 40, 45, 47, 48, 64, 91, 95, 
	98, 104, 117, 123, 9, 10, 49, 57, 
	65, 90, 97, 122, 194, 223, 224, 239, 
	240, 244, 0, 48, 57, 13, 32, 45, 
	46, 125, 9, 10, 48, 57, 48, 57, 
	45, 48, 57, 48, 57, 13, 32, 47, 
	125, 9, 10, 48, 57, 48, 57, 58, 
	48, 57, 58, 48, 57, 48, 57, 58, 
	48, 57, 48, 57, 13, 32, 46, 47, 
	125, 9, 10, 48, 57, 13, 32, 47, 
	125, 9, 10, 48, 57, 43, 45, 95, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	43, 45, 95, 125, 9, 10, 47, 57, 
	65, 90, 97, 122, 13, 32, 47, 125, 
	9, 10, 48, 57, 13, 32, 47, 125, 
	9, 10, 48, 57, 13, 32, 47, 125, 
	9, 10, 48, 57, 13, 32, 47, 125, 
	9, 10, 48, 57, 13, 32, 47, 125, 
	9, 10, 48, 57, 13, 32, 47, 125, 
	9, 10, 48, 57, 13, 32, 47, 125, 
	9, 10, 48, 57, 13, 32, 47, 125, 
	9, 10, 13, 32, 47, 125, 9, 10, 
	45, 48, 57, 13, 32, 101, 125, 9, 
	10, 48, 57, 43, 45, 48, 57, 48, 
	57, 13, 32, 125, 9, 10, 48, 57, 
	13, 32, 125, 9, 10, 0, 48, 64, 
	49, 57, 13, 32, 45, 46, 98, 111, 
	120, 125, 9, 10, 48, 57, 48, 49, 
	13, 32, 125, 9, 10, 48, 49, 48, 
	55, 13, 32, 125, 9, 10, 48, 55, 
	48, 57, 97, 102, 13, 32, 46, 125, 
	9, 10, 48, 57, 97, 102, 48, 57, 
	97, 102, 112, 48, 57, 97, 102, 43, 
	45, 48, 57, 48, 57, 13, 32, 125, 
	9, 10, 48, 57, 105, 110, 102, 13, 
	32, 125, 9, 10, 42, 47, 13, 32, 
	45, 46, 58, 98, 111, 120, 125, 9, 
	10, 48, 57, 13, 32, 45, 46, 58, 
	125, 9, 10, 48, 57, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 13, 32, 
	46, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 43, 
	45, 95, 47, 57, 65, 90, 97, 122, 
	13, 32, 43, 45, 95, 125, 9, 10, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 13, 32, 45, 46, 
	58, 125, 9, 10, 48, 57, 102, 105, 
	110, 115, 116, 97, 108, 115, 101, 97, 
	105, 110, 13, 32, 125, 9, 10, 108, 
	110, 97, 110, 13, 32, 125, 9, 10, 
	114, 117, 101, 13, 32, 34, 95, 125, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	194, 223, 224, 239, 240, 244, 13, 32, 
	125, 9, 10, 13, 32, 95, 125, 9, 
	10, 48, 57, 65, 90, 97, 122, 194, 
	223, 224, 239, 240, 244, 128, 191, 128, 
	191, 128, 191, 13, 32, 34, 95, 125, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	194, 223, 224, 239, 240, 244, 13, 32, 
	34, 95, 125, 9, 10, 48, 57, 65, 
	90, 97, 122, 194, 223, 224, 239, 240, 
	244, 13, 32, 34, 95, 125, 9, 10, 
	48, 57, 65, 90, 97, 122, 194, 223, 
	224, 239, 240, 244, 128, 191, 128, 191, 
	128, 191, 48, 57, 45, 48, 57, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 42, 47, 48, 57, 58, 48, 57, 
	58, 48, 57, 48, 57, 58, 48, 57, 
	48, 57, 13, 32, 46, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 42, 43, 45, 47, 95, 
	48, 57, 65, 90, 97, 122, 13, 32, 
	43, 45, 47, 61, 95, 9, 10, 48, 
	57, 65, 90, 97, 122, 13, 32, 42, 
	43, 45, 47, 61, 95, 9, 10, 48, 
	57, 65, 90, 97, 122, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 13, 32, 47, 61, 9, 
	10, 45, 48, 57, 13, 32, 47, 61, 
	101, 9, 10, 48, 57, 43, 45, 48, 
	57, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 0, 13, 32, 34, 40, 
	45, 47, 48, 64, 95, 98, 104, 117, 
	9, 10, 49, 57, 65, 90, 97, 122, 
	194, 223, 224, 239, 240, 244, 0, 48, 
	64, 49, 57, 13, 32, 45, 46, 47, 
	61, 98, 111, 120, 9, 10, 48, 57, 
	48, 49, 13, 32, 47, 61, 9, 10, 
	48, 49, 48, 55, 13, 32, 47, 61, 
	9, 10, 48, 55, 48, 57, 97, 102, 
	13, 32, 46, 47, 61, 9, 10, 48, 
	57, 97, 102, 48, 57, 97, 102, 112, 
	48, 57, 97, 102, 43, 45, 48, 57, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 105, 110, 102, 13, 32, 47, 
	61, 9, 10, 42, 47, 13, 32, 45, 
	46, 47, 58, 61, 98, 111, 120, 9, 
	10, 48, 57, 13, 32, 45, 46, 47, 
	58, 61, 9, 10, 48, 57, 48, 57, 
	48, 57, 58, 48, 57, 48, 57, 13, 
	32, 46, 47, 61, 9, 10, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	42, 43, 45, 47, 95, 48, 57, 65, 
	90, 97, 122, 13, 32, 43, 45, 47, 
	61, 95, 9, 10, 48, 57, 65, 90, 
	97, 122, 13, 32, 42, 43, 45, 47, 
	61, 95, 9, 10, 48, 57, 65, 90, 
	97, 122, 13, 32, 47, 61, 9, 10, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	13, 32, 45, 46, 47, 58, 61, 9, 
	10, 48, 57, 102, 105, 116, 97, 108, 
	115, 101, 114, 117, 101, 13, 32, 34, 
	47, 61, 95, 9, 10, 48, 57, 65, 
	90, 97, 122, 194, 223, 224, 239, 240, 
	244, 13, 32, 47, 61, 9, 10, 13, 
	32, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 194, 223, 224, 239, 
	240, 244, 128, 191, 128, 191, 128, 191, 
	13, 32, 34, 47, 61, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 194, 223, 
	224, 239, 240, 244, 13, 32, 34, 47, 
	61, 95, 9, 10, 48, 57, 65, 90, 
	97, 122, 194, 223, 224, 239, 240, 244, 
	13, 32, 34, 47, 61, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 194, 223, 
	224, 239, 240, 244, 128, 191, 128, 191, 
	128, 191, 0, 13, 32, 34, 40, 41, 
	45, 47, 48, 64, 95, 98, 104, 117, 
	9, 10, 49, 57, 65, 90, 97, 122, 
	194, 223, 224, 239, 240, 244, 0, 48, 
	57, 13, 32, 45, 46, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 42, 47, 0, 13, 32, 34, 40, 
	45, 47, 48, 64, 91, 95, 98, 104, 
	117, 123, 9, 10, 49, 57, 65, 90, 
	97, 122, 194, 223, 224, 239, 240, 244, 
	0, 48, 57, 13, 32, 41, 45, 46, 
	9, 10, 48, 57, 48, 57, 45, 48, 
	57, 48, 57, 13, 32, 41, 47, 9, 
	10, 48, 57, 48, 57, 58, 48, 57, 
	58, 48, 57, 48, 57, 58, 48, 57, 
	48, 57, 13, 32, 41, 46, 47, 9, 
	10, 48, 57, 13, 32, 41, 47, 9, 
	10, 48, 57, 43, 45, 95, 47, 57, 
	65, 90, 97, 122, 13, 32, 41, 43, 
	45, 95, 9, 10, 47, 57, 65, 90, 
	97, 122, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	13, 32, 41, 47, 9, 10, 45, 48, 
	57, 13, 32, 41, 101, 9, 10, 48, 
	57, 43, 45, 48, 57, 48, 57, 13, 
	32, 41, 9, 10, 48, 57, 13, 32, 
	41, 9, 10, 0, 48, 64, 49, 57, 
	13, 32, 41, 45, 46, 98, 111, 120, 
	9, 10, 48, 57, 48, 49, 13, 32, 
	41, 9, 10, 48, 49, 48, 55, 13, 
	32, 41, 9, 10, 48, 55, 48, 57, 
	97, 102, 13, 32, 41, 46, 9, 10, 
	48, 57, 97, 102, 48, 57, 97, 102, 
	112, 48, 57, 97, 102, 43, 45, 48, 
	57, 48, 57, 13, 32, 41, 9, 10, 
	48, 57, 105, 110, 102, 13, 32, 41, 
	9, 10, 42, 47, 13, 32, 41, 45, 
	46, 58, 98, 111, 120, 9, 10, 48, 
	57, 13, 32, 41, 45, 46, 58, 9, 
	10, 48, 57, 48, 57, 48, 57, 58, 
	48, 57, 48, 57, 13, 32, 41, 46, 
	47, 9, 10, 48, 57, 13, 32, 41, 
	47, 9, 10, 48, 57, 43, 45, 95, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	41, 43, 45, 95, 9, 10, 47, 57, 
	65, 90, 97, 122, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 13, 32, 41, 45, 46, 58, 
	9, 10, 48, 57, 102, 105, 110, 115, 
	116, 97, 108, 115, 101, 97, 105, 110, 
	13, 32, 41, 9, 10, 108, 110, 97, 
	110, 13, 32, 41, 9, 10, 114, 117, 
	101, 13, 32, 34, 41, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 194, 223, 
	224, 239, 240, 244, 13, 32, 41, 9, 
	10, 13, 32, 41, 95, 9, 10, 48, 
	57, 65, 90, 97, 122, 194, 223, 224, 
	239, 240, 244, 128, 191, 128, 191, 128, 
	191, 13, 32, 34, 41, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 194, 223, 
	224, 239, 240, 244, 13, 32, 34, 41, 
	95, 9, 10, 48, 57, 65, 90, 97, 
	122, 194, 223, 224, 239, 240, 244, 13, 
	32, 34, 41, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 194, 223, 224, 239, 
	240, 244, 128, 191, 128, 191, 128, 191, 
	48, 57, 45, 48, 57, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 42, 
	47, 48, 57, 58, 48, 57, 58, 48, 
	57, 48, 57, 58, 48, 57, 48, 57, 
	13, 32, 46, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 42, 43, 45, 47, 95, 48, 57, 
	65, 90, 97, 122, 13, 32, 43, 45, 
	47, 61, 95, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 42, 43, 45, 
	47, 61, 95, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 13, 32, 47, 61, 9, 10, 45, 
	48, 57, 13, 32, 47, 61, 101, 9, 
	10, 48, 57, 43, 45, 48, 57, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 0, 13, 32, 34, 40, 45, 47, 
	48, 64, 95, 98, 104, 117, 9, 10, 
	49, 57, 65, 90, 97, 122, 194, 223, 
	224, 239, 240, 244, 0, 48, 64, 49, 
	57, 13, 32, 45, 46, 47, 61, 98, 
	111, 120, 9, 10, 48, 57, 48, 49, 
	13, 32, 47, 61, 9, 10, 48, 49, 
	48, 55, 13, 32, 47, 61, 9, 10, 
	48, 55, 48, 57, 97, 102, 13, 32, 
	46, 47, 61, 9, 10, 48, 57, 97, 
	102, 48, 57, 97, 102, 112, 48, 57, 
	97, 102, 43, 45, 48, 57, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	105, 110, 102, 13, 32, 47, 61, 9, 
	10, 42, 47, 13, 32, 45, 46, 47, 
	58, 61, 98, 111, 120, 9, 10, 48, 
	57, 13, 32, 45, 46, 47, 58, 61, 
	9, 10, 48, 57, 48, 57, 48, 57, 
	58, 48, 57, 48, 57, 13, 32, 46, 
	47, 61, 9, 10, 48, 57, 13, 32, 
	47, 61, 9, 10, 48, 57, 42, 43, 
	45, 47, 95, 48, 57, 65, 90, 97, 
	122, 13, 32, 43, 45, 47, 61, 95, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	13, 32, 42, 43, 45, 47, 61, 95, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	13, 32, 47, 61, 9, 10, 48, 57, 
	13, 32, 47, 61, 9, 10, 13, 32, 
	45, 46, 47, 58, 61, 9, 10, 48, 
	57, 102, 105, 116, 97, 108, 115, 101, 
	114, 117, 101, 13, 32, 34, 47, 61, 
	95, 9, 10, 48, 57, 65, 90, 97, 
	122, 194, 223, 224, 239, 240, 244, 13, 
	32, 47, 61, 9, 10, 13, 32, 47, 
	61, 95, 9, 10, 48, 57, 65, 90, 
	97, 122, 194, 223, 224, 239, 240, 244, 
	128, 191, 128, 191, 128, 191, 13, 32, 
	34, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 194, 223, 224, 239, 
	240, 244, 13, 32, 34, 47, 61, 95, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	194, 223, 224, 239, 240, 244, 13, 32, 
	34, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 194, 223, 224, 239, 
	240, 244, 128, 191, 128, 191, 128, 191, 
	13, 32, 45, 46, 9, 10, 48, 57, 
	13, 32, 9, 10, 13, 32, 47, 9, 
	10, 48, 57, 13, 32, 46, 47, 9, 
	10, 13, 32, 47, 9, 10, 48, 57, 
	13, 32, 43, 45, 95, 9, 10, 47, 
	57, 65, 90, 97, 122, 13, 32, 47, 
	9, 10, 48, 57, 13, 32, 47, 9, 
	10, 48, 57, 13, 32, 47, 9, 10, 
	48, 57, 13, 32, 47, 9, 10, 48, 
	57, 13, 32, 47, 9, 10, 48, 57, 
	13, 32, 47, 9, 10, 48, 57, 13, 
	32, 47, 9, 10, 48, 57, 13, 32, 
	47, 9, 10, 13, 32, 47, 9, 10, 
	13, 32, 101, 9, 10, 48, 57, 13, 
	32, 9, 10, 48, 57, 13, 32, 45, 
	46, 98, 111, 120, 9, 10, 48, 57, 
	13, 32, 9, 10, 48, 49, 13, 32, 
	9, 10, 48, 55, 13, 32, 46, 9, 
	10, 48, 57, 97, 102, 13, 32, 9, 
	10, 48, 57, 13, 32, 9, 10, 13, 
	32, 45, 46, 58, 98, 111, 120, 9, 
	10, 48, 57, 13, 32, 45, 46, 58, 
	9, 10, 48, 57, 13, 32, 46, 47, 
	9, 10, 13, 32, 47, 9, 10, 48, 
	57, 13, 32, 43, 45, 95, 9, 10, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	47, 9, 10, 48, 57, 13, 32, 47, 
	9, 10, 48, 57, 13, 32, 47, 9, 
	10, 48, 57, 13, 32, 47, 9, 10, 
	48, 57, 13, 32, 47, 9, 10, 48, 
	57, 13, 32, 47, 9, 10, 48, 57, 
	13, 32, 47, 9, 10, 48, 57, 13, 
	32, 47, 9, 10, 13, 32, 45, 46, 
	58, 9, 10, 48, 57, 13, 32, 9, 
	10, 13, 32, 9, 10, 13, 32, 34, 
	95, 9, 10, 48, 57, 65, 90, 97, 
	122, 194, 223, 224, 239, 240, 244, 13, 
	32, 9, 10, 13, 32, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 194, 223, 
	224, 239, 240, 244, 13, 32, 34, 95, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	194, 223, 224, 239, 240, 244, 13, 32, 
	34, 95, 9, 10, 48, 57, 65, 90, 
	97, 122, 194, 223, 224, 239, 240, 244, 
	13, 32, 34, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 194, 223, 224, 239, 
	240, 244, 42, 47, 
}

var _cte_single_lengths []byte = []byte{
	0, 15, 1, 0, 1, 0, 0, 1, 
	1, 0, 0, 1, 0, 0, 0, 3, 
	1, 0, 2, 0, 3, 0, 0, 0, 
	0, 1, 2, 0, 1, 1, 1, 2, 
	0, 0, 1, 0, 0, 0, 3, 5, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 1, 2, 2, 2, 2, 
	5, 0, 1, 3, 2, 2, 5, 16, 
	1, 5, 0, 1, 0, 4, 0, 1, 
	1, 0, 0, 1, 0, 0, 5, 0, 
	4, 3, 6, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 1, 0, 4, 2, 
	0, 3, 3, 15, 3, 8, 0, 3, 
	0, 3, 0, 4, 0, 1, 2, 0, 
	3, 1, 1, 1, 3, 2, 9, 6, 
	0, 0, 1, 0, 0, 5, 0, 4, 
	3, 6, 4, 4, 4, 4, 4, 4, 
	4, 4, 6, 5, 1, 1, 1, 1, 
	2, 1, 3, 1, 1, 1, 1, 3, 
	1, 1, 1, 5, 3, 4, 0, 0, 
	0, 5, 5, 5, 0, 0, 0, 14, 
	1, 6, 4, 2, 15, 1, 5, 0, 
	1, 0, 4, 0, 1, 1, 0, 0, 
	1, 0, 0, 5, 0, 4, 3, 6, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 1, 0, 4, 2, 0, 3, 3, 
	3, 8, 0, 3, 0, 3, 0, 4, 
	0, 1, 2, 0, 3, 1, 1, 1, 
	3, 2, 9, 6, 0, 0, 1, 0, 
	0, 5, 0, 4, 3, 6, 4, 4, 
	4, 4, 4, 4, 4, 4, 6, 5, 
	1, 1, 1, 1, 2, 1, 3, 1, 
	1, 1, 1, 3, 1, 1, 1, 5, 
	3, 4, 0, 0, 0, 5, 5, 5, 
	0, 0, 0, 0, 1, 0, 4, 2, 
	1, 1, 0, 0, 1, 0, 0, 5, 
	0, 4, 5, 7, 8, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 0, 
	5, 2, 0, 4, 13, 3, 9, 0, 
	4, 0, 4, 0, 5, 0, 1, 2, 
	0, 4, 1, 1, 1, 4, 2, 10, 
	7, 0, 0, 1, 0, 0, 5, 0, 
	4, 5, 7, 8, 4, 4, 4, 4, 
	4, 4, 4, 4, 7, 3, 1, 1, 
	1, 1, 1, 1, 1, 6, 4, 5, 
	0, 0, 0, 6, 6, 6, 0, 0, 
	0, 14, 1, 6, 4, 2, 15, 1, 
	5, 0, 1, 0, 4, 0, 1, 1, 
	0, 0, 1, 0, 0, 5, 0, 4, 
	3, 6, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 1, 0, 4, 2, 0, 
	3, 3, 3, 8, 0, 3, 0, 3, 
	0, 4, 0, 1, 2, 0, 3, 1, 
	1, 1, 3, 2, 9, 6, 0, 0, 
	1, 0, 0, 5, 0, 4, 3, 6, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	6, 5, 1, 1, 1, 1, 2, 1, 
	3, 1, 1, 1, 1, 3, 1, 1, 
	1, 5, 3, 4, 0, 0, 0, 5, 
	5, 5, 0, 0, 0, 0, 1, 0, 
	4, 2, 1, 1, 0, 0, 1, 0, 
	0, 5, 0, 4, 5, 7, 8, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	1, 0, 5, 2, 0, 4, 13, 3, 
	9, 0, 4, 0, 4, 0, 5, 0, 
	1, 2, 0, 4, 1, 1, 1, 4, 
	2, 10, 7, 0, 0, 1, 0, 0, 
	5, 0, 4, 5, 7, 8, 4, 4, 
	4, 4, 4, 4, 4, 4, 7, 3, 
	1, 1, 1, 1, 1, 1, 1, 6, 
	4, 5, 0, 0, 0, 6, 6, 6, 
	0, 0, 0, 4, 2, 3, 4, 3, 
	5, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 2, 7, 2, 2, 3, 
	2, 2, 8, 5, 4, 3, 5, 3, 
	3, 3, 3, 3, 3, 3, 3, 5, 
	2, 2, 4, 2, 3, 4, 4, 4, 
	0, 2, 0, 0, 0, 0, 0, 0, 
	0, 
}

var _cte_range_lengths []byte = []byte{
	0, 7, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 0, 1, 1, 1, 3, 
	0, 1, 1, 1, 1, 1, 1, 2, 
	2, 2, 1, 1, 0, 0, 0, 0, 
	1, 1, 0, 1, 1, 1, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 2, 1, 3, 3, 3, 4, 7, 
	1, 2, 1, 1, 1, 2, 1, 1, 
	0, 1, 1, 0, 1, 1, 1, 1, 
	2, 3, 4, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 0, 1, 2, 1, 
	1, 2, 1, 7, 1, 2, 1, 2, 
	1, 2, 2, 3, 2, 2, 1, 1, 
	2, 0, 0, 0, 1, 0, 2, 2, 
	1, 1, 0, 1, 1, 1, 1, 2, 
	3, 4, 2, 2, 2, 2, 2, 2, 
	2, 1, 2, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 1, 
	0, 0, 0, 7, 1, 7, 1, 1, 
	1, 7, 7, 7, 1, 1, 1, 7, 
	1, 2, 1, 0, 7, 1, 2, 1, 
	1, 1, 2, 1, 1, 0, 1, 1, 
	0, 1, 1, 1, 1, 2, 3, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 1, 2, 1, 1, 2, 1, 
	1, 2, 1, 2, 1, 2, 2, 3, 
	2, 2, 1, 1, 2, 0, 0, 0, 
	1, 0, 2, 2, 1, 1, 0, 1, 
	1, 1, 1, 2, 3, 4, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 1, 0, 0, 0, 7, 
	1, 7, 1, 1, 1, 7, 7, 7, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 0, 1, 1, 0, 1, 1, 1, 
	1, 2, 3, 4, 4, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 0, 1, 
	2, 1, 1, 2, 7, 1, 2, 1, 
	2, 1, 2, 2, 3, 2, 2, 1, 
	1, 2, 0, 0, 0, 1, 0, 2, 
	2, 1, 1, 0, 1, 1, 1, 1, 
	2, 3, 4, 4, 2, 2, 2, 2, 
	2, 2, 2, 1, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 7, 1, 7, 
	1, 1, 1, 7, 7, 7, 1, 1, 
	1, 7, 1, 2, 1, 0, 7, 1, 
	2, 1, 1, 1, 2, 1, 1, 0, 
	1, 1, 0, 1, 1, 1, 1, 2, 
	3, 4, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 0, 1, 2, 1, 1, 
	2, 1, 1, 2, 1, 2, 1, 2, 
	2, 3, 2, 2, 1, 1, 2, 0, 
	0, 0, 1, 0, 2, 2, 1, 1, 
	0, 1, 1, 1, 1, 2, 3, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	2, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 1, 0, 0, 
	0, 7, 1, 7, 1, 1, 1, 7, 
	7, 7, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 0, 1, 1, 0, 1, 
	1, 1, 1, 2, 3, 4, 4, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0, 1, 2, 1, 1, 2, 7, 1, 
	2, 1, 2, 1, 2, 2, 3, 2, 
	2, 1, 1, 2, 0, 0, 0, 1, 
	0, 2, 2, 1, 1, 0, 1, 1, 
	1, 1, 2, 3, 4, 4, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	1, 7, 1, 1, 1, 7, 7, 7, 
	1, 1, 1, 2, 1, 2, 1, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 2, 2, 2, 2, 2, 3, 
	2, 1, 2, 2, 1, 2, 4, 2, 
	2, 2, 2, 2, 2, 2, 1, 2, 
	1, 1, 7, 1, 7, 7, 7, 7, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 
}

var _cte_index_offsets []int16 = []int16{
	0, 0, 23, 26, 28, 31, 33, 35, 
	38, 40, 42, 44, 46, 48, 50, 52, 
	59, 61, 63, 67, 69, 74, 76, 78, 
	81, 84, 88, 92, 94, 96, 98, 100, 
	103, 105, 107, 109, 111, 113, 115, 122, 
	128, 130, 132, 134, 136, 139, 141, 143, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 172, 175, 178, 
	181, 187, 190, 193, 200, 206, 212, 222, 
	246, 249, 257, 259, 262, 264, 271, 273, 
	276, 278, 280, 282, 284, 286, 288, 295, 
	297, 304, 311, 322, 329, 336, 343, 350, 
	357, 364, 371, 377, 383, 385, 387, 394, 
	398, 400, 406, 411, 434, 439, 450, 452, 
	458, 460, 466, 469, 477, 480, 484, 488, 
	490, 496, 498, 500, 502, 507, 510, 522, 
	531, 533, 535, 537, 539, 541, 548, 550, 
	557, 564, 575, 582, 589, 596, 603, 610, 
	617, 624, 630, 639, 645, 647, 649, 651, 
	653, 656, 658, 663, 665, 667, 669, 671, 
	676, 678, 680, 682, 695, 700, 712, 714, 
	716, 718, 731, 744, 757, 759, 761, 763, 
	785, 788, 797, 803, 806, 829, 832, 840, 
	842, 845, 847, 854, 856, 859, 861, 863, 
	865, 867, 869, 871, 878, 880, 887, 894, 
	905, 912, 919, 926, 933, 940, 947, 954, 
	960, 966, 968, 970, 977, 981, 983, 989, 
	994, 999, 1010, 1012, 1018, 1020, 1026, 1029, 
	1037, 1040, 1044, 1048, 1050, 1056, 1058, 1060, 
	1062, 1067, 1070, 1082, 1091, 1093, 1095, 1097, 
	1099, 1101, 1108, 1110, 1117, 1124, 1135, 1142, 
	1149, 1156, 1163, 1170, 1177, 1184, 1190, 1199, 
	1205, 1207, 1209, 1211, 1213, 1216, 1218, 1223, 
	1225, 1227, 1229, 1231, 1236, 1238, 1240, 1242, 
	1255, 1260, 1272, 1274, 1276, 1278, 1291, 1304, 
	1317, 1319, 1321, 1323, 1325, 1328, 1330, 1337, 
	1341, 1344, 1346, 1348, 1350, 1352, 1354, 1356, 
	1363, 1365, 1372, 1381, 1393, 1406, 1413, 1420, 
	1427, 1434, 1441, 1448, 1455, 1461, 1467, 1469, 
	1471, 1479, 1483, 1485, 1492, 1513, 1518, 1530, 
	1532, 1539, 1541, 1548, 1551, 1560, 1563, 1567, 
	1571, 1573, 1580, 1582, 1584, 1586, 1592, 1595, 
	1608, 1618, 1620, 1622, 1624, 1626, 1628, 1635, 
	1637, 1644, 1653, 1665, 1678, 1685, 1692, 1699, 
	1706, 1713, 1720, 1727, 1733, 1743, 1747, 1749, 
	1751, 1753, 1755, 1757, 1759, 1761, 1775, 1781, 
	1794, 1796, 1798, 1800, 1814, 1828, 1842, 1844, 
	1846, 1848, 1870, 1873, 1882, 1888, 1891, 1914, 
	1917, 1925, 1927, 1930, 1932, 1939, 1941, 1944, 
	1946, 1948, 1950, 1952, 1954, 1956, 1963, 1965, 
	1972, 1979, 1990, 1997, 2004, 2011, 2018, 2025, 
	2032, 2039, 2045, 2051, 2053, 2055, 2062, 2066, 
	2068, 2074, 2079, 2084, 2095, 2097, 2103, 2105, 
	2111, 2114, 2122, 2125, 2129, 2133, 2135, 2141, 
	2143, 2145, 2147, 2152, 2155, 2167, 2176, 2178, 
	2180, 2182, 2184, 2186, 2193, 2195, 2202, 2209, 
	2220, 2227, 2234, 2241, 2248, 2255, 2262, 2269, 
	2275, 2284, 2290, 2292, 2294, 2296, 2298, 2301, 
	2303, 2308, 2310, 2312, 2314, 2316, 2321, 2323, 
	2325, 2327, 2340, 2345, 2357, 2359, 2361, 2363, 
	2376, 2389, 2402, 2404, 2406, 2408, 2410, 2413, 
	2415, 2422, 2426, 2429, 2431, 2433, 2435, 2437, 
	2439, 2441, 2448, 2450, 2457, 2466, 2478, 2491, 
	2498, 2505, 2512, 2519, 2526, 2533, 2540, 2546, 
	2552, 2554, 2556, 2564, 2568, 2570, 2577, 2598, 
	2603, 2615, 2617, 2624, 2626, 2633, 2636, 2645, 
	2648, 2652, 2656, 2658, 2665, 2667, 2669, 2671, 
	2677, 2680, 2693, 2703, 2705, 2707, 2709, 2711, 
	2713, 2720, 2722, 2729, 2738, 2750, 2763, 2770, 
	2777, 2784, 2791, 2798, 2805, 2812, 2818, 2828, 
	2832, 2834, 2836, 2838, 2840, 2842, 2844, 2846, 
	2860, 2866, 2879, 2881, 2883, 2885, 2899, 2913, 
	2927, 2929, 2931, 2933, 2940, 2944, 2950, 2956, 
	2962, 2972, 2978, 2984, 2990, 2996, 3002, 3008, 
	3014, 3019, 3024, 3030, 3035, 3045, 3050, 3055, 
	3062, 3067, 3071, 3082, 3090, 3096, 3102, 3112, 
	3118, 3124, 3130, 3136, 3142, 3148, 3154, 3159, 
	3167, 3171, 3175, 3187, 3191, 3202, 3214, 3226, 
	3238, 3239, 3242, 3243, 3244, 3245, 3246, 3247, 
	3248, 
}

var _cte_indicies []int16 = []int16{
	0, 1, 1, 3, 4, 5, 6, 7, 
	9, 11, 10, 12, 13, 14, 15, 1, 
	8, 10, 10, 16, 17, 18, 2, 0, 
	19, 2, 20, 2, 21, 22, 2, 23, 
	2, 24, 2, 26, 25, 2, 26, 2, 
	27, 2, 28, 2, 29, 2, 30, 2, 
	31, 2, 32, 2, 33, 33, 33, 33, 
	33, 33, 2, 21, 2, 34, 2, 35, 
	36, 37, 2, 37, 2, 0, 38, 39, 
	19, 2, 40, 2, 41, 2, 42, 43, 
	2, 44, 45, 2, 46, 44, 45, 2, 
	47, 48, 49, 2, 49, 2, 50, 2, 
	51, 2, 52, 2, 53, 54, 2, 55, 
	2, 56, 2, 57, 2, 58, 2, 59, 
	2, 60, 2, 61, 61, 61, 61, 61, 
	61, 2, 62, 50, 63, 64, 65, 2, 
	66, 2, 67, 2, 68, 2, 69, 2, 
	70, 71, 2, 72, 2, 73, 2, 74, 
	2, 75, 2, 76, 2, 77, 2, 78, 
	2, 79, 2, 80, 2, 81, 2, 82, 
	2, 10, 2, 16, 2, 17, 2, 84, 
	83, 86, 87, 85, 86, 88, 85, 89, 
	87, 85, 91, 92, 90, 94, 95, 96, 
	97, 98, 93, 99, 99, 2, 100, 99, 
	2, 101, 101, 102, 101, 103, 104, 2, 
	101, 101, 101, 103, 104, 2, 105, 105, 
	105, 106, 107, 2, 108, 108, 109, 110, 
	111, 108, 112, 113, 114, 2, 115, 116, 
	116, 117, 118, 119, 120, 121, 123, 125, 
	126, 124, 127, 128, 129, 130, 116, 122, 
	124, 124, 131, 132, 133, 2, 115, 134, 
	2, 135, 135, 136, 137, 138, 135, 134, 
	2, 139, 2, 140, 141, 2, 142, 2, 
	143, 143, 144, 146, 143, 145, 2, 147, 
	2, 149, 148, 2, 149, 2, 150, 2, 
	151, 2, 152, 2, 153, 2, 154, 2, 
	155, 155, 156, 157, 158, 155, 2, 159, 
	2, 155, 155, 157, 158, 155, 160, 2, 
	161, 161, 161, 161, 161, 161, 2, 155, 
	155, 161, 161, 158, 161, 155, 161, 161, 
	161, 2, 155, 155, 157, 158, 155, 162, 
	2, 155, 155, 157, 158, 155, 163, 2, 
	155, 155, 157, 158, 155, 164, 2, 155, 
	155, 157, 158, 155, 165, 2, 155, 155, 
	157, 158, 155, 166, 2, 155, 155, 157, 
	158, 155, 167, 2, 155, 155, 157, 158, 
	155, 168, 2, 155, 155, 157, 158, 155, 
	2, 143, 143, 144, 146, 143, 2, 140, 
	2, 169, 2, 170, 170, 171, 172, 170, 
	169, 2, 173, 174, 175, 2, 175, 2, 
	170, 170, 171, 170, 175, 2, 116, 116, 
	126, 116, 2, 115, 176, 176, 117, 118, 
	119, 120, 121, 123, 125, 124, 127, 128, 
	129, 130, 176, 122, 124, 124, 131, 132, 
	133, 2, 115, 177, 178, 134, 2, 135, 
	135, 136, 137, 138, 179, 180, 181, 135, 
	134, 2, 182, 2, 135, 135, 138, 135, 
	182, 2, 183, 2, 135, 135, 138, 135, 
	183, 2, 184, 185, 2, 135, 135, 186, 
	138, 135, 184, 185, 2, 187, 188, 2, 
	189, 187, 188, 2, 190, 191, 192, 2, 
	192, 2, 193, 193, 194, 193, 192, 2, 
	195, 2, 196, 2, 197, 2, 198, 198, 
	199, 198, 2, 200, 201, 2, 135, 135, 
	136, 137, 203, 138, 179, 180, 181, 135, 
	202, 2, 135, 135, 136, 137, 203, 138, 
	135, 134, 2, 204, 2, 205, 2, 206, 
	2, 207, 2, 208, 2, 209, 209, 210, 
	211, 212, 209, 2, 213, 2, 209, 209, 
	211, 212, 209, 214, 2, 215, 215, 215, 
	215, 215, 215, 2, 209, 209, 215, 215, 
	212, 215, 209, 215, 215, 215, 2, 209, 
	209, 211, 212, 209, 216, 2, 209, 209, 
	211, 212, 209, 217, 2, 209, 209, 211, 
	212, 209, 218, 2, 209, 209, 211, 212, 
	209, 219, 2, 209, 209, 211, 212, 209, 
	220, 2, 209, 209, 211, 212, 209, 221, 
	2, 209, 209, 211, 212, 209, 222, 2, 
	209, 209, 211, 212, 209, 2, 135, 135, 
	136, 137, 203, 138, 135, 202, 2, 223, 
	195, 224, 225, 226, 2, 227, 2, 228, 
	2, 229, 2, 230, 2, 231, 232, 2, 
	233, 2, 234, 234, 235, 234, 2, 236, 
	2, 237, 2, 238, 2, 239, 2, 240, 
	240, 241, 240, 2, 242, 2, 243, 2, 
	244, 2, 245, 245, 246, 248, 247, 245, 
	247, 247, 247, 249, 250, 251, 2, 252, 
	252, 253, 252, 2, 252, 252, 253, 254, 
	252, 254, 254, 254, 255, 256, 257, 2, 
	254, 2, 255, 2, 256, 2, 245, 245, 
	258, 248, 247, 245, 247, 247, 247, 249, 
	250, 251, 2, 245, 245, 259, 248, 247, 
	245, 247, 247, 247, 249, 250, 251, 2, 
	245, 245, 260, 248, 247, 245, 247, 247, 
	247, 249, 250, 251, 2, 124, 2, 131, 
	2, 132, 2, 261, 262, 262, 263, 264, 
	265, 266, 267, 269, 270, 271, 272, 273, 
	274, 262, 268, 270, 270, 275, 276, 277, 
	2, 261, 278, 2, 279, 279, 280, 281, 
	282, 283, 279, 278, 2, 284, 284, 285, 
	286, 284, 2, 287, 288, 2, 289, 286, 
	286, 290, 291, 292, 293, 294, 296, 298, 
	297, 299, 300, 301, 302, 286, 295, 297, 
	297, 303, 304, 305, 2, 289, 306, 2, 
	307, 307, 308, 309, 310, 307, 306, 2, 
	311, 2, 312, 313, 2, 314, 2, 315, 
	315, 316, 318, 315, 317, 2, 319, 2, 
	321, 320, 2, 321, 2, 322, 2, 323, 
	2, 324, 2, 325, 2, 326, 2, 327, 
	327, 328, 329, 330, 327, 2, 331, 2, 
	327, 327, 329, 330, 327, 332, 2, 333, 
	333, 333, 333, 333, 333, 2, 327, 327, 
	333, 333, 333, 330, 327, 333, 333, 333, 
	2, 327, 327, 329, 330, 327, 334, 2, 
	327, 327, 329, 330, 327, 335, 2, 327, 
	327, 329, 330, 327, 336, 2, 327, 327, 
	329, 330, 327, 337, 2, 327, 327, 329, 
	330, 327, 338, 2, 327, 327, 329, 330, 
	327, 339, 2, 327, 327, 329, 330, 327, 
	340, 2, 327, 327, 329, 330, 327, 2, 
	315, 315, 316, 318, 315, 2, 312, 2, 
	341, 2, 342, 342, 343, 344, 342, 341, 
	2, 345, 346, 347, 2, 347, 2, 342, 
	342, 344, 342, 347, 2, 262, 262, 274, 
	262, 2, 289, 348, 349, 306, 2, 307, 
	307, 308, 309, 350, 351, 352, 310, 307, 
	306, 2, 353, 2, 307, 307, 310, 307, 
	353, 2, 354, 2, 307, 307, 310, 307, 
	354, 2, 355, 356, 2, 307, 307, 357, 
	310, 307, 355, 356, 2, 358, 359, 2, 
	360, 358, 359, 2, 361, 362, 363, 2, 
	363, 2, 364, 364, 365, 364, 363, 2, 
	366, 2, 367, 2, 368, 2, 369, 369, 
	370, 369, 2, 371, 372, 2, 307, 307, 
	308, 309, 374, 350, 351, 352, 310, 307, 
	373, 2, 307, 307, 308, 309, 374, 310, 
	307, 306, 2, 375, 2, 376, 2, 377, 
	2, 378, 2, 379, 2, 380, 380, 381, 
	382, 383, 380, 2, 384, 2, 380, 380, 
	382, 383, 380, 385, 2, 386, 386, 386, 
	386, 386, 386, 2, 380, 380, 386, 386, 
	386, 383, 380, 386, 386, 386, 2, 380, 
	380, 382, 383, 380, 387, 2, 380, 380, 
	382, 383, 380, 388, 2, 380, 380, 382, 
	383, 380, 389, 2, 380, 380, 382, 383, 
	380, 390, 2, 380, 380, 382, 383, 380, 
	391, 2, 380, 380, 382, 383, 380, 392, 
	2, 380, 380, 382, 383, 380, 393, 2, 
	380, 380, 382, 383, 380, 2, 307, 307, 
	308, 309, 374, 310, 307, 373, 2, 394, 
	366, 395, 396, 397, 2, 398, 2, 399, 
	2, 400, 2, 401, 2, 402, 403, 2, 
	404, 2, 405, 405, 406, 405, 2, 407, 
	2, 408, 2, 409, 2, 410, 2, 411, 
	411, 412, 411, 2, 413, 2, 414, 2, 
	415, 2, 416, 416, 417, 418, 419, 416, 
	418, 418, 418, 420, 421, 422, 2, 423, 
	423, 424, 423, 2, 423, 423, 425, 424, 
	423, 425, 425, 425, 426, 427, 428, 2, 
	425, 2, 426, 2, 427, 2, 416, 416, 
	429, 418, 419, 416, 418, 418, 418, 420, 
	421, 422, 2, 416, 416, 430, 418, 419, 
	416, 418, 418, 418, 420, 421, 422, 2, 
	416, 416, 431, 418, 419, 416, 418, 418, 
	418, 420, 421, 422, 2, 297, 2, 303, 
	2, 304, 2, 432, 2, 433, 434, 2, 
	435, 2, 436, 436, 437, 439, 436, 438, 
	2, 287, 288, 440, 2, 442, 441, 2, 
	442, 2, 443, 2, 444, 2, 445, 2, 
	446, 2, 447, 2, 448, 448, 449, 450, 
	451, 448, 2, 452, 2, 448, 448, 450, 
	451, 448, 453, 2, 287, 454, 454, 455, 
	454, 454, 454, 454, 2, 448, 448, 454, 
	454, 456, 451, 454, 448, 454, 454, 454, 
	2, 448, 448, 287, 454, 454, 457, 451, 
	454, 448, 454, 454, 454, 2, 448, 448, 
	450, 451, 448, 458, 2, 448, 448, 450, 
	451, 448, 459, 2, 448, 448, 450, 451, 
	448, 460, 2, 448, 448, 450, 451, 448, 
	461, 2, 448, 448, 450, 451, 448, 462, 
	2, 448, 448, 450, 451, 448, 463, 2, 
	448, 448, 450, 451, 448, 464, 2, 448, 
	448, 450, 451, 448, 2, 436, 436, 437, 
	439, 436, 2, 433, 2, 465, 2, 466, 
	466, 467, 468, 469, 466, 465, 2, 470, 
	471, 472, 2, 472, 2, 466, 466, 467, 
	468, 466, 472, 2, 261, 473, 473, 263, 
	264, 265, 266, 267, 269, 270, 271, 272, 
	273, 473, 268, 270, 270, 275, 276, 277, 
	2, 261, 474, 475, 278, 2, 279, 279, 
	280, 281, 282, 283, 476, 477, 478, 279, 
	278, 2, 479, 2, 279, 279, 282, 283, 
	279, 479, 2, 480, 2, 279, 279, 282, 
	283, 279, 480, 2, 481, 482, 2, 279, 
	279, 483, 282, 283, 279, 481, 482, 2, 
	484, 485, 2, 486, 484, 485, 2, 487, 
	488, 489, 2, 489, 2, 490, 490, 491, 
	492, 490, 489, 2, 493, 2, 494, 2, 
	495, 2, 496, 496, 497, 498, 496, 2, 
	499, 500, 2, 279, 279, 280, 281, 282, 
	502, 283, 476, 477, 478, 279, 501, 2, 
	279, 279, 280, 281, 282, 502, 283, 279, 
	278, 2, 503, 2, 504, 2, 505, 2, 
	506, 2, 507, 2, 508, 508, 509, 510, 
	511, 508, 2, 512, 2, 508, 508, 510, 
	511, 508, 513, 2, 287, 514, 514, 515, 
	514, 514, 514, 514, 2, 508, 508, 514, 
	514, 516, 511, 514, 508, 514, 514, 514, 
	2, 508, 508, 287, 514, 514, 517, 511, 
	514, 508, 514, 514, 514, 2, 508, 508, 
	510, 511, 508, 518, 2, 508, 508, 510, 
	511, 508, 519, 2, 508, 508, 510, 511, 
	508, 520, 2, 508, 508, 510, 511, 508, 
	521, 2, 508, 508, 510, 511, 508, 522, 
	2, 508, 508, 510, 511, 508, 523, 2, 
	508, 508, 510, 511, 508, 524, 2, 508, 
	508, 510, 511, 508, 2, 279, 279, 280, 
	281, 282, 502, 283, 279, 501, 2, 525, 
	493, 526, 2, 527, 2, 528, 2, 529, 
	2, 530, 2, 531, 2, 532, 2, 533, 
	2, 534, 534, 535, 536, 538, 537, 534, 
	537, 537, 537, 539, 540, 541, 2, 542, 
	542, 543, 544, 542, 2, 542, 542, 543, 
	544, 545, 542, 545, 545, 545, 546, 547, 
	548, 2, 545, 2, 546, 2, 547, 2, 
	534, 534, 549, 536, 538, 537, 534, 537, 
	537, 537, 539, 540, 541, 2, 534, 534, 
	550, 536, 538, 537, 534, 537, 537, 537, 
	539, 540, 541, 2, 534, 534, 551, 536, 
	538, 537, 534, 537, 537, 537, 539, 540, 
	541, 2, 270, 2, 275, 2, 276, 2, 
	552, 553, 553, 554, 555, 556, 557, 558, 
	559, 561, 562, 563, 564, 565, 553, 560, 
	562, 562, 566, 567, 568, 2, 552, 569, 
	2, 570, 570, 571, 572, 573, 574, 570, 
	569, 2, 575, 575, 576, 577, 575, 2, 
	578, 579, 2, 580, 577, 577, 581, 582, 
	583, 584, 585, 587, 589, 588, 590, 591, 
	592, 593, 577, 586, 588, 588, 594, 595, 
	596, 2, 580, 597, 2, 598, 598, 599, 
	600, 601, 598, 597, 2, 602, 2, 603, 
	604, 2, 605, 2, 606, 606, 607, 608, 
	606, 609, 2, 610, 2, 612, 611, 2, 
	612, 2, 613, 2, 614, 2, 615, 2, 
	616, 2, 617, 2, 618, 618, 619, 620, 
	621, 618, 2, 622, 2, 618, 618, 619, 
	621, 618, 623, 2, 624, 624, 624, 624, 
	624, 624, 2, 618, 618, 619, 624, 624, 
	624, 618, 624, 624, 624, 2, 618, 618, 
	619, 621, 618, 625, 2, 618, 618, 619, 
	621, 618, 626, 2, 618, 618, 619, 621, 
	618, 627, 2, 618, 618, 619, 621, 618, 
	628, 2, 618, 618, 619, 621, 618, 629, 
	2, 618, 618, 619, 621, 618, 630, 2, 
	618, 618, 619, 621, 618, 631, 2, 618, 
	618, 619, 621, 618, 2, 606, 606, 607, 
	608, 606, 2, 603, 2, 632, 2, 633, 
	633, 634, 635, 633, 632, 2, 636, 637, 
	638, 2, 638, 2, 633, 633, 634, 633, 
	638, 2, 553, 553, 556, 553, 2, 580, 
	639, 640, 597, 2, 598, 598, 599, 600, 
	601, 641, 642, 643, 598, 597, 2, 644, 
	2, 598, 598, 599, 598, 644, 2, 645, 
	2, 598, 598, 599, 598, 645, 2, 646, 
	647, 2, 598, 598, 599, 648, 598, 646, 
	647, 2, 649, 650, 2, 651, 649, 650, 
	2, 652, 653, 654, 2, 654, 2, 655, 
	655, 656, 655, 654, 2, 657, 2, 658, 
	2, 659, 2, 660, 660, 661, 660, 2, 
	662, 663, 2, 598, 598, 599, 600, 601, 
	665, 641, 642, 643, 598, 664, 2, 598, 
	598, 599, 600, 601, 665, 598, 597, 2, 
	666, 2, 667, 2, 668, 2, 669, 2, 
	670, 2, 671, 671, 672, 673, 674, 671, 
	2, 675, 2, 671, 671, 672, 674, 671, 
	676, 2, 677, 677, 677, 677, 677, 677, 
	2, 671, 671, 672, 677, 677, 677, 671, 
	677, 677, 677, 2, 671, 671, 672, 674, 
	671, 678, 2, 671, 671, 672, 674, 671, 
	679, 2, 671, 671, 672, 674, 671, 680, 
	2, 671, 671, 672, 674, 671, 681, 2, 
	671, 671, 672, 674, 671, 682, 2, 671, 
	671, 672, 674, 671, 683, 2, 671, 671, 
	672, 674, 671, 684, 2, 671, 671, 672, 
	674, 671, 2, 598, 598, 599, 600, 601, 
	665, 598, 664, 2, 685, 657, 686, 687, 
	688, 2, 689, 2, 690, 2, 691, 2, 
	692, 2, 693, 694, 2, 695, 2, 696, 
	696, 697, 696, 2, 698, 2, 699, 2, 
	700, 2, 701, 2, 702, 702, 703, 702, 
	2, 704, 2, 705, 2, 706, 2, 707, 
	707, 708, 709, 710, 707, 710, 710, 710, 
	711, 712, 713, 2, 714, 714, 715, 714, 
	2, 714, 714, 715, 716, 714, 716, 716, 
	716, 717, 718, 719, 2, 716, 2, 717, 
	2, 718, 2, 707, 707, 720, 709, 710, 
	707, 710, 710, 710, 711, 712, 713, 2, 
	707, 707, 721, 709, 710, 707, 710, 710, 
	710, 711, 712, 713, 2, 707, 707, 722, 
	709, 710, 707, 710, 710, 710, 711, 712, 
	713, 2, 588, 2, 594, 2, 595, 2, 
	723, 2, 724, 725, 2, 726, 2, 727, 
	727, 728, 730, 727, 729, 2, 578, 579, 
	731, 2, 733, 732, 2, 733, 2, 734, 
	2, 735, 2, 736, 2, 737, 2, 738, 
	2, 739, 739, 740, 741, 742, 739, 2, 
	743, 2, 739, 739, 741, 742, 739, 744, 
	2, 578, 745, 745, 746, 745, 745, 745, 
	745, 2, 739, 739, 745, 745, 747, 742, 
	745, 739, 745, 745, 745, 2, 739, 739, 
	578, 745, 745, 748, 742, 745, 739, 745, 
	745, 745, 2, 739, 739, 741, 742, 739, 
	749, 2, 739, 739, 741, 742, 739, 750, 
	2, 739, 739, 741, 742, 739, 751, 2, 
	739, 739, 741, 742, 739, 752, 2, 739, 
	739, 741, 742, 739, 753, 2, 739, 739, 
	741, 742, 739, 754, 2, 739, 739, 741, 
	742, 739, 755, 2, 739, 739, 741, 742, 
	739, 2, 727, 727, 728, 730, 727, 2, 
	724, 2, 756, 2, 757, 757, 758, 759, 
	760, 757, 756, 2, 761, 762, 763, 2, 
	763, 2, 757, 757, 758, 759, 757, 763, 
	2, 552, 764, 764, 554, 555, 557, 558, 
	559, 561, 562, 563, 564, 565, 764, 560, 
	562, 562, 566, 567, 568, 2, 552, 765, 
	766, 569, 2, 570, 570, 571, 572, 573, 
	574, 767, 768, 769, 570, 569, 2, 770, 
	2, 570, 570, 573, 574, 570, 770, 2, 
	771, 2, 570, 570, 573, 574, 570, 771, 
	2, 772, 773, 2, 570, 570, 774, 573, 
	574, 570, 772, 773, 2, 775, 776, 2, 
	777, 775, 776, 2, 778, 779, 780, 2, 
	780, 2, 781, 781, 782, 783, 781, 780, 
	2, 784, 2, 785, 2, 786, 2, 787, 
	787, 788, 789, 787, 2, 790, 791, 2, 
	570, 570, 571, 572, 573, 793, 574, 767, 
	768, 769, 570, 792, 2, 570, 570, 571, 
	572, 573, 793, 574, 570, 569, 2, 794, 
	2, 795, 2, 796, 2, 797, 2, 798, 
	2, 799, 799, 800, 801, 802, 799, 2, 
	803, 2, 799, 799, 801, 802, 799, 804, 
	2, 578, 805, 805, 806, 805, 805, 805, 
	805, 2, 799, 799, 805, 805, 807, 802, 
	805, 799, 805, 805, 805, 2, 799, 799, 
	578, 805, 805, 808, 802, 805, 799, 805, 
	805, 805, 2, 799, 799, 801, 802, 799, 
	809, 2, 799, 799, 801, 802, 799, 810, 
	2, 799, 799, 801, 802, 799, 811, 2, 
	799, 799, 801, 802, 799, 812, 2, 799, 
	799, 801, 802, 799, 813, 2, 799, 799, 
	801, 802, 799, 814, 2, 799, 799, 801, 
	802, 799, 815, 2, 799, 799, 801, 802, 
	799, 2, 570, 570, 571, 572, 573, 793, 
	574, 570, 792, 2, 816, 784, 817, 2, 
	818, 2, 819, 2, 820, 2, 821, 2, 
	822, 2, 823, 2, 824, 2, 825, 825, 
	826, 827, 829, 828, 825, 828, 828, 828, 
	830, 831, 832, 2, 833, 833, 834, 835, 
	833, 2, 833, 833, 834, 835, 836, 833, 
	836, 836, 836, 837, 838, 839, 2, 836, 
	2, 837, 2, 838, 2, 825, 825, 840, 
	827, 829, 828, 825, 828, 828, 828, 830, 
	831, 832, 2, 825, 825, 841, 827, 829, 
	828, 825, 828, 828, 828, 830, 831, 832, 
	2, 825, 825, 842, 827, 829, 828, 825, 
	828, 828, 828, 830, 831, 832, 2, 562, 
	2, 566, 2, 567, 2, 843, 843, 844, 
	845, 843, 19, 2, 846, 846, 846, 2, 
	847, 847, 848, 847, 849, 2, 850, 850, 
	851, 852, 850, 2, 850, 850, 852, 850, 
	853, 2, 850, 850, 33, 33, 33, 850, 
	33, 33, 33, 2, 850, 850, 852, 850, 
	854, 2, 850, 850, 852, 850, 855, 2, 
	850, 850, 852, 850, 856, 2, 850, 850, 
	852, 850, 857, 2, 850, 850, 852, 850, 
	858, 2, 850, 850, 852, 850, 859, 2, 
	850, 850, 852, 850, 860, 2, 850, 850, 
	852, 850, 2, 847, 847, 848, 847, 2, 
	861, 861, 862, 861, 34, 2, 861, 861, 
	861, 37, 2, 843, 843, 844, 845, 863, 
	864, 865, 843, 19, 2, 843, 843, 843, 
	40, 2, 843, 843, 843, 41, 2, 843, 
	843, 866, 843, 42, 43, 2, 867, 867, 
	867, 49, 2, 868, 868, 868, 2, 843, 
	843, 844, 845, 870, 863, 864, 865, 843, 
	869, 2, 843, 843, 844, 845, 870, 843, 
	19, 2, 871, 871, 872, 873, 871, 2, 
	871, 871, 873, 871, 874, 2, 871, 871, 
	61, 61, 61, 871, 61, 61, 61, 2, 
	871, 871, 873, 871, 875, 2, 871, 871, 
	873, 871, 876, 2, 871, 871, 873, 871, 
	877, 2, 871, 871, 873, 871, 878, 2, 
	871, 871, 873, 871, 879, 2, 871, 871, 
	873, 871, 880, 2, 871, 871, 873, 871, 
	881, 2, 871, 871, 873, 871, 2, 843, 
	843, 844, 845, 870, 843, 869, 2, 882, 
	882, 882, 2, 883, 883, 883, 2, 884, 
	884, 885, 886, 884, 886, 886, 886, 887, 
	888, 889, 2, 890, 890, 890, 2, 890, 
	890, 80, 890, 80, 80, 80, 81, 82, 
	891, 2, 884, 884, 892, 886, 884, 886, 
	886, 886, 887, 888, 889, 2, 884, 884, 
	893, 886, 884, 886, 886, 886, 887, 888, 
	889, 2, 884, 884, 894, 886, 884, 886, 
	886, 886, 887, 888, 889, 2, 2, 89, 
	87, 85, 2, 2, 2, 2, 2, 2, 
	2, 
}

var _cte_trans_targs []int16 = []int16{
	2, 1, 0, 580, 1, 20, 31, 602, 
	615, 39, 618, 580, 621, 622, 623, 580, 
	56, 57, 58, 579, 4, 5, 16, 581, 
	7, 8, 9, 10, 11, 12, 13, 582, 
	583, 584, 594, 19, 19, 595, 596, 28, 
	597, 598, 599, 599, 25, 25, 26, 27, 
	27, 600, 29, 30, 601, 1, 1, 33, 
	34, 35, 36, 604, 605, 606, 40, 44, 
	47, 50, 41, 42, 43, 580, 45, 46, 
	616, 580, 48, 49, 617, 51, 52, 580, 
	620, 53, 54, 59, 624, 60, 61, 62, 
	625, 61, 63, 626, 64, 63, 63, 63, 
	63, 63, 63, 66, 627, 68, 628, 69, 
	69, 69, 67, 67, 70, 629, 70, 70, 
	70, 70, 70, 72, 71, 106, 107, 108, 
	125, 126, 146, 147, 163, 106, 630, 169, 
	170, 171, 106, 172, 173, 174, 73, 71, 
	74, 101, 630, 75, 76, 100, 77, 71, 
	78, 99, 630, 79, 80, 81, 82, 83, 
	84, 85, 86, 71, 87, 89, 630, 88, 
	91, 90, 92, 93, 94, 95, 96, 97, 
	98, 102, 71, 630, 103, 104, 104, 105, 
	107, 109, 121, 110, 112, 114, 111, 113, 
	115, 115, 116, 117, 117, 118, 119, 119, 
	120, 71, 630, 122, 123, 124, 71, 630, 
	107, 107, 127, 128, 129, 130, 131, 132, 
	133, 71, 134, 136, 630, 135, 138, 137, 
	139, 140, 141, 142, 143, 144, 145, 148, 
	152, 156, 160, 149, 150, 151, 106, 153, 
	155, 154, 71, 630, 106, 157, 158, 159, 
	71, 630, 161, 162, 106, 71, 164, 165, 
	630, 166, 167, 168, 71, 630, 165, 166, 
	167, 168, 164, 164, 164, 176, 175, 178, 
	316, 317, 334, 335, 356, 357, 365, 371, 
	372, 373, 631, 374, 375, 376, 177, 178, 
	283, 311, 179, 180, 178, 179, 180, 178, 
	178, 181, 215, 180, 216, 233, 234, 254, 
	255, 271, 215, 277, 278, 279, 215, 280, 
	281, 282, 182, 175, 183, 210, 631, 184, 
	185, 209, 186, 175, 187, 208, 631, 188, 
	189, 190, 191, 192, 193, 194, 195, 175, 
	196, 198, 631, 197, 200, 199, 201, 202, 
	203, 204, 205, 206, 207, 211, 175, 212, 
	631, 213, 213, 214, 217, 229, 218, 220, 
	222, 219, 221, 223, 223, 224, 225, 225, 
	226, 227, 227, 228, 175, 631, 230, 231, 
	232, 175, 631, 180, 180, 235, 236, 237, 
	238, 239, 240, 241, 175, 242, 244, 631, 
	243, 246, 245, 247, 248, 249, 250, 251, 
	252, 253, 256, 260, 264, 268, 257, 258, 
	259, 215, 261, 263, 262, 175, 631, 215, 
	265, 266, 267, 175, 631, 269, 270, 215, 
	175, 272, 273, 631, 274, 275, 276, 175, 
	631, 273, 274, 275, 276, 272, 272, 272, 
	284, 285, 310, 286, 178, 287, 309, 180, 
	288, 289, 290, 291, 292, 293, 294, 295, 
	178, 296, 298, 180, 297, 301, 299, 299, 
	300, 300, 302, 303, 304, 305, 306, 307, 
	308, 312, 178, 179, 180, 313, 314, 314, 
	315, 316, 318, 330, 319, 321, 323, 320, 
	322, 324, 324, 325, 326, 326, 327, 328, 
	328, 329, 178, 179, 180, 331, 332, 333, 
	178, 179, 180, 316, 316, 336, 337, 338, 
	339, 340, 341, 342, 178, 343, 345, 180, 
	344, 348, 346, 346, 347, 347, 349, 350, 
	351, 352, 353, 354, 355, 358, 362, 359, 
	360, 361, 178, 363, 364, 178, 178, 366, 
	179, 367, 180, 368, 369, 370, 178, 179, 
	180, 367, 368, 369, 370, 366, 366, 366, 
	378, 377, 380, 518, 632, 519, 536, 537, 
	558, 559, 567, 573, 574, 575, 576, 577, 
	578, 379, 380, 485, 513, 381, 382, 380, 
	381, 382, 380, 380, 383, 417, 382, 418, 
	435, 436, 456, 457, 473, 417, 479, 480, 
	481, 417, 482, 483, 484, 384, 377, 632, 
	385, 412, 386, 387, 411, 388, 377, 632, 
	389, 410, 390, 391, 392, 393, 394, 395, 
	396, 397, 377, 632, 398, 400, 399, 402, 
	401, 403, 404, 405, 406, 407, 408, 409, 
	413, 377, 632, 414, 415, 415, 416, 419, 
	431, 420, 422, 424, 421, 423, 425, 425, 
	426, 427, 427, 428, 429, 429, 430, 377, 
	632, 432, 433, 434, 377, 632, 382, 382, 
	437, 438, 439, 440, 441, 442, 443, 377, 
	632, 444, 446, 445, 448, 447, 449, 450, 
	451, 452, 453, 454, 455, 458, 462, 466, 
	470, 459, 460, 461, 417, 463, 465, 464, 
	377, 632, 417, 467, 468, 469, 377, 632, 
	471, 472, 417, 377, 474, 632, 475, 476, 
	477, 478, 377, 632, 475, 476, 477, 478, 
	474, 474, 474, 486, 487, 512, 488, 380, 
	489, 511, 382, 490, 491, 492, 493, 494, 
	495, 496, 497, 380, 498, 500, 382, 499, 
	503, 501, 501, 502, 502, 504, 505, 506, 
	507, 508, 509, 510, 514, 380, 381, 382, 
	515, 516, 516, 517, 518, 520, 532, 521, 
	523, 525, 522, 524, 526, 526, 527, 528, 
	528, 529, 530, 530, 531, 380, 381, 382, 
	533, 534, 535, 380, 381, 382, 518, 518, 
	538, 539, 540, 541, 542, 543, 544, 380, 
	545, 547, 382, 546, 550, 548, 548, 549, 
	549, 551, 552, 553, 554, 555, 556, 557, 
	560, 564, 561, 562, 563, 380, 565, 566, 
	380, 380, 568, 381, 569, 382, 570, 571, 
	572, 380, 381, 382, 569, 570, 571, 572, 
	568, 568, 568, 580, 3, 17, 580, 580, 
	6, 593, 580, 14, 15, 585, 586, 587, 
	588, 589, 590, 591, 592, 580, 18, 21, 
	22, 23, 24, 580, 580, 603, 32, 580, 
	37, 38, 607, 608, 609, 610, 611, 612, 
	613, 614, 580, 580, 580, 619, 620, 53, 
	54, 55, 580, 55, 619, 619, 619, 
}

var _cte_trans_actions []int16 = []int16{
	0, 0, 0, 71, 65, 7, 0, 109, 
	109, 0, 0, 61, 0, 0, 0, 63, 
	0, 0, 0, 11, 41, 0, 41, 43, 
	45, 45, 0, 47, 47, 0, 49, 49, 
	51, 53, 17, 0, 9, 23, 11, 0, 
	25, 27, 13, 15, 19, 21, 0, 0, 
	9, 23, 0, 0, 0, 69, 67, 47, 
	47, 0, 49, 49, 51, 53, 0, 0, 
	0, 0, 0, 0, 0, 5, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 0, 77, 0, 0, 0, 
	79, 69, 0, 93, 0, 91, 89, 81, 
	83, 85, 87, 0, 95, 0, 101, 97, 
	99, 0, 223, 226, 0, 244, 238, 241, 
	235, 229, 232, 0, 0, 71, 65, 7, 
	0, 109, 109, 0, 0, 61, 103, 0, 
	0, 0, 63, 0, 0, 0, 11, 29, 
	0, 0, 112, 41, 0, 41, 43, 55, 
	0, 43, 175, 45, 45, 0, 47, 47, 
	0, 49, 49, 59, 0, 0, 193, 51, 
	51, 53, 51, 51, 51, 51, 51, 51, 
	51, 17, 31, 121, 0, 0, 9, 23, 
	0, 11, 0, 0, 0, 0, 25, 27, 
	13, 15, 0, 19, 21, 0, 0, 9, 
	23, 33, 130, 0, 0, 0, 35, 139, 
	69, 67, 109, 0, 47, 47, 0, 49, 
	49, 57, 0, 0, 184, 51, 51, 53, 
	51, 51, 51, 51, 51, 51, 51, 0, 
	0, 0, 0, 0, 0, 0, 5, 0, 
	0, 0, 37, 148, 1, 0, 0, 0, 
	39, 157, 0, 0, 3, 202, 73, 73, 
	255, 73, 73, 73, 75, 214, 0, 0, 
	0, 0, 211, 208, 205, 0, 0, 71, 
	65, 7, 0, 109, 109, 0, 0, 0, 
	0, 0, 105, 0, 0, 0, 11, 29, 
	0, 0, 29, 29, 0, 0, 0, 69, 
	67, 0, 71, 65, 7, 0, 109, 109, 
	0, 0, 61, 0, 0, 0, 63, 0, 
	0, 0, 11, 29, 0, 0, 115, 41, 
	0, 41, 43, 55, 0, 43, 178, 45, 
	45, 0, 47, 47, 0, 49, 49, 59, 
	0, 0, 196, 51, 51, 53, 51, 51, 
	51, 51, 51, 51, 51, 17, 31, 0, 
	124, 0, 9, 23, 11, 0, 0, 0, 
	0, 25, 27, 13, 15, 0, 19, 21, 
	0, 0, 9, 23, 33, 133, 0, 0, 
	0, 35, 142, 69, 67, 109, 0, 47, 
	47, 0, 49, 49, 57, 0, 0, 187, 
	51, 51, 53, 51, 51, 51, 51, 51, 
	51, 51, 0, 0, 0, 0, 0, 0, 
	0, 5, 0, 0, 0, 37, 151, 1, 
	0, 0, 0, 39, 160, 0, 0, 3, 
	202, 73, 73, 259, 73, 73, 73, 75, 
	217, 0, 0, 0, 0, 211, 208, 205, 
	41, 0, 41, 43, 55, 55, 43, 55, 
	45, 45, 0, 47, 47, 0, 49, 49, 
	59, 0, 59, 59, 51, 51, 53, 172, 
	169, 251, 51, 51, 51, 51, 51, 51, 
	51, 17, 31, 31, 31, 0, 0, 9, 
	23, 0, 11, 0, 0, 0, 0, 25, 
	27, 13, 15, 0, 19, 21, 0, 0, 
	9, 23, 33, 33, 33, 0, 0, 0, 
	35, 35, 35, 69, 67, 109, 0, 47, 
	47, 0, 49, 49, 57, 0, 57, 57, 
	51, 51, 53, 172, 166, 247, 51, 51, 
	51, 51, 51, 51, 51, 0, 0, 0, 
	0, 0, 5, 0, 0, 3, 202, 73, 
	202, 73, 202, 73, 73, 73, 75, 75, 
	75, 0, 0, 0, 0, 211, 208, 205, 
	0, 0, 71, 65, 107, 7, 0, 109, 
	109, 0, 0, 0, 0, 0, 0, 0, 
	0, 11, 29, 0, 0, 29, 29, 0, 
	0, 0, 69, 67, 0, 71, 65, 7, 
	0, 109, 109, 0, 0, 61, 0, 0, 
	0, 63, 0, 0, 0, 11, 29, 118, 
	0, 0, 41, 0, 41, 43, 55, 181, 
	0, 43, 45, 45, 0, 47, 47, 0, 
	49, 49, 59, 199, 0, 0, 51, 51, 
	53, 51, 51, 51, 51, 51, 51, 51, 
	17, 31, 127, 0, 0, 9, 23, 11, 
	0, 0, 0, 0, 25, 27, 13, 15, 
	0, 19, 21, 0, 0, 9, 23, 33, 
	136, 0, 0, 0, 35, 145, 69, 67, 
	109, 0, 47, 47, 0, 49, 49, 57, 
	190, 0, 0, 51, 51, 53, 51, 51, 
	51, 51, 51, 51, 51, 0, 0, 0, 
	0, 0, 0, 0, 5, 0, 0, 0, 
	37, 154, 1, 0, 0, 0, 39, 163, 
	0, 0, 3, 202, 73, 263, 73, 73, 
	73, 73, 75, 220, 0, 0, 0, 0, 
	211, 208, 205, 41, 0, 41, 43, 55, 
	55, 43, 55, 45, 45, 0, 47, 47, 
	0, 49, 49, 59, 0, 59, 59, 51, 
	51, 53, 172, 169, 251, 51, 51, 51, 
	51, 51, 51, 51, 17, 31, 31, 31, 
	0, 0, 9, 23, 0, 11, 0, 0, 
	0, 0, 25, 27, 13, 15, 0, 19, 
	21, 0, 0, 9, 23, 33, 33, 33, 
	0, 0, 0, 35, 35, 35, 69, 67, 
	109, 0, 47, 47, 0, 49, 49, 57, 
	0, 57, 57, 51, 51, 53, 172, 166, 
	247, 51, 51, 51, 51, 51, 51, 51, 
	0, 0, 0, 0, 0, 5, 0, 0, 
	3, 202, 73, 202, 73, 202, 73, 73, 
	73, 75, 75, 75, 0, 0, 0, 0, 
	211, 208, 205, 29, 0, 0, 0, 55, 
	0, 43, 59, 0, 0, 51, 51, 51, 
	51, 51, 51, 51, 51, 31, 0, 0, 
	0, 0, 0, 33, 35, 109, 0, 57, 
	0, 0, 51, 51, 51, 51, 51, 51, 
	51, 51, 37, 39, 202, 73, 73, 73, 
	73, 73, 75, 0, 211, 208, 205, 
}

var _cte_eof_actions []int16 = []int16{
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 29, 0, 55, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 55, 31, 31, 29, 29, 29, 29, 
	33, 35, 29, 29, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 29, 
	37, 39, 202, 75, 75, 202, 202, 202, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 
}

const cte_start int = 1
const cte_first_final int = 579
const cte_error int = 0

const cte_en_comment_iterate int = 59
const cte_en_multiline_comment_iterate int = 60
const cte_en_string_iterate int = 63
const cte_en_uri_iterate int = 65
const cte_en_binary_hex_iterate int = 67
const cte_en_binary_base64_iterate int = 70
const cte_en_list_iterate int = 71
const cte_en_map_iterate int = 175
const cte_en_metadata_map_iterate int = 377
const cte_en_main int = 1


//line decoder.rl:584

type Parser struct {
    cs int // Current Ragel state
    ts int // Position: start of token
    te int // Position: end of token
    top int // Index of top of stack
    stack []int
    data []byte
    arrayStart int // Start of the current item of interest
    binaryData []byte
    binaryNext byte
    binaryAccumulator uint
    base64Digits int
    commentDepth int
    significand uint64
    significandSign int
    exponent int
    exponentSign int
    exponentAdjust int
    month int
    day int
    hour int
    minute int
    second int
    subsecond int
    subsecondMultiplier int
    timezone []byte
}

func (this *Parser) Init(maxDepth int) {
    this.stack = make([]int, maxDepth)
    this.significandSign = 1
    this.exponentSign = 1
    this.subsecondMultiplier = 1000000000
    this.timezone = make([]byte, 0, 40)
    this.binaryData = make([]byte, 0, 500)
}

func NewParser(maxDepth int) *Parser {
    this := new(Parser)
    this.Init(maxDepth)
    return this
}

func (this *Parser) flushByteArray(index int, callbacks CteDecoderCallbacks) error {
    err := callbacks.OnArrayData(this.data[this.arrayStart:index])
    if err != nil {
        return err
    }
    this.arrayStart = index
    return nil
}

func (this *Parser) flushAndAddEscapedCharacter(index int, escapedCharacter byte, callbacks CteDecoderCallbacks) error {
    this.data[index] = escapedCharacter
    if err := this.flushByteArray(index+1, callbacks); err != nil {
        return err
    }
    // Get past escape initiator and escape char
    this.arrayStart = index + 2
    return nil
}

func (this *Parser) Parse(src []byte, callbacks CteDecoderCallbacks) (isComplete bool, err error) {
//  if this.ts > 0 {
        // TODO: Read from undeflow buffer
//  }
    this.data = src
    p := 0 // Position: current
    pe := len(this.data) // Position: end of buffer
    // TODO: Change to -1 and check for end of file
    eof := pe // Position: end of file

    _ = eof
    
    
//line decoder.go:1683
	{
	 this.cs = cte_start
	 this.top = 0
	}

//line decoder.go:1689
	{
	var _klen int
	var _trans int
	var _acts int
	var _nacts uint
	var _keys int
	if p == pe {
		goto _test_eof
	}
	if  this.cs == 0 {
		goto _out
	}
_resume:
	_keys = int(_cte_key_offsets[ this.cs])
	_trans = int(_cte_index_offsets[ this.cs])

	_klen = int(_cte_single_lengths[ this.cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + _klen - 1)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + ((_upper - _lower) >> 1)
			switch {
			case  this.data[p] < _cte_trans_keys[_mid]:
				_upper = _mid - 1
			case  this.data[p] > _cte_trans_keys[_mid]:
				_lower = _mid + 1
			default:
				_trans += int(_mid - int(_keys))
				goto _match
			}
		}
		_keys += _klen
		_trans += _klen
	}

	_klen = int(_cte_range_lengths[ this.cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + (_klen << 1) - 2)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + (((_upper - _lower) >> 1) & ^1)
			switch {
			case  this.data[p] < _cte_trans_keys[_mid]:
				_upper = _mid - 2
			case  this.data[p] > _cte_trans_keys[_mid + 1]:
				_lower = _mid + 2
			default:
				_trans += int((_mid - int(_keys)) >> 1)
				goto _match
			}
		}
		_trans += _klen
	}

_match:
	_trans = int(_cte_indicies[_trans])
	 this.cs = int(_cte_trans_targs[_trans])

	if _cte_trans_actions[_trans] == 0 {
		goto _again
	}

	_acts = int(_cte_trans_actions[_trans])
	_nacts = uint(_cte_actions[_acts]); _acts++
	for ; _nacts > 0; _nacts-- {
		_acts++
		switch _cte_actions[_acts-1] {
		case 0:
//line decoder.rl:45

        err = callbacks.OnNil()
        if err != nil {
            p++; goto _out

        }
    
		case 1:
//line decoder.rl:52

        err = callbacks.OnBool(true)
        if err != nil {
            p++; goto _out

        }
    
		case 2:
//line decoder.rl:59

        err = callbacks.OnBool(false)
        if err != nil {
            p++; goto _out

        }
    
		case 3:
//line decoder.rl:68

        this.significandSign = -1
    
		case 4:
//line decoder.rl:72

        this.exponentSign = -1
    
		case 5:
//line decoder.rl:76

        this.significand = this.significand * 10 + uint64( this.data[p] - '0')
    
		case 6:
//line decoder.rl:80

        this.significand = (this.significand << 4) | uint64( this.data[p] - '0')
    
		case 7:
//line decoder.rl:82

        this.significand = (this.significand << 4) | uint64( this.data[p] - 'a' + 10)
    
		case 8:
//line decoder.rl:86

        this.significand = this.significand * 10 + uint64( this.data[p] - '0')
        this.exponentAdjust--
    
		case 9:
//line decoder.rl:91

        this.significand = (this.significand << 4) | uint64( this.data[p] - '0')
        this.exponentAdjust -= 4
    
		case 10:
//line decoder.rl:94

        this.significand = (this.significand << 4) | uint64( this.data[p] - 'a' + 10)
        this.exponentAdjust -= 4
    
		case 11:
//line decoder.rl:99

        this.exponent = this.exponent * 10 + int( this.data[p] - '0')
    
		case 12:
//line decoder.rl:108

        this.significand = (this.significand << 1) | uint64( this.data[p] - '0')
    
		case 13:
//line decoder.rl:112

        this.significand = (this.significand << 3) | uint64( this.data[p] - '0')
    
		case 14:
//line decoder.rl:118

        if this.significandSign >= 0 {
            err = callbacks.OnPositiveInt(this.significand)
        } else {
            err = callbacks.OnNegativeInt(this.significand)
        }
        this.significandSign = 1
        this.significand = 0
        if err != nil {
            p++; goto _out

        }
    
		case 15:
//line decoder.rl:131

        err = callbacks.OnDecimalFloat(int64(this.significand) * int64(this.significandSign), (this.exponent+this.exponentAdjust) * this.exponentSign)
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
        if err != nil {
            p++; goto _out

        }
    
		case 16:
//line decoder.rl:143

        err = callbacks.OnFloat(float64(this.significandSign) *
                    float64(this.significand) *
                    math.Pow(2.0, float64((this.exponent * this.exponentSign + this.exponentAdjust))))
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
        if err != nil {
            p++; goto _out

        }
    
		case 17:
//line decoder.rl:159

        err = callbacks.OnFloat(math.Inf(this.significandSign))
        this.significandSign = 1
        if err != nil {
            p++; goto _out

        }
    
		case 18:
//line decoder.rl:167

        err = callbacks.OnFloat(math.NaN())
        if err != nil {
            p++; goto _out

        }
    
		case 19:
//line decoder.rl:173

        // Just map it to regular NaN
        err = callbacks.OnFloat(math.NaN())
        if err != nil {
            p++; goto _out

        }
    
		case 20:
//line decoder.rl:181

        this.month = this.month * 10 + int( this.data[p] - '0')
    
		case 21:
//line decoder.rl:185

        this.day = this.day * 10 + int( this.data[p] - '0')
    
		case 22:
//line decoder.rl:189

        this.hour = this.hour * 10 + int( this.data[p] - '0')
    
		case 23:
//line decoder.rl:193

        this.minute = this.minute * 10 + int( this.data[p] - '0')
    
		case 24:
//line decoder.rl:197

        this.second = this.second * 10 + int( this.data[p] - '0')
    
		case 25:
//line decoder.rl:201

        this.subsecond = this.subsecond * 10 + int( this.data[p] - '0')
        this.subsecondMultiplier /= 10
    
		case 26:
//line decoder.rl:206

        this.timezone = append(this.timezone,  this.data[p])
    
		case 27:
//line decoder.rl:213

        err = callbacks.OnDate(int(this.significand) * this.significandSign, this.month, this.day)
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        if err != nil {
            p++; goto _out

        }
    
		case 28:
//line decoder.rl:224

        err = callbacks.OnTimeTZ(this.hour,
                this.minute,
                this.second,
                this.subsecond * this.subsecondMultiplier,
                string(this.timezone))
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
        if err != nil {
            p++; goto _out

        }
    
		case 29:
//line decoder.rl:241

        err = callbacks.OnTimestampTZ(int(this.significand) * this.significandSign,
                this.month,
                this.day,
                this.hour,
                this.minute,
                this.second,
                this.subsecond * this.subsecondMultiplier,
                string(this.timezone))
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
        if err != nil {
            p++; goto _out

        }
    
		case 30:
//line decoder.rl:265

        err = callbacks.OnListBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 71; goto _again

    
		case 31:
//line decoder.rl:273

        err = callbacks.OnMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 175; goto _again

    
		case 32:
//line decoder.rl:281

        err = callbacks.OnMetadataMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 377; goto _again

    
		case 33:
//line decoder.rl:289

        this.arrayStart = p + 1
        err = callbacks.OnCommentBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 59; goto _again

    
		case 34:
//line decoder.rl:298

        if this.commentDepth == 0 {
            err = callbacks.OnCommentBegin()
        } else {
            err = callbacks.OnArrayData(this.data[this.arrayStart:p+1])
        }
        this.arrayStart = p + 1
        this.commentDepth++
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 60; goto _again

    
		case 35:
//line decoder.rl:312

        this.arrayStart = p + 1
        err = callbacks.OnStringBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 63; goto _again

    
		case 36:
//line decoder.rl:321

        this.arrayStart = p - 1
    
		case 37:
//line decoder.rl:323

        if this.data[p-1] != '"' {
            err = callbacks.OnStringBegin()
            if err != nil {
                fmt.Printf("Err %v\n", err)
                p++; goto _out

            }
            err = callbacks.OnArrayData(this.data[this.arrayStart:p])
            if err != nil {
                fmt.Printf("Err %v\n", err)
                p++; goto _out

            }
            err = callbacks.OnArrayEnd()
            if err != nil {
                fmt.Printf("Err %v\n", err)
                p++; goto _out

            }
        }
    
		case 38:
//line decoder.rl:343

        this.arrayStart = p + 1
        err = callbacks.OnURIBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 65; goto _again

    
		case 39:
//line decoder.rl:352

        err = callbacks.OnBytesBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 67; goto _again

    
		case 40:
//line decoder.rl:360

        err = callbacks.OnBytesBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 70; goto _again

    
		case 41:
//line decoder.rl:376

        err = callbacks.OnArrayData(this.data[this.arrayStart:p])
        if err != nil {
            p++; goto _out

        }
        err = callbacks.OnArrayEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 42:
//line decoder.rl:388

        err = callbacks.OnArrayData(this.data[this.arrayStart:p-1])
        if err != nil {
            p++; goto _out

        }
        this.arrayStart = p-1
        this.commentDepth--
        if this.commentDepth == 0 {
            err = callbacks.OnArrayEnd()
            if err != nil {
                p++; goto _out

            }
        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 43:
//line decoder.rl:407

                err = this.flushAndAddEscapedCharacter(p-1, '\\', callbacks)
                if err != nil {
                    p++; goto _out

                }
            
		case 44:
//line decoder.rl:413

                err = this.flushAndAddEscapedCharacter(p-1, '\n', callbacks)
                if err != nil {
                    p++; goto _out

                }
            
		case 45:
//line decoder.rl:419

                err = this.flushAndAddEscapedCharacter(p-1, '\r', callbacks)
                if err != nil {
                    p++; goto _out

                }
            
		case 46:
//line decoder.rl:425

                err = this.flushAndAddEscapedCharacter(p-1, '\t', callbacks)
                if err != nil {
                    p++; goto _out

                }
            
		case 47:
//line decoder.rl:431

                err = this.flushAndAddEscapedCharacter(p-1, '"', callbacks)
                if err != nil {
                    p++; goto _out

                }
            
		case 48:
//line decoder.rl:437

                return false, fmt.Errorf("\\%c: Illegal escape encoding", this.data[p])
            
		case 49:
//line decoder.rl:444

        err = callbacks.OnArrayData(this.data[this.arrayStart:p])
        if err != nil {
            p++; goto _out

        }
        err = callbacks.OnArrayEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 50:
//line decoder.rl:456

        err = callbacks.OnArrayData(this.data[this.arrayStart:p])
        if err != nil {
            p++; goto _out

        }
        err = callbacks.OnArrayEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 51:
//line decoder.rl:468

        this.binaryNext = ( this.data[p] - '0') << 4
    
		case 52:
//line decoder.rl:471

        this.binaryNext = ( this.data[p] - 'a' + 10) << 4
    
		case 53:
//line decoder.rl:474

        this.binaryNext |=  this.data[p] - '0'
    
		case 54:
//line decoder.rl:477

        this.binaryNext |=  this.data[p] - 'a' + 10
    
		case 55:
//line decoder.rl:480

        this.binaryData = append(this.binaryData, this.binaryNext)
    
		case 56:
//line decoder.rl:484

        err = callbacks.OnArrayData(this.binaryData)
        if err != nil {
            p++; goto _out

        }
        this.binaryData = this.binaryData[:0]
        err = callbacks.OnArrayEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 57:
//line decoder.rl:497

        this.binaryAccumulator = (this.binaryAccumulator << 6) | uint( this.data[p] - 'A')
    
		case 58:
//line decoder.rl:500

        this.binaryAccumulator = (this.binaryAccumulator << 6) | uint( this.data[p] - 'a' + 26)
    
		case 59:
//line decoder.rl:503

        this.binaryAccumulator = (this.binaryAccumulator << 6) | uint( this.data[p] - '0' + 52)
    
		case 60:
//line decoder.rl:506

        this.binaryAccumulator = (this.binaryAccumulator << 6) | 62
    
		case 61:
//line decoder.rl:509

        this.binaryAccumulator = (this.binaryAccumulator << 6) | 63
    
		case 62:
//line decoder.rl:513

        this.base64Digits++
        if this.base64Digits == 4 {
            this.binaryData = append(this.binaryData, byte(this.binaryAccumulator >> 16))
            this.binaryData = append(this.binaryData, byte(this.binaryAccumulator >> 8))
            this.binaryData = append(this.binaryData, byte(this.binaryAccumulator))
            this.binaryAccumulator = 0
            this.base64Digits = 0
        }
    
		case 63:
//line decoder.rl:524

        switch this.base64Digits {
            case 0:
                break
            case 1:
                // TODO: Invalid
            case 2:
                this.binaryData = append(this.binaryData, byte(this.binaryAccumulator >> 4))
            case 3:
                this.binaryData = append(this.binaryData, byte(this.binaryAccumulator >> 10))
                this.binaryData = append(this.binaryData, byte(this.binaryAccumulator >> 2))
        }
        this.binaryAccumulator = 0
        this.base64Digits = 0
    
		case 64:
//line decoder.rl:540

        err = callbacks.OnArrayData(this.binaryData)
        if err != nil {
            p++; goto _out

        }
        this.binaryData = this.binaryData[:0]
        err = callbacks.OnArrayEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 65:
//line decoder.rl:553

        err = callbacks.OnContainerEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 66:
//line decoder.rl:561

        err = callbacks.OnContainerEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 67:
//line decoder.rl:569

        err = callbacks.OnContainerEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
//line decoder.go:2431
		}
	}

_again:
	if  this.cs == 0 {
		goto _out
	}
	p++
	if p != pe {
		goto _resume
	}
	_test_eof: {}
	if p == eof {
		__acts := _cte_eof_actions[ this.cs]
		__nacts := uint(_cte_actions[__acts]); __acts++
		for ; __nacts > 0; __nacts-- {
			__acts++
			switch _cte_actions[__acts-1] {
			case 14:
//line decoder.rl:118

        if this.significandSign >= 0 {
            err = callbacks.OnPositiveInt(this.significand)
        } else {
            err = callbacks.OnNegativeInt(this.significand)
        }
        this.significandSign = 1
        this.significand = 0
        if err != nil {
            p++; goto _out

        }
    
			case 15:
//line decoder.rl:131

        err = callbacks.OnDecimalFloat(int64(this.significand) * int64(this.significandSign), (this.exponent+this.exponentAdjust) * this.exponentSign)
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
        if err != nil {
            p++; goto _out

        }
    
			case 16:
//line decoder.rl:143

        err = callbacks.OnFloat(float64(this.significandSign) *
                    float64(this.significand) *
                    math.Pow(2.0, float64((this.exponent * this.exponentSign + this.exponentAdjust))))
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
        if err != nil {
            p++; goto _out

        }
    
			case 17:
//line decoder.rl:159

        err = callbacks.OnFloat(math.Inf(this.significandSign))
        this.significandSign = 1
        if err != nil {
            p++; goto _out

        }
    
			case 18:
//line decoder.rl:167

        err = callbacks.OnFloat(math.NaN())
        if err != nil {
            p++; goto _out

        }
    
			case 19:
//line decoder.rl:173

        // Just map it to regular NaN
        err = callbacks.OnFloat(math.NaN())
        if err != nil {
            p++; goto _out

        }
    
			case 27:
//line decoder.rl:213

        err = callbacks.OnDate(int(this.significand) * this.significandSign, this.month, this.day)
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        if err != nil {
            p++; goto _out

        }
    
			case 28:
//line decoder.rl:224

        err = callbacks.OnTimeTZ(this.hour,
                this.minute,
                this.second,
                this.subsecond * this.subsecondMultiplier,
                string(this.timezone))
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
        if err != nil {
            p++; goto _out

        }
    
			case 29:
//line decoder.rl:241

        err = callbacks.OnTimestampTZ(int(this.significand) * this.significandSign,
                this.month,
                this.day,
                this.hour,
                this.minute,
                this.second,
                this.subsecond * this.subsecondMultiplier,
                string(this.timezone))
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
        if err != nil {
            p++; goto _out

        }
    
			case 36:
//line decoder.rl:321

        this.arrayStart = p - 1
    
			case 37:
//line decoder.rl:323

        if this.data[p-1] != '"' {
            err = callbacks.OnStringBegin()
            if err != nil {
                fmt.Printf("Err %v\n", err)
                p++; goto _out

            }
            err = callbacks.OnArrayData(this.data[this.arrayStart:p])
            if err != nil {
                fmt.Printf("Err %v\n", err)
                p++; goto _out

            }
            err = callbacks.OnArrayEnd()
            if err != nil {
                fmt.Printf("Err %v\n", err)
                p++; goto _out

            }
        }
    
//line decoder.go:2611
			}
		}
	}

	_out: {}
	}

//line decoder.rl:662


    if this.ts > 0 {
        // TODO: Copy to underflow buffer
        // arrayStart
        // ts doesn't seem to get used?
        // copy(this.underflow, data[ts:pe])
        // p = 0
        // pe = pe - ts
    }
    // TODO
    if this.cs == cte_error {
        err = fmt.Errorf("Parse error at %v", p)
    }
//    isComplete = this.cs == cte_parse_first;
    // TODO: Maybe there's no way to detect completion?
    isComplete = true
    return
}
