
//line decoder.rl:1
package cte

import (
    "fmt"
    "math"
)

type CteDecoderCallbacks interface {
    OnNil() error
    OnBool(value bool) error
    OnPositiveInt(value uint64) error
    OnNegativeInt(value uint64) error
    OnDecimalFloat(significand int64, exponent int) error
    OnFloat(value float64) error
    OnDate(year, month, day int) error
    OnTimeTZ(hour, minute, second, nanosecond int, tz string) error
    OnTimeLoc(hour, minute, second, nanosecond int, latitude, longitude float32) error
    OnTimestampTZ(year, month, day, hour, minute, second, nanosecond int, tz string) error
    OnTimestampLoc(year, month, day, hour, minute, second, nanosecond int, latitude, longitude float32) error
    OnListBegin() error
    OnMapBegin() error
    OnMetadataMapBegin() error
    OnContainerEnd() error
    OnBytesBegin() error
    OnStringBegin() error
    OnURIBegin() error
    OnCommentBegin() error
    OnArrayData(bytes []byte) error
    OnArrayEnd() error
    OnMarker(id string) error
    OnReference(id string) error
}


//line decoder.rl:582




//line decoder.go:43
var _cte_actions []byte = []byte{
	0, 1, 0, 1, 1, 1, 2, 1, 3, 
	1, 4, 1, 5, 1, 6, 1, 7, 
	1, 8, 1, 9, 1, 10, 1, 11, 
	1, 12, 1, 13, 1, 14, 1, 15, 
	1, 16, 1, 17, 1, 18, 1, 19, 
	1, 20, 1, 21, 1, 22, 1, 23, 
	1, 24, 1, 25, 1, 26, 1, 27, 
	1, 28, 1, 29, 1, 30, 1, 31, 
	1, 32, 1, 33, 1, 34, 1, 35, 
	1, 36, 1, 37, 1, 38, 1, 39, 
	1, 40, 1, 41, 1, 45, 1, 46, 
	1, 47, 1, 48, 1, 49, 1, 50, 
	1, 51, 1, 52, 1, 53, 1, 54, 
	1, 55, 1, 56, 1, 60, 1, 69, 
	1, 70, 1, 71, 2, 9, 26, 2, 
	18, 69, 2, 18, 70, 2, 18, 71, 
	2, 19, 69, 2, 19, 70, 2, 19, 
	71, 2, 20, 69, 2, 20, 70, 2, 
	20, 71, 2, 21, 69, 2, 21, 70, 
	2, 21, 71, 2, 22, 69, 2, 22, 
	70, 2, 22, 71, 2, 23, 69, 2, 
	23, 70, 2, 23, 71, 2, 30, 32, 
	2, 30, 33, 2, 30, 37, 2, 31, 
	69, 2, 31, 70, 2, 31, 71, 2, 
	32, 69, 2, 32, 70, 2, 32, 71, 
	2, 33, 69, 2, 33, 70, 2, 33, 
	71, 2, 40, 3, 2, 40, 41, 2, 
	40, 42, 2, 40, 43, 2, 40, 44, 
	2, 41, 69, 2, 41, 70, 2, 41, 
	71, 2, 57, 59, 2, 58, 59, 2, 
	61, 66, 2, 62, 66, 2, 63, 66, 
	2, 64, 66, 2, 65, 66, 2, 67, 
	68, 3, 30, 32, 37, 3, 30, 33, 
	37, 3, 40, 41, 69, 3, 40, 41, 
	70, 3, 40, 41, 71, 
}

var _cte_key_offsets []int16 = []int16{
	0, 0, 29, 32, 34, 37, 39, 41, 
	44, 45, 47, 49, 50, 52, 54, 56, 
	65, 66, 68, 72, 74, 79, 81, 83, 
	87, 91, 96, 100, 102, 103, 104, 105, 
	107, 109, 111, 112, 114, 116, 118, 127, 
	132, 133, 134, 135, 136, 138, 139, 140, 
	141, 142, 143, 144, 145, 146, 148, 150, 
	152, 154, 156, 158, 160, 162, 164, 166, 
	168, 170, 171, 173, 175, 177, 179, 184, 
	188, 191, 200, 208, 216, 229, 259, 262, 
	271, 273, 276, 278, 286, 288, 291, 292, 
	294, 296, 297, 299, 301, 308, 310, 318, 
	327, 341, 349, 357, 365, 373, 381, 389, 
	397, 403, 409, 410, 412, 420, 424, 426, 
	433, 438, 467, 472, 484, 486, 493, 495, 
	502, 506, 516, 520, 525, 529, 531, 538, 
	539, 540, 541, 546, 548, 561, 571, 573, 
	575, 576, 578, 580, 587, 589, 597, 606, 
	620, 628, 636, 644, 652, 660, 668, 676, 
	682, 692, 697, 698, 699, 700, 701, 703, 
	704, 709, 710, 711, 712, 713, 718, 719, 
	720, 721, 740, 745, 763, 765, 767, 769, 
	771, 773, 775, 794, 813, 832, 834, 836, 
	838, 840, 842, 844, 872, 875, 885, 891, 
	893, 922, 925, 934, 936, 939, 941, 949, 
	951, 954, 955, 957, 959, 960, 962, 964, 
	971, 973, 981, 990, 1004, 1012, 1020, 1028, 
	1036, 1044, 1052, 1060, 1066, 1072, 1073, 1075, 
	1083, 1087, 1089, 1096, 1101, 1106, 1118, 1120, 
	1127, 1129, 1136, 1140, 1150, 1154, 1159, 1163, 
	1165, 1172, 1173, 1174, 1175, 1180, 1182, 1195, 
	1205, 1207, 1209, 1210, 1212, 1214, 1221, 1223, 
	1231, 1240, 1254, 1262, 1270, 1278, 1286, 1294, 
	1302, 1310, 1316, 1326, 1331, 1332, 1333, 1334, 
	1335, 1337, 1338, 1343, 1344, 1345, 1346, 1347, 
	1352, 1353, 1354, 1355, 1374, 1379, 1397, 1399, 
	1401, 1403, 1405, 1407, 1409, 1428, 1447, 1466, 
	1468, 1470, 1472, 1474, 1476, 1478, 1480, 1483, 
	1485, 1493, 1497, 1500, 1501, 1503, 1505, 1506, 
	1508, 1510, 1517, 1519, 1527, 1538, 1553, 1569, 
	1577, 1585, 1593, 1601, 1609, 1617, 1625, 1631, 
	1637, 1638, 1640, 1649, 1653, 1655, 1663, 1690, 
	1695, 1708, 1710, 1718, 1720, 1728, 1732, 1743, 
	1747, 1752, 1756, 1758, 1766, 1767, 1768, 1769, 
	1775, 1777, 1791, 1802, 1804, 1806, 1807, 1809, 
	1811, 1818, 1820, 1828, 1839, 1854, 1870, 1878, 
	1886, 1894, 1902, 1910, 1918, 1926, 1932, 1943, 
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 
	1973, 1979, 1998, 2000, 2002, 2004, 2006, 2008, 
	2010, 2030, 2050, 2070, 2072, 2074, 2076, 2078, 
	2080, 2082, 2110, 2113, 2123, 2129, 2131, 2160, 
	2163, 2172, 2174, 2177, 2179, 2187, 2189, 2192, 
	2193, 2195, 2197, 2198, 2200, 2202, 2209, 2211, 
	2219, 2228, 2242, 2250, 2258, 2266, 2274, 2282, 
	2290, 2298, 2304, 2310, 2311, 2313, 2321, 2325, 
	2327, 2334, 2339, 2344, 2356, 2358, 2365, 2367, 
	2374, 2378, 2388, 2392, 2397, 2401, 2403, 2410, 
	2411, 2412, 2413, 2418, 2420, 2433, 2443, 2445, 
	2447, 2448, 2450, 2452, 2459, 2461, 2469, 2478, 
	2492, 2500, 2508, 2516, 2524, 2532, 2540, 2548, 
	2554, 2564, 2569, 2570, 2571, 2572, 2573, 2575, 
	2576, 2581, 2582, 2583, 2584, 2585, 2590, 2591, 
	2592, 2593, 2612, 2617, 2635, 2637, 2639, 2641, 
	2643, 2645, 2647, 2666, 2685, 2704, 2706, 2708, 
	2710, 2712, 2714, 2716, 2718, 2721, 2723, 2731, 
	2735, 2738, 2739, 2741, 2743, 2744, 2746, 2748, 
	2755, 2757, 2765, 2776, 2791, 2807, 2815, 2823, 
	2831, 2839, 2847, 2855, 2863, 2869, 2875, 2876, 
	2878, 2887, 2891, 2893, 2901, 2928, 2933, 2946, 
	2948, 2956, 2958, 2966, 2970, 2981, 2985, 2990, 
	2994, 2996, 3004, 3005, 3006, 3007, 3013, 3015, 
	3029, 3040, 3042, 3044, 3045, 3047, 3049, 3056, 
	3058, 3066, 3077, 3092, 3108, 3116, 3124, 3132, 
	3140, 3148, 3156, 3164, 3170, 3181, 3184, 3185, 
	3186, 3187, 3188, 3189, 3190, 3191, 3211, 3217, 
	3236, 3238, 3240, 3242, 3244, 3246, 3248, 3268, 
	3288, 3308, 3310, 3312, 3314, 3316, 3318, 3320, 
	3328, 3332, 3339, 3345, 3352, 3365, 3372, 3379, 
	3386, 3393, 3400, 3407, 3414, 3419, 3424, 3431, 
	3437, 3448, 3454, 3460, 3469, 3475, 3479, 3491, 
	3500, 3506, 3513, 3526, 3533, 3540, 3547, 3554, 
	3561, 3568, 3575, 3580, 3589, 3593, 3597, 3615, 
	3619, 3636, 3654, 3672, 3690, 3690, 3692, 3692, 
	3692, 3692, 3692, 3692, 3692, 
}

var _cte_trans_keys []byte = []byte{
	0, 13, 32, 34, 40, 45, 47, 48, 
	64, 91, 95, 98, 104, 117, 123, 9, 
	10, 49, 57, 65, 90, 97, 122, 194, 
	223, 224, 239, 240, 244, 0, 48, 57, 
	48, 57, 45, 48, 57, 48, 57, 48, 
	57, 58, 48, 57, 58, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 48, 57, 
	43, 45, 95, 47, 57, 65, 90, 97, 
	122, 45, 48, 57, 43, 45, 48, 57, 
	48, 57, 0, 48, 64, 49, 57, 48, 
	49, 48, 55, 48, 57, 97, 102, 48, 
	57, 97, 102, 112, 48, 57, 97, 102, 
	43, 45, 48, 57, 48, 57, 105, 110, 
	102, 42, 47, 48, 57, 48, 57, 58, 
	48, 57, 48, 57, 48, 57, 43, 45, 
	95, 47, 57, 65, 90, 97, 122, 102, 
	105, 110, 115, 116, 97, 108, 115, 101, 
	97, 105, 110, 108, 110, 97, 110, 114, 
	117, 101, 128, 191, 128, 191, 128, 191, 
	128, 191, 128, 191, 128, 191, 128, 191, 
	128, 191, 128, 191, 128, 191, 128, 191, 
	128, 191, 10, 42, 47, 42, 47, 42, 
	47, 34, 92, 34, 92, 110, 114, 116, 
	32, 33, 35, 126, 34, 32, 126, 13, 
	32, 34, 9, 10, 48, 57, 97, 102, 
	13, 32, 9, 10, 48, 57, 97, 102, 
	13, 32, 9, 10, 48, 57, 97, 102, 
	13, 32, 34, 43, 47, 9, 10, 48, 
	57, 65, 90, 97, 122, 0, 13, 32, 
	34, 40, 45, 47, 48, 64, 91, 93, 
	95, 98, 104, 117, 123, 9, 10, 49, 
	57, 65, 90, 97, 122, 194, 223, 224, 
	239, 240, 244, 0, 48, 57, 13, 32, 
	45, 46, 93, 9, 10, 48, 57, 48, 
	57, 45, 48, 57, 48, 57, 13, 32, 
	47, 93, 9, 10, 48, 57, 48, 57, 
	58, 48, 57, 58, 48, 57, 48, 57, 
	58, 48, 57, 48, 57, 13, 32, 46, 
	47, 93, 9, 10, 48, 57, 13, 32, 
	47, 93, 9, 10, 48, 57, 43, 45, 
	95, 47, 57, 65, 90, 97, 122, 13, 
	32, 43, 45, 93, 95, 9, 10, 47, 
	57, 65, 90, 97, 122, 13, 32, 47, 
	93, 9, 10, 48, 57, 13, 32, 47, 
	93, 9, 10, 48, 57, 13, 32, 47, 
	93, 9, 10, 48, 57, 13, 32, 47, 
	93, 9, 10, 48, 57, 13, 32, 47, 
	93, 9, 10, 48, 57, 13, 32, 47, 
	93, 9, 10, 48, 57, 13, 32, 47, 
	93, 9, 10, 48, 57, 13, 32, 47, 
	93, 9, 10, 13, 32, 47, 93, 9, 
	10, 45, 48, 57, 13, 32, 93, 101, 
	9, 10, 48, 57, 43, 45, 48, 57, 
	48, 57, 13, 32, 93, 9, 10, 48, 
	57, 13, 32, 93, 9, 10, 0, 13, 
	32, 34, 40, 45, 47, 48, 64, 91, 
	95, 98, 104, 117, 123, 9, 10, 49, 
	57, 65, 90, 97, 122, 194, 223, 224, 
	239, 240, 244, 0, 48, 64, 49, 57, 
	13, 32, 45, 46, 93, 98, 111, 120, 
	9, 10, 48, 57, 48, 49, 13, 32, 
	93, 9, 10, 48, 49, 48, 55, 13, 
	32, 93, 9, 10, 48, 55, 48, 57, 
	97, 102, 13, 32, 46, 93, 9, 10, 
	48, 57, 97, 102, 48, 57, 97, 102, 
	112, 48, 57, 97, 102, 43, 45, 48, 
	57, 48, 57, 13, 32, 93, 9, 10, 
	48, 57, 105, 110, 102, 13, 32, 93, 
	9, 10, 42, 47, 13, 32, 45, 46, 
	58, 93, 98, 111, 120, 9, 10, 48, 
	57, 13, 32, 45, 46, 58, 93, 9, 
	10, 48, 57, 48, 57, 48, 57, 58, 
	48, 57, 48, 57, 13, 32, 46, 47, 
	93, 9, 10, 48, 57, 13, 32, 47, 
	93, 9, 10, 48, 57, 43, 45, 95, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	43, 45, 93, 95, 9, 10, 47, 57, 
	65, 90, 97, 122, 13, 32, 47, 93, 
	9, 10, 48, 57, 13, 32, 47, 93, 
	9, 10, 48, 57, 13, 32, 47, 93, 
	9, 10, 48, 57, 13, 32, 47, 93, 
	9, 10, 48, 57, 13, 32, 47, 93, 
	9, 10, 48, 57, 13, 32, 47, 93, 
	9, 10, 48, 57, 13, 32, 47, 93, 
	9, 10, 48, 57, 13, 32, 47, 93, 
	9, 10, 13, 32, 45, 46, 58, 93, 
	9, 10, 48, 57, 102, 105, 110, 115, 
	116, 97, 108, 115, 101, 97, 105, 110, 
	13, 32, 93, 9, 10, 108, 110, 97, 
	110, 13, 32, 93, 9, 10, 114, 117, 
	101, 13, 32, 34, 93, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 194, 223, 
	224, 239, 240, 244, 13, 32, 93, 9, 
	10, 13, 32, 93, 95, 9, 10, 48, 
	57, 65, 90, 97, 122, 194, 223, 224, 
	239, 240, 244, 128, 191, 128, 191, 128, 
	191, 128, 191, 128, 191, 128, 191, 13, 
	32, 34, 93, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 194, 223, 224, 239, 
	240, 244, 13, 32, 34, 93, 95, 9, 
	10, 48, 57, 65, 90, 97, 122, 194, 
	223, 224, 239, 240, 244, 13, 32, 34, 
	93, 95, 9, 10, 48, 57, 65, 90, 
	97, 122, 194, 223, 224, 239, 240, 244, 
	128, 191, 128, 191, 128, 191, 128, 191, 
	128, 191, 128, 191, 0, 13, 32, 34, 
	40, 45, 47, 48, 64, 95, 98, 104, 
	117, 125, 9, 10, 49, 57, 65, 90, 
	97, 122, 194, 223, 224, 239, 240, 244, 
	0, 48, 57, 13, 32, 45, 46, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 42, 47, 0, 13, 32, 
	34, 40, 45, 47, 48, 64, 91, 95, 
	98, 104, 117, 123, 9, 10, 49, 57, 
	65, 90, 97, 122, 194, 223, 224, 239, 
	240, 244, 0, 48, 57, 13, 32, 45, 
	46, 125, 9, 10, 48, 57, 48, 57, 
	45, 48, 57, 48, 57, 13, 32, 47, 
	125, 9, 10, 48, 57, 48, 57, 58, 
	48, 57, 58, 48, 57, 48, 57, 58, 
	48, 57, 48, 57, 13, 32, 46, 47, 
	125, 9, 10, 48, 57, 13, 32, 47, 
	125, 9, 10, 48, 57, 43, 45, 95, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	43, 45, 95, 125, 9, 10, 47, 57, 
	65, 90, 97, 122, 13, 32, 47, 125, 
	9, 10, 48, 57, 13, 32, 47, 125, 
	9, 10, 48, 57, 13, 32, 47, 125, 
	9, 10, 48, 57, 13, 32, 47, 125, 
	9, 10, 48, 57, 13, 32, 47, 125, 
	9, 10, 48, 57, 13, 32, 47, 125, 
	9, 10, 48, 57, 13, 32, 47, 125, 
	9, 10, 48, 57, 13, 32, 47, 125, 
	9, 10, 13, 32, 47, 125, 9, 10, 
	45, 48, 57, 13, 32, 101, 125, 9, 
	10, 48, 57, 43, 45, 48, 57, 48, 
	57, 13, 32, 125, 9, 10, 48, 57, 
	13, 32, 125, 9, 10, 0, 48, 64, 
	49, 57, 13, 32, 45, 46, 98, 111, 
	120, 125, 9, 10, 48, 57, 48, 49, 
	13, 32, 125, 9, 10, 48, 49, 48, 
	55, 13, 32, 125, 9, 10, 48, 55, 
	48, 57, 97, 102, 13, 32, 46, 125, 
	9, 10, 48, 57, 97, 102, 48, 57, 
	97, 102, 112, 48, 57, 97, 102, 43, 
	45, 48, 57, 48, 57, 13, 32, 125, 
	9, 10, 48, 57, 105, 110, 102, 13, 
	32, 125, 9, 10, 42, 47, 13, 32, 
	45, 46, 58, 98, 111, 120, 125, 9, 
	10, 48, 57, 13, 32, 45, 46, 58, 
	125, 9, 10, 48, 57, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 13, 32, 
	46, 47, 125, 9, 10, 48, 57, 13, 
	32, 47, 125, 9, 10, 48, 57, 43, 
	45, 95, 47, 57, 65, 90, 97, 122, 
	13, 32, 43, 45, 95, 125, 9, 10, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 48, 57, 13, 32, 
	47, 125, 9, 10, 13, 32, 45, 46, 
	58, 125, 9, 10, 48, 57, 102, 105, 
	110, 115, 116, 97, 108, 115, 101, 97, 
	105, 110, 13, 32, 125, 9, 10, 108, 
	110, 97, 110, 13, 32, 125, 9, 10, 
	114, 117, 101, 13, 32, 34, 95, 125, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	194, 223, 224, 239, 240, 244, 13, 32, 
	125, 9, 10, 13, 32, 95, 125, 9, 
	10, 48, 57, 65, 90, 97, 122, 194, 
	223, 224, 239, 240, 244, 128, 191, 128, 
	191, 128, 191, 128, 191, 128, 191, 128, 
	191, 13, 32, 34, 95, 125, 9, 10, 
	48, 57, 65, 90, 97, 122, 194, 223, 
	224, 239, 240, 244, 13, 32, 34, 95, 
	125, 9, 10, 48, 57, 65, 90, 97, 
	122, 194, 223, 224, 239, 240, 244, 13, 
	32, 34, 95, 125, 9, 10, 48, 57, 
	65, 90, 97, 122, 194, 223, 224, 239, 
	240, 244, 128, 191, 128, 191, 128, 191, 
	128, 191, 128, 191, 128, 191, 48, 57, 
	45, 48, 57, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 42, 47, 48, 
	57, 58, 48, 57, 58, 48, 57, 48, 
	57, 58, 48, 57, 48, 57, 13, 32, 
	46, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 42, 
	43, 45, 47, 95, 48, 57, 65, 90, 
	97, 122, 13, 32, 43, 45, 47, 61, 
	95, 9, 10, 48, 57, 65, 90, 97, 
	122, 13, 32, 42, 43, 45, 47, 61, 
	95, 9, 10, 48, 57, 65, 90, 97, 
	122, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 48, 
	57, 13, 32, 47, 61, 9, 10, 13, 
	32, 47, 61, 9, 10, 45, 48, 57, 
	13, 32, 47, 61, 101, 9, 10, 48, 
	57, 43, 45, 48, 57, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 0, 
	13, 32, 34, 40, 45, 47, 48, 64, 
	95, 98, 104, 117, 9, 10, 49, 57, 
	65, 90, 97, 122, 194, 223, 224, 239, 
	240, 244, 0, 48, 64, 49, 57, 13, 
	32, 45, 46, 47, 61, 98, 111, 120, 
	9, 10, 48, 57, 48, 49, 13, 32, 
	47, 61, 9, 10, 48, 49, 48, 55, 
	13, 32, 47, 61, 9, 10, 48, 55, 
	48, 57, 97, 102, 13, 32, 46, 47, 
	61, 9, 10, 48, 57, 97, 102, 48, 
	57, 97, 102, 112, 48, 57, 97, 102, 
	43, 45, 48, 57, 48, 57, 13, 32, 
	47, 61, 9, 10, 48, 57, 105, 110, 
	102, 13, 32, 47, 61, 9, 10, 42, 
	47, 13, 32, 45, 46, 47, 58, 61, 
	98, 111, 120, 9, 10, 48, 57, 13, 
	32, 45, 46, 47, 58, 61, 9, 10, 
	48, 57, 48, 57, 48, 57, 58, 48, 
	57, 48, 57, 13, 32, 46, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 42, 43, 45, 47, 
	95, 48, 57, 65, 90, 97, 122, 13, 
	32, 43, 45, 47, 61, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 13, 32, 
	42, 43, 45, 47, 61, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 13, 32, 
	47, 61, 9, 10, 48, 57, 13, 32, 
	47, 61, 9, 10, 48, 57, 13, 32, 
	47, 61, 9, 10, 48, 57, 13, 32, 
	47, 61, 9, 10, 48, 57, 13, 32, 
	47, 61, 9, 10, 48, 57, 13, 32, 
	47, 61, 9, 10, 48, 57, 13, 32, 
	47, 61, 9, 10, 48, 57, 13, 32, 
	47, 61, 9, 10, 13, 32, 45, 46, 
	47, 58, 61, 9, 10, 48, 57, 102, 
	105, 116, 97, 108, 115, 101, 114, 117, 
	101, 13, 32, 34, 47, 61, 95, 9, 
	10, 48, 57, 65, 90, 97, 122, 194, 
	223, 224, 239, 240, 244, 13, 32, 47, 
	61, 9, 10, 13, 32, 47, 61, 95, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	194, 223, 224, 239, 240, 244, 128, 191, 
	128, 191, 128, 191, 128, 191, 128, 191, 
	128, 191, 13, 32, 34, 47, 61, 95, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	194, 223, 224, 239, 240, 244, 13, 32, 
	34, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 194, 223, 224, 239, 
	240, 244, 13, 32, 34, 47, 61, 95, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	194, 223, 224, 239, 240, 244, 128, 191, 
	128, 191, 128, 191, 128, 191, 128, 191, 
	128, 191, 0, 13, 32, 34, 40, 41, 
	45, 47, 48, 64, 95, 98, 104, 117, 
	9, 10, 49, 57, 65, 90, 97, 122, 
	194, 223, 224, 239, 240, 244, 0, 48, 
	57, 13, 32, 45, 46, 47, 61, 9, 
	10, 48, 57, 13, 32, 47, 61, 9, 
	10, 42, 47, 0, 13, 32, 34, 40, 
	45, 47, 48, 64, 91, 95, 98, 104, 
	117, 123, 9, 10, 49, 57, 65, 90, 
	97, 122, 194, 223, 224, 239, 240, 244, 
	0, 48, 57, 13, 32, 41, 45, 46, 
	9, 10, 48, 57, 48, 57, 45, 48, 
	57, 48, 57, 13, 32, 41, 47, 9, 
	10, 48, 57, 48, 57, 58, 48, 57, 
	58, 48, 57, 48, 57, 58, 48, 57, 
	48, 57, 13, 32, 41, 46, 47, 9, 
	10, 48, 57, 13, 32, 41, 47, 9, 
	10, 48, 57, 43, 45, 95, 47, 57, 
	65, 90, 97, 122, 13, 32, 41, 43, 
	45, 95, 9, 10, 47, 57, 65, 90, 
	97, 122, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	48, 57, 13, 32, 41, 47, 9, 10, 
	13, 32, 41, 47, 9, 10, 45, 48, 
	57, 13, 32, 41, 101, 9, 10, 48, 
	57, 43, 45, 48, 57, 48, 57, 13, 
	32, 41, 9, 10, 48, 57, 13, 32, 
	41, 9, 10, 0, 48, 64, 49, 57, 
	13, 32, 41, 45, 46, 98, 111, 120, 
	9, 10, 48, 57, 48, 49, 13, 32, 
	41, 9, 10, 48, 49, 48, 55, 13, 
	32, 41, 9, 10, 48, 55, 48, 57, 
	97, 102, 13, 32, 41, 46, 9, 10, 
	48, 57, 97, 102, 48, 57, 97, 102, 
	112, 48, 57, 97, 102, 43, 45, 48, 
	57, 48, 57, 13, 32, 41, 9, 10, 
	48, 57, 105, 110, 102, 13, 32, 41, 
	9, 10, 42, 47, 13, 32, 41, 45, 
	46, 58, 98, 111, 120, 9, 10, 48, 
	57, 13, 32, 41, 45, 46, 58, 9, 
	10, 48, 57, 48, 57, 48, 57, 58, 
	48, 57, 48, 57, 13, 32, 41, 46, 
	47, 9, 10, 48, 57, 13, 32, 41, 
	47, 9, 10, 48, 57, 43, 45, 95, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	41, 43, 45, 95, 9, 10, 47, 57, 
	65, 90, 97, 122, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 48, 57, 13, 32, 41, 47, 
	9, 10, 13, 32, 41, 45, 46, 58, 
	9, 10, 48, 57, 102, 105, 110, 115, 
	116, 97, 108, 115, 101, 97, 105, 110, 
	13, 32, 41, 9, 10, 108, 110, 97, 
	110, 13, 32, 41, 9, 10, 114, 117, 
	101, 13, 32, 34, 41, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 194, 223, 
	224, 239, 240, 244, 13, 32, 41, 9, 
	10, 13, 32, 41, 95, 9, 10, 48, 
	57, 65, 90, 97, 122, 194, 223, 224, 
	239, 240, 244, 128, 191, 128, 191, 128, 
	191, 128, 191, 128, 191, 128, 191, 13, 
	32, 34, 41, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 194, 223, 224, 239, 
	240, 244, 13, 32, 34, 41, 95, 9, 
	10, 48, 57, 65, 90, 97, 122, 194, 
	223, 224, 239, 240, 244, 13, 32, 34, 
	41, 95, 9, 10, 48, 57, 65, 90, 
	97, 122, 194, 223, 224, 239, 240, 244, 
	128, 191, 128, 191, 128, 191, 128, 191, 
	128, 191, 128, 191, 48, 57, 45, 48, 
	57, 48, 57, 13, 32, 47, 61, 9, 
	10, 48, 57, 42, 47, 48, 57, 58, 
	48, 57, 58, 48, 57, 48, 57, 58, 
	48, 57, 48, 57, 13, 32, 46, 47, 
	61, 9, 10, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 42, 43, 45, 
	47, 95, 48, 57, 65, 90, 97, 122, 
	13, 32, 43, 45, 47, 61, 95, 9, 
	10, 48, 57, 65, 90, 97, 122, 13, 
	32, 42, 43, 45, 47, 61, 95, 9, 
	10, 48, 57, 65, 90, 97, 122, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 48, 57, 13, 
	32, 47, 61, 9, 10, 13, 32, 47, 
	61, 9, 10, 45, 48, 57, 13, 32, 
	47, 61, 101, 9, 10, 48, 57, 43, 
	45, 48, 57, 48, 57, 13, 32, 47, 
	61, 9, 10, 48, 57, 0, 13, 32, 
	34, 40, 45, 47, 48, 64, 95, 98, 
	104, 117, 9, 10, 49, 57, 65, 90, 
	97, 122, 194, 223, 224, 239, 240, 244, 
	0, 48, 64, 49, 57, 13, 32, 45, 
	46, 47, 61, 98, 111, 120, 9, 10, 
	48, 57, 48, 49, 13, 32, 47, 61, 
	9, 10, 48, 49, 48, 55, 13, 32, 
	47, 61, 9, 10, 48, 55, 48, 57, 
	97, 102, 13, 32, 46, 47, 61, 9, 
	10, 48, 57, 97, 102, 48, 57, 97, 
	102, 112, 48, 57, 97, 102, 43, 45, 
	48, 57, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 105, 110, 102, 13, 
	32, 47, 61, 9, 10, 42, 47, 13, 
	32, 45, 46, 47, 58, 61, 98, 111, 
	120, 9, 10, 48, 57, 13, 32, 45, 
	46, 47, 58, 61, 9, 10, 48, 57, 
	48, 57, 48, 57, 58, 48, 57, 48, 
	57, 13, 32, 46, 47, 61, 9, 10, 
	48, 57, 13, 32, 47, 61, 9, 10, 
	48, 57, 42, 43, 45, 47, 95, 48, 
	57, 65, 90, 97, 122, 13, 32, 43, 
	45, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 42, 43, 
	45, 47, 61, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 48, 57, 13, 32, 47, 61, 
	9, 10, 13, 32, 45, 46, 47, 58, 
	61, 9, 10, 48, 57, 102, 105, 116, 
	97, 108, 115, 101, 114, 117, 101, 13, 
	32, 34, 47, 61, 95, 9, 10, 48, 
	57, 65, 90, 97, 122, 194, 223, 224, 
	239, 240, 244, 13, 32, 47, 61, 9, 
	10, 13, 32, 47, 61, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 194, 223, 
	224, 239, 240, 244, 128, 191, 128, 191, 
	128, 191, 128, 191, 128, 191, 128, 191, 
	13, 32, 34, 47, 61, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 194, 223, 
	224, 239, 240, 244, 13, 32, 34, 47, 
	61, 95, 9, 10, 48, 57, 65, 90, 
	97, 122, 194, 223, 224, 239, 240, 244, 
	13, 32, 34, 47, 61, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 194, 223, 
	224, 239, 240, 244, 128, 191, 128, 191, 
	128, 191, 128, 191, 128, 191, 128, 191, 
	13, 32, 45, 46, 9, 10, 48, 57, 
	13, 32, 9, 10, 13, 32, 47, 9, 
	10, 48, 57, 13, 32, 46, 47, 9, 
	10, 13, 32, 47, 9, 10, 48, 57, 
	13, 32, 43, 45, 95, 9, 10, 47, 
	57, 65, 90, 97, 122, 13, 32, 47, 
	9, 10, 48, 57, 13, 32, 47, 9, 
	10, 48, 57, 13, 32, 47, 9, 10, 
	48, 57, 13, 32, 47, 9, 10, 48, 
	57, 13, 32, 47, 9, 10, 48, 57, 
	13, 32, 47, 9, 10, 48, 57, 13, 
	32, 47, 9, 10, 48, 57, 13, 32, 
	47, 9, 10, 13, 32, 47, 9, 10, 
	13, 32, 101, 9, 10, 48, 57, 13, 
	32, 9, 10, 48, 57, 13, 32, 45, 
	46, 98, 111, 120, 9, 10, 48, 57, 
	13, 32, 9, 10, 48, 49, 13, 32, 
	9, 10, 48, 55, 13, 32, 46, 9, 
	10, 48, 57, 97, 102, 13, 32, 9, 
	10, 48, 57, 13, 32, 9, 10, 13, 
	32, 45, 46, 58, 98, 111, 120, 9, 
	10, 48, 57, 13, 32, 45, 46, 58, 
	9, 10, 48, 57, 13, 32, 46, 47, 
	9, 10, 13, 32, 47, 9, 10, 48, 
	57, 13, 32, 43, 45, 95, 9, 10, 
	47, 57, 65, 90, 97, 122, 13, 32, 
	47, 9, 10, 48, 57, 13, 32, 47, 
	9, 10, 48, 57, 13, 32, 47, 9, 
	10, 48, 57, 13, 32, 47, 9, 10, 
	48, 57, 13, 32, 47, 9, 10, 48, 
	57, 13, 32, 47, 9, 10, 48, 57, 
	13, 32, 47, 9, 10, 48, 57, 13, 
	32, 47, 9, 10, 13, 32, 45, 46, 
	58, 9, 10, 48, 57, 13, 32, 9, 
	10, 13, 32, 9, 10, 13, 32, 34, 
	95, 9, 10, 48, 57, 65, 90, 97, 
	122, 194, 223, 224, 239, 240, 244, 13, 
	32, 9, 10, 13, 32, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 194, 223, 
	224, 239, 240, 244, 13, 32, 34, 95, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	194, 223, 224, 239, 240, 244, 13, 32, 
	34, 95, 9, 10, 48, 57, 65, 90, 
	97, 122, 194, 223, 224, 239, 240, 244, 
	13, 32, 34, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 194, 223, 224, 239, 
	240, 244, 42, 47, 
}

var _cte_single_lengths []byte = []byte{
	0, 15, 1, 0, 1, 0, 0, 1, 
	1, 0, 0, 1, 0, 0, 0, 3, 
	1, 0, 2, 0, 3, 0, 0, 0, 
	0, 1, 2, 0, 1, 1, 1, 2, 
	0, 0, 1, 0, 0, 0, 3, 5, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 2, 2, 2, 2, 5, 0, 
	1, 3, 2, 2, 5, 16, 1, 5, 
	0, 1, 0, 4, 0, 1, 1, 0, 
	0, 1, 0, 0, 5, 0, 4, 3, 
	6, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 1, 0, 4, 2, 0, 3, 
	3, 15, 3, 8, 0, 3, 0, 3, 
	0, 4, 0, 1, 2, 0, 3, 1, 
	1, 1, 3, 2, 9, 6, 0, 0, 
	1, 0, 0, 5, 0, 4, 3, 6, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	6, 5, 1, 1, 1, 1, 2, 1, 
	3, 1, 1, 1, 1, 3, 1, 1, 
	1, 5, 3, 4, 0, 0, 0, 0, 
	0, 0, 5, 5, 5, 0, 0, 0, 
	0, 0, 0, 14, 1, 6, 4, 2, 
	15, 1, 5, 0, 1, 0, 4, 0, 
	1, 1, 0, 0, 1, 0, 0, 5, 
	0, 4, 3, 6, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 0, 4, 
	2, 0, 3, 3, 3, 8, 0, 3, 
	0, 3, 0, 4, 0, 1, 2, 0, 
	3, 1, 1, 1, 3, 2, 9, 6, 
	0, 0, 1, 0, 0, 5, 0, 4, 
	3, 6, 4, 4, 4, 4, 4, 4, 
	4, 4, 6, 5, 1, 1, 1, 1, 
	2, 1, 3, 1, 1, 1, 1, 3, 
	1, 1, 1, 5, 3, 4, 0, 0, 
	0, 0, 0, 0, 5, 5, 5, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	4, 2, 1, 1, 0, 0, 1, 0, 
	0, 5, 0, 4, 5, 7, 8, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	1, 0, 5, 2, 0, 4, 13, 3, 
	9, 0, 4, 0, 4, 0, 5, 0, 
	1, 2, 0, 4, 1, 1, 1, 4, 
	2, 10, 7, 0, 0, 1, 0, 0, 
	5, 0, 4, 5, 7, 8, 4, 4, 
	4, 4, 4, 4, 4, 4, 7, 3, 
	1, 1, 1, 1, 1, 1, 1, 6, 
	4, 5, 0, 0, 0, 0, 0, 0, 
	6, 6, 6, 0, 0, 0, 0, 0, 
	0, 14, 1, 6, 4, 2, 15, 1, 
	5, 0, 1, 0, 4, 0, 1, 1, 
	0, 0, 1, 0, 0, 5, 0, 4, 
	3, 6, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 1, 0, 4, 2, 0, 
	3, 3, 3, 8, 0, 3, 0, 3, 
	0, 4, 0, 1, 2, 0, 3, 1, 
	1, 1, 3, 2, 9, 6, 0, 0, 
	1, 0, 0, 5, 0, 4, 3, 6, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	6, 5, 1, 1, 1, 1, 2, 1, 
	3, 1, 1, 1, 1, 3, 1, 1, 
	1, 5, 3, 4, 0, 0, 0, 0, 
	0, 0, 5, 5, 5, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 4, 2, 
	1, 1, 0, 0, 1, 0, 0, 5, 
	0, 4, 5, 7, 8, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 0, 
	5, 2, 0, 4, 13, 3, 9, 0, 
	4, 0, 4, 0, 5, 0, 1, 2, 
	0, 4, 1, 1, 1, 4, 2, 10, 
	7, 0, 0, 1, 0, 0, 5, 0, 
	4, 5, 7, 8, 4, 4, 4, 4, 
	4, 4, 4, 4, 7, 3, 1, 1, 
	1, 1, 1, 1, 1, 6, 4, 5, 
	0, 0, 0, 0, 0, 0, 6, 6, 
	6, 0, 0, 0, 0, 0, 0, 4, 
	2, 3, 4, 3, 5, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 2, 
	7, 2, 2, 3, 2, 2, 8, 5, 
	4, 3, 5, 3, 3, 3, 3, 3, 
	3, 3, 3, 5, 2, 2, 4, 2, 
	3, 4, 4, 4, 0, 2, 0, 0, 
	0, 0, 0, 0, 0, 
}

var _cte_range_lengths []byte = []byte{
	0, 7, 1, 1, 1, 1, 1, 1, 
	0, 1, 1, 0, 1, 1, 1, 3, 
	0, 1, 1, 1, 1, 1, 1, 2, 
	2, 2, 1, 1, 0, 0, 0, 0, 
	1, 1, 0, 1, 1, 1, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 2, 
	1, 3, 3, 3, 4, 7, 1, 2, 
	1, 1, 1, 2, 1, 1, 0, 1, 
	1, 0, 1, 1, 1, 1, 2, 3, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0, 1, 2, 1, 1, 2, 
	1, 7, 1, 2, 1, 2, 1, 2, 
	2, 3, 2, 2, 1, 1, 2, 0, 
	0, 0, 1, 0, 2, 2, 1, 1, 
	0, 1, 1, 1, 1, 2, 3, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	2, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 1, 0, 0, 
	0, 7, 1, 7, 1, 1, 1, 1, 
	1, 1, 7, 7, 7, 1, 1, 1, 
	1, 1, 1, 7, 1, 2, 1, 0, 
	7, 1, 2, 1, 1, 1, 2, 1, 
	1, 0, 1, 1, 0, 1, 1, 1, 
	1, 2, 3, 4, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 0, 1, 2, 
	1, 1, 2, 1, 1, 2, 1, 2, 
	1, 2, 2, 3, 2, 2, 1, 1, 
	2, 0, 0, 0, 1, 0, 2, 2, 
	1, 1, 0, 1, 1, 1, 1, 2, 
	3, 4, 2, 2, 2, 2, 2, 2, 
	2, 1, 2, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 1, 
	0, 0, 0, 7, 1, 7, 1, 1, 
	1, 1, 1, 1, 7, 7, 7, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 0, 1, 1, 0, 1, 
	1, 1, 1, 2, 3, 4, 4, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0, 1, 2, 1, 1, 2, 7, 1, 
	2, 1, 2, 1, 2, 2, 3, 2, 
	2, 1, 1, 2, 0, 0, 0, 1, 
	0, 2, 2, 1, 1, 0, 1, 1, 
	1, 1, 2, 3, 4, 4, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	1, 7, 1, 1, 1, 1, 1, 1, 
	7, 7, 7, 1, 1, 1, 1, 1, 
	1, 7, 1, 2, 1, 0, 7, 1, 
	2, 1, 1, 1, 2, 1, 1, 0, 
	1, 1, 0, 1, 1, 1, 1, 2, 
	3, 4, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 0, 1, 2, 1, 1, 
	2, 1, 1, 2, 1, 2, 1, 2, 
	2, 3, 2, 2, 1, 1, 2, 0, 
	0, 0, 1, 0, 2, 2, 1, 1, 
	0, 1, 1, 1, 1, 2, 3, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	2, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 1, 0, 0, 
	0, 7, 1, 7, 1, 1, 1, 1, 
	1, 1, 7, 7, 7, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 0, 1, 1, 0, 1, 1, 1, 
	1, 2, 3, 4, 4, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 0, 1, 
	2, 1, 1, 2, 7, 1, 2, 1, 
	2, 1, 2, 2, 3, 2, 2, 1, 
	1, 2, 0, 0, 0, 1, 0, 2, 
	2, 1, 1, 0, 1, 1, 1, 1, 
	2, 3, 4, 4, 2, 2, 2, 2, 
	2, 2, 2, 1, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 7, 1, 7, 
	1, 1, 1, 1, 1, 1, 7, 7, 
	7, 1, 1, 1, 1, 1, 1, 2, 
	1, 2, 1, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 2, 2, 
	2, 2, 2, 3, 2, 1, 2, 2, 
	1, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 1, 2, 1, 1, 7, 1, 
	7, 7, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
}

var _cte_index_offsets []int16 = []int16{
	0, 0, 23, 26, 28, 31, 33, 35, 
	38, 40, 42, 44, 46, 48, 50, 52, 
	59, 61, 63, 67, 69, 74, 76, 78, 
	81, 84, 88, 92, 94, 96, 98, 100, 
	103, 105, 107, 109, 111, 113, 115, 122, 
	128, 130, 132, 134, 136, 139, 141, 143, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 175, 
	177, 179, 181, 184, 187, 190, 193, 199, 
	202, 205, 212, 218, 224, 234, 258, 261, 
	269, 271, 274, 276, 283, 285, 288, 290, 
	292, 294, 296, 298, 300, 307, 309, 316, 
	323, 334, 341, 348, 355, 362, 369, 376, 
	383, 389, 395, 397, 399, 406, 410, 412, 
	418, 423, 446, 451, 462, 464, 470, 472, 
	478, 481, 489, 492, 496, 500, 502, 508, 
	510, 512, 514, 519, 522, 534, 543, 545, 
	547, 549, 551, 553, 560, 562, 569, 576, 
	587, 594, 601, 608, 615, 622, 629, 636, 
	642, 651, 657, 659, 661, 663, 665, 668, 
	670, 675, 677, 679, 681, 683, 688, 690, 
	692, 694, 707, 712, 724, 726, 728, 730, 
	732, 734, 736, 749, 762, 775, 777, 779, 
	781, 783, 785, 787, 809, 812, 821, 827, 
	830, 853, 856, 864, 866, 869, 871, 878, 
	880, 883, 885, 887, 889, 891, 893, 895, 
	902, 904, 911, 918, 929, 936, 943, 950, 
	957, 964, 971, 978, 984, 990, 992, 994, 
	1001, 1005, 1007, 1013, 1018, 1023, 1034, 1036, 
	1042, 1044, 1050, 1053, 1061, 1064, 1068, 1072, 
	1074, 1080, 1082, 1084, 1086, 1091, 1094, 1106, 
	1115, 1117, 1119, 1121, 1123, 1125, 1132, 1134, 
	1141, 1148, 1159, 1166, 1173, 1180, 1187, 1194, 
	1201, 1208, 1214, 1223, 1229, 1231, 1233, 1235, 
	1237, 1240, 1242, 1247, 1249, 1251, 1253, 1255, 
	1260, 1262, 1264, 1266, 1279, 1284, 1296, 1298, 
	1300, 1302, 1304, 1306, 1308, 1321, 1334, 1347, 
	1349, 1351, 1353, 1355, 1357, 1359, 1361, 1364, 
	1366, 1373, 1377, 1380, 1382, 1384, 1386, 1388, 
	1390, 1392, 1399, 1401, 1408, 1417, 1429, 1442, 
	1449, 1456, 1463, 1470, 1477, 1484, 1491, 1497, 
	1503, 1505, 1507, 1515, 1519, 1521, 1528, 1549, 
	1554, 1566, 1568, 1575, 1577, 1584, 1587, 1596, 
	1599, 1603, 1607, 1609, 1616, 1618, 1620, 1622, 
	1628, 1631, 1644, 1654, 1656, 1658, 1660, 1662, 
	1664, 1671, 1673, 1680, 1689, 1701, 1714, 1721, 
	1728, 1735, 1742, 1749, 1756, 1763, 1769, 1779, 
	1783, 1785, 1787, 1789, 1791, 1793, 1795, 1797, 
	1811, 1817, 1830, 1832, 1834, 1836, 1838, 1840, 
	1842, 1856, 1870, 1884, 1886, 1888, 1890, 1892, 
	1894, 1896, 1918, 1921, 1930, 1936, 1939, 1962, 
	1965, 1973, 1975, 1978, 1980, 1987, 1989, 1992, 
	1994, 1996, 1998, 2000, 2002, 2004, 2011, 2013, 
	2020, 2027, 2038, 2045, 2052, 2059, 2066, 2073, 
	2080, 2087, 2093, 2099, 2101, 2103, 2110, 2114, 
	2116, 2122, 2127, 2132, 2143, 2145, 2151, 2153, 
	2159, 2162, 2170, 2173, 2177, 2181, 2183, 2189, 
	2191, 2193, 2195, 2200, 2203, 2215, 2224, 2226, 
	2228, 2230, 2232, 2234, 2241, 2243, 2250, 2257, 
	2268, 2275, 2282, 2289, 2296, 2303, 2310, 2317, 
	2323, 2332, 2338, 2340, 2342, 2344, 2346, 2349, 
	2351, 2356, 2358, 2360, 2362, 2364, 2369, 2371, 
	2373, 2375, 2388, 2393, 2405, 2407, 2409, 2411, 
	2413, 2415, 2417, 2430, 2443, 2456, 2458, 2460, 
	2462, 2464, 2466, 2468, 2470, 2473, 2475, 2482, 
	2486, 2489, 2491, 2493, 2495, 2497, 2499, 2501, 
	2508, 2510, 2517, 2526, 2538, 2551, 2558, 2565, 
	2572, 2579, 2586, 2593, 2600, 2606, 2612, 2614, 
	2616, 2624, 2628, 2630, 2637, 2658, 2663, 2675, 
	2677, 2684, 2686, 2693, 2696, 2705, 2708, 2712, 
	2716, 2718, 2725, 2727, 2729, 2731, 2737, 2740, 
	2753, 2763, 2765, 2767, 2769, 2771, 2773, 2780, 
	2782, 2789, 2798, 2810, 2823, 2830, 2837, 2844, 
	2851, 2858, 2865, 2872, 2878, 2888, 2892, 2894, 
	2896, 2898, 2900, 2902, 2904, 2906, 2920, 2926, 
	2939, 2941, 2943, 2945, 2947, 2949, 2951, 2965, 
	2979, 2993, 2995, 2997, 2999, 3001, 3003, 3005, 
	3012, 3016, 3022, 3028, 3034, 3044, 3050, 3056, 
	3062, 3068, 3074, 3080, 3086, 3091, 3096, 3102, 
	3107, 3117, 3122, 3127, 3134, 3139, 3143, 3154, 
	3162, 3168, 3174, 3184, 3190, 3196, 3202, 3208, 
	3214, 3220, 3226, 3231, 3239, 3243, 3247, 3259, 
	3263, 3274, 3286, 3298, 3310, 3311, 3314, 3315, 
	3316, 3317, 3318, 3319, 3320, 
}

var _cte_indicies []int16 = []int16{
	0, 1, 1, 3, 4, 5, 6, 7, 
	9, 11, 10, 12, 13, 14, 15, 1, 
	8, 10, 10, 16, 17, 18, 2, 0, 
	19, 2, 20, 2, 21, 22, 2, 23, 
	2, 24, 2, 26, 25, 2, 26, 2, 
	27, 2, 28, 2, 29, 2, 30, 2, 
	31, 2, 32, 2, 33, 33, 33, 33, 
	33, 33, 2, 21, 2, 34, 2, 35, 
	36, 37, 2, 37, 2, 0, 38, 39, 
	19, 2, 40, 2, 41, 2, 42, 43, 
	2, 44, 45, 2, 46, 44, 45, 2, 
	47, 48, 49, 2, 49, 2, 50, 2, 
	51, 2, 52, 2, 53, 54, 2, 55, 
	2, 56, 2, 57, 2, 58, 2, 59, 
	2, 60, 2, 61, 61, 61, 61, 61, 
	61, 2, 62, 50, 63, 64, 65, 2, 
	66, 2, 67, 2, 68, 2, 69, 2, 
	70, 71, 2, 72, 2, 73, 2, 74, 
	2, 75, 2, 76, 2, 77, 2, 78, 
	2, 79, 2, 80, 2, 81, 2, 82, 
	2, 83, 2, 84, 2, 85, 2, 86, 
	2, 87, 2, 88, 2, 89, 2, 90, 
	2, 91, 2, 93, 92, 95, 96, 94, 
	95, 97, 94, 98, 96, 94, 100, 101, 
	99, 103, 104, 105, 106, 107, 102, 108, 
	108, 2, 109, 108, 2, 110, 110, 111, 
	110, 112, 113, 2, 110, 110, 110, 112, 
	113, 2, 114, 114, 114, 115, 116, 2, 
	117, 117, 118, 119, 120, 117, 121, 122, 
	123, 2, 124, 125, 125, 126, 127, 128, 
	129, 130, 132, 134, 135, 133, 136, 137, 
	138, 139, 125, 131, 133, 133, 140, 141, 
	142, 2, 124, 143, 2, 144, 144, 145, 
	146, 147, 144, 143, 2, 148, 2, 149, 
	150, 2, 151, 2, 152, 152, 153, 155, 
	152, 154, 2, 156, 2, 158, 157, 2, 
	158, 2, 159, 2, 160, 2, 161, 2, 
	162, 2, 163, 2, 164, 164, 165, 166, 
	167, 164, 2, 168, 2, 164, 164, 166, 
	167, 164, 169, 2, 170, 170, 170, 170, 
	170, 170, 2, 164, 164, 170, 170, 167, 
	170, 164, 170, 170, 170, 2, 164, 164, 
	166, 167, 164, 171, 2, 164, 164, 166, 
	167, 164, 172, 2, 164, 164, 166, 167, 
	164, 173, 2, 164, 164, 166, 167, 164, 
	174, 2, 164, 164, 166, 167, 164, 175, 
	2, 164, 164, 166, 167, 164, 176, 2, 
	164, 164, 166, 167, 164, 177, 2, 164, 
	164, 166, 167, 164, 2, 152, 152, 153, 
	155, 152, 2, 149, 2, 178, 2, 179, 
	179, 180, 181, 179, 178, 2, 182, 183, 
	184, 2, 184, 2, 179, 179, 180, 179, 
	184, 2, 125, 125, 135, 125, 2, 124, 
	185, 185, 126, 127, 128, 129, 130, 132, 
	134, 133, 136, 137, 138, 139, 185, 131, 
	133, 133, 140, 141, 142, 2, 124, 186, 
	187, 143, 2, 144, 144, 145, 146, 147, 
	188, 189, 190, 144, 143, 2, 191, 2, 
	144, 144, 147, 144, 191, 2, 192, 2, 
	144, 144, 147, 144, 192, 2, 193, 194, 
	2, 144, 144, 195, 147, 144, 193, 194, 
	2, 196, 197, 2, 198, 196, 197, 2, 
	199, 200, 201, 2, 201, 2, 202, 202, 
	203, 202, 201, 2, 204, 2, 205, 2, 
	206, 2, 207, 207, 208, 207, 2, 209, 
	210, 2, 144, 144, 145, 146, 212, 147, 
	188, 189, 190, 144, 211, 2, 144, 144, 
	145, 146, 212, 147, 144, 143, 2, 213, 
	2, 214, 2, 215, 2, 216, 2, 217, 
	2, 218, 218, 219, 220, 221, 218, 2, 
	222, 2, 218, 218, 220, 221, 218, 223, 
	2, 224, 224, 224, 224, 224, 224, 2, 
	218, 218, 224, 224, 221, 224, 218, 224, 
	224, 224, 2, 218, 218, 220, 221, 218, 
	225, 2, 218, 218, 220, 221, 218, 226, 
	2, 218, 218, 220, 221, 218, 227, 2, 
	218, 218, 220, 221, 218, 228, 2, 218, 
	218, 220, 221, 218, 229, 2, 218, 218, 
	220, 221, 218, 230, 2, 218, 218, 220, 
	221, 218, 231, 2, 218, 218, 220, 221, 
	218, 2, 144, 144, 145, 146, 212, 147, 
	144, 211, 2, 232, 204, 233, 234, 235, 
	2, 236, 2, 237, 2, 238, 2, 239, 
	2, 240, 241, 2, 242, 2, 243, 243, 
	244, 243, 2, 245, 2, 246, 2, 247, 
	2, 248, 2, 249, 249, 250, 249, 2, 
	251, 2, 252, 2, 253, 2, 254, 254, 
	255, 258, 257, 254, 256, 257, 257, 259, 
	260, 261, 2, 262, 262, 263, 262, 2, 
	262, 262, 263, 265, 262, 264, 265, 265, 
	266, 267, 268, 2, 269, 2, 270, 2, 
	271, 2, 272, 2, 273, 2, 274, 2, 
	254, 254, 275, 258, 257, 254, 256, 257, 
	257, 259, 260, 261, 2, 254, 254, 276, 
	258, 257, 254, 256, 257, 257, 259, 260, 
	261, 2, 254, 254, 277, 258, 257, 254, 
	256, 257, 257, 259, 260, 261, 2, 278, 
	2, 279, 2, 280, 2, 281, 2, 282, 
	2, 283, 2, 284, 285, 285, 286, 287, 
	288, 289, 290, 292, 293, 294, 295, 296, 
	297, 285, 291, 293, 293, 298, 299, 300, 
	2, 284, 301, 2, 302, 302, 303, 304, 
	305, 306, 302, 301, 2, 307, 307, 308, 
	309, 307, 2, 310, 311, 2, 312, 309, 
	309, 313, 314, 315, 316, 317, 319, 321, 
	320, 322, 323, 324, 325, 309, 318, 320, 
	320, 326, 327, 328, 2, 312, 329, 2, 
	330, 330, 331, 332, 333, 330, 329, 2, 
	334, 2, 335, 336, 2, 337, 2, 338, 
	338, 339, 341, 338, 340, 2, 342, 2, 
	344, 343, 2, 344, 2, 345, 2, 346, 
	2, 347, 2, 348, 2, 349, 2, 350, 
	350, 351, 352, 353, 350, 2, 354, 2, 
	350, 350, 352, 353, 350, 355, 2, 356, 
	356, 356, 356, 356, 356, 2, 350, 350, 
	356, 356, 356, 353, 350, 356, 356, 356, 
	2, 350, 350, 352, 353, 350, 357, 2, 
	350, 350, 352, 353, 350, 358, 2, 350, 
	350, 352, 353, 350, 359, 2, 350, 350, 
	352, 353, 350, 360, 2, 350, 350, 352, 
	353, 350, 361, 2, 350, 350, 352, 353, 
	350, 362, 2, 350, 350, 352, 353, 350, 
	363, 2, 350, 350, 352, 353, 350, 2, 
	338, 338, 339, 341, 338, 2, 335, 2, 
	364, 2, 365, 365, 366, 367, 365, 364, 
	2, 368, 369, 370, 2, 370, 2, 365, 
	365, 367, 365, 370, 2, 285, 285, 297, 
	285, 2, 312, 371, 372, 329, 2, 330, 
	330, 331, 332, 373, 374, 375, 333, 330, 
	329, 2, 376, 2, 330, 330, 333, 330, 
	376, 2, 377, 2, 330, 330, 333, 330, 
	377, 2, 378, 379, 2, 330, 330, 380, 
	333, 330, 378, 379, 2, 381, 382, 2, 
	383, 381, 382, 2, 384, 385, 386, 2, 
	386, 2, 387, 387, 388, 387, 386, 2, 
	389, 2, 390, 2, 391, 2, 392, 392, 
	393, 392, 2, 394, 395, 2, 330, 330, 
	331, 332, 397, 373, 374, 375, 333, 330, 
	396, 2, 330, 330, 331, 332, 397, 333, 
	330, 329, 2, 398, 2, 399, 2, 400, 
	2, 401, 2, 402, 2, 403, 403, 404, 
	405, 406, 403, 2, 407, 2, 403, 403, 
	405, 406, 403, 408, 2, 409, 409, 409, 
	409, 409, 409, 2, 403, 403, 409, 409, 
	409, 406, 403, 409, 409, 409, 2, 403, 
	403, 405, 406, 403, 410, 2, 403, 403, 
	405, 406, 403, 411, 2, 403, 403, 405, 
	406, 403, 412, 2, 403, 403, 405, 406, 
	403, 413, 2, 403, 403, 405, 406, 403, 
	414, 2, 403, 403, 405, 406, 403, 415, 
	2, 403, 403, 405, 406, 403, 416, 2, 
	403, 403, 405, 406, 403, 2, 330, 330, 
	331, 332, 397, 333, 330, 396, 2, 417, 
	389, 418, 419, 420, 2, 421, 2, 422, 
	2, 423, 2, 424, 2, 425, 426, 2, 
	427, 2, 428, 428, 429, 428, 2, 430, 
	2, 431, 2, 432, 2, 433, 2, 434, 
	434, 435, 434, 2, 436, 2, 437, 2, 
	438, 2, 439, 439, 440, 442, 443, 439, 
	441, 442, 442, 444, 445, 446, 2, 447, 
	447, 448, 447, 2, 447, 447, 450, 448, 
	447, 449, 450, 450, 451, 452, 453, 2, 
	454, 2, 455, 2, 456, 2, 457, 2, 
	458, 2, 459, 2, 439, 439, 460, 442, 
	443, 439, 441, 442, 442, 444, 445, 446, 
	2, 439, 439, 461, 442, 443, 439, 441, 
	442, 442, 444, 445, 446, 2, 439, 439, 
	462, 442, 443, 439, 441, 442, 442, 444, 
	445, 446, 2, 463, 2, 464, 2, 465, 
	2, 466, 2, 467, 2, 468, 2, 469, 
	2, 470, 471, 2, 472, 2, 473, 473, 
	474, 476, 473, 475, 2, 310, 311, 477, 
	2, 479, 478, 2, 479, 2, 480, 2, 
	481, 2, 482, 2, 483, 2, 484, 2, 
	485, 485, 486, 487, 488, 485, 2, 489, 
	2, 485, 485, 487, 488, 485, 490, 2, 
	310, 491, 491, 492, 491, 491, 491, 491, 
	2, 485, 485, 491, 491, 493, 488, 491, 
	485, 491, 491, 491, 2, 485, 485, 310, 
	491, 491, 494, 488, 491, 485, 491, 491, 
	491, 2, 485, 485, 487, 488, 485, 495, 
	2, 485, 485, 487, 488, 485, 496, 2, 
	485, 485, 487, 488, 485, 497, 2, 485, 
	485, 487, 488, 485, 498, 2, 485, 485, 
	487, 488, 485, 499, 2, 485, 485, 487, 
	488, 485, 500, 2, 485, 485, 487, 488, 
	485, 501, 2, 485, 485, 487, 488, 485, 
	2, 473, 473, 474, 476, 473, 2, 470, 
	2, 502, 2, 503, 503, 504, 505, 506, 
	503, 502, 2, 507, 508, 509, 2, 509, 
	2, 503, 503, 504, 505, 503, 509, 2, 
	284, 510, 510, 286, 287, 288, 289, 290, 
	292, 293, 294, 295, 296, 510, 291, 293, 
	293, 298, 299, 300, 2, 284, 511, 512, 
	301, 2, 302, 302, 303, 304, 305, 306, 
	513, 514, 515, 302, 301, 2, 516, 2, 
	302, 302, 305, 306, 302, 516, 2, 517, 
	2, 302, 302, 305, 306, 302, 517, 2, 
	518, 519, 2, 302, 302, 520, 305, 306, 
	302, 518, 519, 2, 521, 522, 2, 523, 
	521, 522, 2, 524, 525, 526, 2, 526, 
	2, 527, 527, 528, 529, 527, 526, 2, 
	530, 2, 531, 2, 532, 2, 533, 533, 
	534, 535, 533, 2, 536, 537, 2, 302, 
	302, 303, 304, 305, 539, 306, 513, 514, 
	515, 302, 538, 2, 302, 302, 303, 304, 
	305, 539, 306, 302, 301, 2, 540, 2, 
	541, 2, 542, 2, 543, 2, 544, 2, 
	545, 545, 546, 547, 548, 545, 2, 549, 
	2, 545, 545, 547, 548, 545, 550, 2, 
	310, 551, 551, 552, 551, 551, 551, 551, 
	2, 545, 545, 551, 551, 553, 548, 551, 
	545, 551, 551, 551, 2, 545, 545, 310, 
	551, 551, 554, 548, 551, 545, 551, 551, 
	551, 2, 545, 545, 547, 548, 545, 555, 
	2, 545, 545, 547, 548, 545, 556, 2, 
	545, 545, 547, 548, 545, 557, 2, 545, 
	545, 547, 548, 545, 558, 2, 545, 545, 
	547, 548, 545, 559, 2, 545, 545, 547, 
	548, 545, 560, 2, 545, 545, 547, 548, 
	545, 561, 2, 545, 545, 547, 548, 545, 
	2, 302, 302, 303, 304, 305, 539, 306, 
	302, 538, 2, 562, 530, 563, 2, 564, 
	2, 565, 2, 566, 2, 567, 2, 568, 
	2, 569, 2, 570, 2, 571, 571, 572, 
	573, 575, 576, 571, 574, 576, 576, 577, 
	578, 579, 2, 580, 580, 581, 582, 580, 
	2, 580, 580, 581, 582, 584, 580, 583, 
	584, 584, 585, 586, 587, 2, 588, 2, 
	589, 2, 590, 2, 591, 2, 592, 2, 
	593, 2, 571, 571, 594, 573, 575, 576, 
	571, 574, 576, 576, 577, 578, 579, 2, 
	571, 571, 595, 573, 575, 576, 571, 574, 
	576, 576, 577, 578, 579, 2, 571, 571, 
	596, 573, 575, 576, 571, 574, 576, 576, 
	577, 578, 579, 2, 597, 2, 598, 2, 
	599, 2, 600, 2, 601, 2, 602, 2, 
	603, 604, 604, 605, 606, 607, 608, 609, 
	610, 612, 613, 614, 615, 616, 604, 611, 
	613, 613, 617, 618, 619, 2, 603, 620, 
	2, 621, 621, 622, 623, 624, 625, 621, 
	620, 2, 626, 626, 627, 628, 626, 2, 
	629, 630, 2, 631, 628, 628, 632, 633, 
	634, 635, 636, 638, 640, 639, 641, 642, 
	643, 644, 628, 637, 639, 639, 645, 646, 
	647, 2, 631, 648, 2, 649, 649, 650, 
	651, 652, 649, 648, 2, 653, 2, 654, 
	655, 2, 656, 2, 657, 657, 658, 659, 
	657, 660, 2, 661, 2, 663, 662, 2, 
	663, 2, 664, 2, 665, 2, 666, 2, 
	667, 2, 668, 2, 669, 669, 670, 671, 
	672, 669, 2, 673, 2, 669, 669, 670, 
	672, 669, 674, 2, 675, 675, 675, 675, 
	675, 675, 2, 669, 669, 670, 675, 675, 
	675, 669, 675, 675, 675, 2, 669, 669, 
	670, 672, 669, 676, 2, 669, 669, 670, 
	672, 669, 677, 2, 669, 669, 670, 672, 
	669, 678, 2, 669, 669, 670, 672, 669, 
	679, 2, 669, 669, 670, 672, 669, 680, 
	2, 669, 669, 670, 672, 669, 681, 2, 
	669, 669, 670, 672, 669, 682, 2, 669, 
	669, 670, 672, 669, 2, 657, 657, 658, 
	659, 657, 2, 654, 2, 683, 2, 684, 
	684, 685, 686, 684, 683, 2, 687, 688, 
	689, 2, 689, 2, 684, 684, 685, 684, 
	689, 2, 604, 604, 607, 604, 2, 631, 
	690, 691, 648, 2, 649, 649, 650, 651, 
	652, 692, 693, 694, 649, 648, 2, 695, 
	2, 649, 649, 650, 649, 695, 2, 696, 
	2, 649, 649, 650, 649, 696, 2, 697, 
	698, 2, 649, 649, 650, 699, 649, 697, 
	698, 2, 700, 701, 2, 702, 700, 701, 
	2, 703, 704, 705, 2, 705, 2, 706, 
	706, 707, 706, 705, 2, 708, 2, 709, 
	2, 710, 2, 711, 711, 712, 711, 2, 
	713, 714, 2, 649, 649, 650, 651, 652, 
	716, 692, 693, 694, 649, 715, 2, 649, 
	649, 650, 651, 652, 716, 649, 648, 2, 
	717, 2, 718, 2, 719, 2, 720, 2, 
	721, 2, 722, 722, 723, 724, 725, 722, 
	2, 726, 2, 722, 722, 723, 725, 722, 
	727, 2, 728, 728, 728, 728, 728, 728, 
	2, 722, 722, 723, 728, 728, 728, 722, 
	728, 728, 728, 2, 722, 722, 723, 725, 
	722, 729, 2, 722, 722, 723, 725, 722, 
	730, 2, 722, 722, 723, 725, 722, 731, 
	2, 722, 722, 723, 725, 722, 732, 2, 
	722, 722, 723, 725, 722, 733, 2, 722, 
	722, 723, 725, 722, 734, 2, 722, 722, 
	723, 725, 722, 735, 2, 722, 722, 723, 
	725, 722, 2, 649, 649, 650, 651, 652, 
	716, 649, 715, 2, 736, 708, 737, 738, 
	739, 2, 740, 2, 741, 2, 742, 2, 
	743, 2, 744, 745, 2, 746, 2, 747, 
	747, 748, 747, 2, 749, 2, 750, 2, 
	751, 2, 752, 2, 753, 753, 754, 753, 
	2, 755, 2, 756, 2, 757, 2, 758, 
	758, 759, 760, 762, 758, 761, 762, 762, 
	763, 764, 765, 2, 766, 766, 767, 766, 
	2, 766, 766, 767, 769, 766, 768, 769, 
	769, 770, 771, 772, 2, 773, 2, 774, 
	2, 775, 2, 776, 2, 777, 2, 778, 
	2, 758, 758, 779, 760, 762, 758, 761, 
	762, 762, 763, 764, 765, 2, 758, 758, 
	780, 760, 762, 758, 761, 762, 762, 763, 
	764, 765, 2, 758, 758, 781, 760, 762, 
	758, 761, 762, 762, 763, 764, 765, 2, 
	782, 2, 783, 2, 784, 2, 785, 2, 
	786, 2, 787, 2, 788, 2, 789, 790, 
	2, 791, 2, 792, 792, 793, 795, 792, 
	794, 2, 629, 630, 796, 2, 798, 797, 
	2, 798, 2, 799, 2, 800, 2, 801, 
	2, 802, 2, 803, 2, 804, 804, 805, 
	806, 807, 804, 2, 808, 2, 804, 804, 
	806, 807, 804, 809, 2, 629, 810, 810, 
	811, 810, 810, 810, 810, 2, 804, 804, 
	810, 810, 812, 807, 810, 804, 810, 810, 
	810, 2, 804, 804, 629, 810, 810, 813, 
	807, 810, 804, 810, 810, 810, 2, 804, 
	804, 806, 807, 804, 814, 2, 804, 804, 
	806, 807, 804, 815, 2, 804, 804, 806, 
	807, 804, 816, 2, 804, 804, 806, 807, 
	804, 817, 2, 804, 804, 806, 807, 804, 
	818, 2, 804, 804, 806, 807, 804, 819, 
	2, 804, 804, 806, 807, 804, 820, 2, 
	804, 804, 806, 807, 804, 2, 792, 792, 
	793, 795, 792, 2, 789, 2, 821, 2, 
	822, 822, 823, 824, 825, 822, 821, 2, 
	826, 827, 828, 2, 828, 2, 822, 822, 
	823, 824, 822, 828, 2, 603, 829, 829, 
	605, 606, 608, 609, 610, 612, 613, 614, 
	615, 616, 829, 611, 613, 613, 617, 618, 
	619, 2, 603, 830, 831, 620, 2, 621, 
	621, 622, 623, 624, 625, 832, 833, 834, 
	621, 620, 2, 835, 2, 621, 621, 624, 
	625, 621, 835, 2, 836, 2, 621, 621, 
	624, 625, 621, 836, 2, 837, 838, 2, 
	621, 621, 839, 624, 625, 621, 837, 838, 
	2, 840, 841, 2, 842, 840, 841, 2, 
	843, 844, 845, 2, 845, 2, 846, 846, 
	847, 848, 846, 845, 2, 849, 2, 850, 
	2, 851, 2, 852, 852, 853, 854, 852, 
	2, 855, 856, 2, 621, 621, 622, 623, 
	624, 858, 625, 832, 833, 834, 621, 857, 
	2, 621, 621, 622, 623, 624, 858, 625, 
	621, 620, 2, 859, 2, 860, 2, 861, 
	2, 862, 2, 863, 2, 864, 864, 865, 
	866, 867, 864, 2, 868, 2, 864, 864, 
	866, 867, 864, 869, 2, 629, 870, 870, 
	871, 870, 870, 870, 870, 2, 864, 864, 
	870, 870, 872, 867, 870, 864, 870, 870, 
	870, 2, 864, 864, 629, 870, 870, 873, 
	867, 870, 864, 870, 870, 870, 2, 864, 
	864, 866, 867, 864, 874, 2, 864, 864, 
	866, 867, 864, 875, 2, 864, 864, 866, 
	867, 864, 876, 2, 864, 864, 866, 867, 
	864, 877, 2, 864, 864, 866, 867, 864, 
	878, 2, 864, 864, 866, 867, 864, 879, 
	2, 864, 864, 866, 867, 864, 880, 2, 
	864, 864, 866, 867, 864, 2, 621, 621, 
	622, 623, 624, 858, 625, 621, 857, 2, 
	881, 849, 882, 2, 883, 2, 884, 2, 
	885, 2, 886, 2, 887, 2, 888, 2, 
	889, 2, 890, 890, 891, 892, 894, 895, 
	890, 893, 895, 895, 896, 897, 898, 2, 
	899, 899, 900, 901, 899, 2, 899, 899, 
	900, 901, 903, 899, 902, 903, 903, 904, 
	905, 906, 2, 907, 2, 908, 2, 909, 
	2, 910, 2, 911, 2, 912, 2, 890, 
	890, 913, 892, 894, 895, 890, 893, 895, 
	895, 896, 897, 898, 2, 890, 890, 914, 
	892, 894, 895, 890, 893, 895, 895, 896, 
	897, 898, 2, 890, 890, 915, 892, 894, 
	895, 890, 893, 895, 895, 896, 897, 898, 
	2, 916, 2, 917, 2, 918, 2, 919, 
	2, 920, 2, 921, 2, 922, 922, 923, 
	924, 922, 19, 2, 925, 925, 925, 2, 
	926, 926, 927, 926, 928, 2, 929, 929, 
	930, 931, 929, 2, 929, 929, 931, 929, 
	932, 2, 929, 929, 33, 33, 33, 929, 
	33, 33, 33, 2, 929, 929, 931, 929, 
	933, 2, 929, 929, 931, 929, 934, 2, 
	929, 929, 931, 929, 935, 2, 929, 929, 
	931, 929, 936, 2, 929, 929, 931, 929, 
	937, 2, 929, 929, 931, 929, 938, 2, 
	929, 929, 931, 929, 939, 2, 929, 929, 
	931, 929, 2, 926, 926, 927, 926, 2, 
	940, 940, 941, 940, 34, 2, 940, 940, 
	940, 37, 2, 922, 922, 923, 924, 942, 
	943, 944, 922, 19, 2, 922, 922, 922, 
	40, 2, 922, 922, 922, 41, 2, 922, 
	922, 945, 922, 42, 43, 2, 946, 946, 
	946, 49, 2, 947, 947, 947, 2, 922, 
	922, 923, 924, 949, 942, 943, 944, 922, 
	948, 2, 922, 922, 923, 924, 949, 922, 
	19, 2, 950, 950, 951, 952, 950, 2, 
	950, 950, 952, 950, 953, 2, 950, 950, 
	61, 61, 61, 950, 61, 61, 61, 2, 
	950, 950, 952, 950, 954, 2, 950, 950, 
	952, 950, 955, 2, 950, 950, 952, 950, 
	956, 2, 950, 950, 952, 950, 957, 2, 
	950, 950, 952, 950, 958, 2, 950, 950, 
	952, 950, 959, 2, 950, 950, 952, 950, 
	960, 2, 950, 950, 952, 950, 2, 922, 
	922, 923, 924, 949, 922, 948, 2, 961, 
	961, 961, 2, 962, 962, 962, 2, 963, 
	963, 964, 966, 963, 965, 966, 966, 967, 
	968, 969, 2, 970, 970, 970, 2, 970, 
	970, 972, 970, 971, 972, 972, 973, 974, 
	975, 2, 963, 963, 976, 966, 963, 965, 
	966, 966, 967, 968, 969, 2, 963, 963, 
	977, 966, 963, 965, 966, 966, 967, 968, 
	969, 2, 963, 963, 978, 966, 963, 965, 
	966, 966, 967, 968, 969, 2, 2, 98, 
	96, 94, 2, 2, 2, 2, 2, 2, 
	2, 
}

var _cte_trans_targs []int16 = []int16{
	2, 1, 0, 616, 1, 20, 31, 638, 
	651, 39, 654, 616, 657, 658, 659, 616, 
	59, 60, 62, 615, 4, 5, 16, 617, 
	7, 8, 9, 10, 11, 12, 13, 618, 
	619, 620, 630, 19, 19, 631, 632, 28, 
	633, 634, 635, 635, 25, 25, 26, 27, 
	27, 636, 29, 30, 637, 1, 1, 33, 
	34, 35, 36, 640, 641, 642, 40, 44, 
	47, 50, 41, 42, 43, 616, 45, 46, 
	652, 616, 48, 49, 653, 51, 52, 616, 
	656, 55, 656, 57, 58, 656, 654, 61, 
	654, 63, 64, 654, 65, 660, 66, 67, 
	68, 661, 67, 69, 662, 70, 69, 69, 
	69, 69, 69, 69, 72, 663, 74, 664, 
	75, 75, 75, 73, 73, 76, 665, 76, 
	76, 76, 76, 76, 78, 77, 112, 113, 
	114, 131, 132, 152, 153, 169, 112, 666, 
	178, 179, 180, 112, 181, 182, 184, 79, 
	77, 80, 107, 666, 81, 82, 106, 83, 
	77, 84, 105, 666, 85, 86, 87, 88, 
	89, 90, 91, 92, 77, 93, 95, 666, 
	94, 97, 96, 98, 99, 100, 101, 102, 
	103, 104, 108, 77, 666, 109, 110, 110, 
	111, 113, 115, 127, 116, 118, 120, 117, 
	119, 121, 121, 122, 123, 123, 124, 125, 
	125, 126, 77, 666, 128, 129, 130, 77, 
	666, 113, 113, 133, 134, 135, 136, 137, 
	138, 139, 77, 140, 142, 666, 141, 144, 
	143, 145, 146, 147, 148, 149, 150, 151, 
	154, 158, 162, 166, 155, 156, 157, 112, 
	159, 161, 160, 77, 666, 112, 163, 164, 
	165, 77, 666, 167, 168, 112, 77, 170, 
	171, 171, 666, 172, 173, 175, 77, 666, 
	171, 171, 172, 173, 175, 171, 174, 171, 
	176, 177, 171, 170, 170, 170, 169, 183, 
	169, 185, 186, 169, 188, 187, 190, 334, 
	335, 352, 353, 374, 375, 383, 392, 393, 
	394, 667, 395, 396, 398, 189, 190, 301, 
	329, 191, 192, 190, 191, 192, 190, 190, 
	193, 227, 192, 228, 245, 246, 266, 267, 
	283, 227, 292, 293, 294, 227, 295, 296, 
	298, 194, 187, 195, 222, 667, 196, 197, 
	221, 198, 187, 199, 220, 667, 200, 201, 
	202, 203, 204, 205, 206, 207, 187, 208, 
	210, 667, 209, 212, 211, 213, 214, 215, 
	216, 217, 218, 219, 223, 187, 224, 667, 
	225, 225, 226, 229, 241, 230, 232, 234, 
	231, 233, 235, 235, 236, 237, 237, 238, 
	239, 239, 240, 187, 667, 242, 243, 244, 
	187, 667, 192, 192, 247, 248, 249, 250, 
	251, 252, 253, 187, 254, 256, 667, 255, 
	258, 257, 259, 260, 261, 262, 263, 264, 
	265, 268, 272, 276, 280, 269, 270, 271, 
	227, 273, 275, 274, 187, 667, 227, 277, 
	278, 279, 187, 667, 281, 282, 227, 187, 
	284, 285, 285, 667, 286, 287, 289, 187, 
	667, 285, 285, 286, 287, 289, 285, 288, 
	285, 290, 291, 285, 284, 284, 284, 283, 
	297, 283, 299, 300, 283, 302, 303, 328, 
	304, 190, 305, 327, 192, 306, 307, 308, 
	309, 310, 311, 312, 313, 190, 314, 316, 
	192, 315, 319, 317, 317, 318, 318, 320, 
	321, 322, 323, 324, 325, 326, 330, 190, 
	191, 192, 331, 332, 332, 333, 334, 336, 
	348, 337, 339, 341, 338, 340, 342, 342, 
	343, 344, 344, 345, 346, 346, 347, 190, 
	191, 192, 349, 350, 351, 190, 191, 192, 
	334, 334, 354, 355, 356, 357, 358, 359, 
	360, 190, 361, 363, 192, 362, 366, 364, 
	364, 365, 365, 367, 368, 369, 370, 371, 
	372, 373, 376, 380, 377, 378, 379, 190, 
	381, 382, 190, 190, 384, 191, 385, 192, 
	385, 386, 387, 389, 190, 191, 192, 385, 
	385, 386, 387, 389, 385, 388, 385, 390, 
	391, 385, 384, 384, 384, 383, 397, 383, 
	399, 400, 383, 402, 401, 404, 548, 668, 
	549, 566, 567, 588, 589, 597, 606, 607, 
	608, 609, 610, 612, 403, 404, 515, 543, 
	405, 406, 404, 405, 406, 404, 404, 407, 
	441, 406, 442, 459, 460, 480, 481, 497, 
	441, 506, 507, 508, 441, 509, 510, 512, 
	408, 401, 668, 409, 436, 410, 411, 435, 
	412, 401, 668, 413, 434, 414, 415, 416, 
	417, 418, 419, 420, 421, 401, 668, 422, 
	424, 423, 426, 425, 427, 428, 429, 430, 
	431, 432, 433, 437, 401, 668, 438, 439, 
	439, 440, 443, 455, 444, 446, 448, 445, 
	447, 449, 449, 450, 451, 451, 452, 453, 
	453, 454, 401, 668, 456, 457, 458, 401, 
	668, 406, 406, 461, 462, 463, 464, 465, 
	466, 467, 401, 668, 468, 470, 469, 472, 
	471, 473, 474, 475, 476, 477, 478, 479, 
	482, 486, 490, 494, 483, 484, 485, 441, 
	487, 489, 488, 401, 668, 441, 491, 492, 
	493, 401, 668, 495, 496, 441, 401, 498, 
	668, 499, 499, 500, 501, 503, 401, 668, 
	499, 499, 500, 501, 503, 499, 502, 499, 
	504, 505, 499, 498, 498, 498, 497, 511, 
	497, 513, 514, 497, 516, 517, 542, 518, 
	404, 519, 541, 406, 520, 521, 522, 523, 
	524, 525, 526, 527, 404, 528, 530, 406, 
	529, 533, 531, 531, 532, 532, 534, 535, 
	536, 537, 538, 539, 540, 544, 404, 405, 
	406, 545, 546, 546, 547, 548, 550, 562, 
	551, 553, 555, 552, 554, 556, 556, 557, 
	558, 558, 559, 560, 560, 561, 404, 405, 
	406, 563, 564, 565, 404, 405, 406, 548, 
	548, 568, 569, 570, 571, 572, 573, 574, 
	404, 575, 577, 406, 576, 580, 578, 578, 
	579, 579, 581, 582, 583, 584, 585, 586, 
	587, 590, 594, 591, 592, 593, 404, 595, 
	596, 404, 404, 598, 405, 599, 406, 599, 
	600, 601, 603, 404, 405, 406, 599, 599, 
	600, 601, 603, 599, 602, 599, 604, 605, 
	599, 598, 598, 598, 597, 611, 597, 613, 
	614, 597, 616, 3, 17, 616, 616, 6, 
	629, 616, 14, 15, 621, 622, 623, 624, 
	625, 626, 627, 628, 616, 18, 21, 22, 
	23, 24, 616, 616, 639, 32, 616, 37, 
	38, 643, 644, 645, 646, 647, 648, 649, 
	650, 616, 616, 616, 655, 656, 656, 53, 
	54, 56, 616, 656, 656, 53, 54, 56, 
	655, 655, 655, 
}

var _cte_trans_actions []int16 = []int16{
	0, 0, 0, 79, 73, 15, 0, 117, 
	117, 0, 7, 69, 7, 7, 7, 71, 
	0, 0, 0, 19, 49, 0, 49, 51, 
	53, 53, 0, 55, 55, 0, 57, 57, 
	59, 61, 25, 0, 17, 31, 19, 0, 
	33, 35, 21, 23, 27, 29, 0, 0, 
	17, 31, 0, 0, 0, 77, 75, 55, 
	55, 0, 57, 57, 59, 61, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 9, 0, 0, 0, 0, 0, 11, 
	1, 0, 3, 0, 0, 5, 1, 0, 
	3, 0, 0, 5, 0, 85, 0, 0, 
	0, 87, 77, 0, 101, 0, 99, 97, 
	89, 91, 93, 95, 0, 103, 0, 109, 
	105, 107, 0, 234, 237, 0, 255, 249, 
	252, 246, 240, 243, 0, 0, 79, 73, 
	15, 0, 117, 117, 0, 7, 69, 111, 
	7, 7, 7, 71, 0, 0, 0, 19, 
	37, 0, 0, 120, 49, 0, 49, 51, 
	63, 0, 51, 183, 53, 53, 0, 55, 
	55, 0, 57, 57, 67, 0, 0, 201, 
	59, 59, 61, 59, 59, 59, 59, 59, 
	59, 59, 25, 39, 129, 0, 0, 17, 
	31, 0, 19, 0, 0, 0, 0, 33, 
	35, 21, 23, 0, 27, 29, 0, 0, 
	17, 31, 41, 138, 0, 0, 0, 43, 
	147, 77, 75, 117, 0, 55, 55, 0, 
	57, 57, 65, 0, 0, 192, 59, 59, 
	61, 59, 59, 59, 59, 59, 59, 59, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 45, 156, 9, 0, 0, 
	0, 47, 165, 0, 0, 11, 213, 81, 
	81, 210, 266, 81, 81, 81, 83, 225, 
	0, 7, 0, 0, 0, 1, 0, 3, 
	0, 0, 5, 222, 219, 216, 1, 0, 
	3, 0, 0, 5, 0, 0, 79, 73, 
	15, 0, 117, 117, 0, 7, 7, 7, 
	7, 113, 0, 0, 0, 19, 37, 0, 
	0, 37, 37, 0, 0, 0, 77, 75, 
	0, 79, 73, 15, 0, 117, 117, 0, 
	7, 69, 7, 7, 7, 71, 0, 0, 
	0, 19, 37, 0, 0, 123, 49, 0, 
	49, 51, 63, 0, 51, 186, 53, 53, 
	0, 55, 55, 0, 57, 57, 67, 0, 
	0, 204, 59, 59, 61, 59, 59, 59, 
	59, 59, 59, 59, 25, 39, 0, 132, 
	0, 17, 31, 19, 0, 0, 0, 0, 
	33, 35, 21, 23, 0, 27, 29, 0, 
	0, 17, 31, 41, 141, 0, 0, 0, 
	43, 150, 77, 75, 117, 0, 55, 55, 
	0, 57, 57, 65, 0, 0, 195, 59, 
	59, 61, 59, 59, 59, 59, 59, 59, 
	59, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 45, 159, 9, 0, 
	0, 0, 47, 168, 0, 0, 11, 213, 
	81, 81, 210, 270, 81, 81, 81, 83, 
	228, 0, 7, 0, 0, 0, 1, 0, 
	3, 0, 0, 5, 222, 219, 216, 1, 
	0, 3, 0, 0, 5, 49, 0, 49, 
	51, 63, 63, 51, 63, 53, 53, 0, 
	55, 55, 0, 57, 57, 67, 0, 67, 
	67, 59, 59, 61, 180, 177, 262, 59, 
	59, 59, 59, 59, 59, 59, 25, 39, 
	39, 39, 0, 0, 17, 31, 0, 19, 
	0, 0, 0, 0, 33, 35, 21, 23, 
	0, 27, 29, 0, 0, 17, 31, 41, 
	41, 41, 0, 0, 0, 43, 43, 43, 
	77, 75, 117, 0, 55, 55, 0, 57, 
	57, 65, 0, 65, 65, 59, 59, 61, 
	180, 174, 258, 59, 59, 59, 59, 59, 
	59, 59, 0, 0, 0, 0, 0, 13, 
	0, 0, 11, 213, 81, 213, 81, 213, 
	210, 81, 81, 81, 83, 83, 83, 0, 
	7, 0, 0, 0, 1, 0, 3, 0, 
	0, 5, 222, 219, 216, 1, 0, 3, 
	0, 0, 5, 0, 0, 79, 73, 115, 
	15, 0, 117, 117, 0, 7, 7, 7, 
	7, 0, 0, 0, 19, 37, 0, 0, 
	37, 37, 0, 0, 0, 77, 75, 0, 
	79, 73, 15, 0, 117, 117, 0, 7, 
	69, 7, 7, 7, 71, 0, 0, 0, 
	19, 37, 126, 0, 0, 49, 0, 49, 
	51, 63, 189, 0, 51, 53, 53, 0, 
	55, 55, 0, 57, 57, 67, 207, 0, 
	0, 59, 59, 61, 59, 59, 59, 59, 
	59, 59, 59, 25, 39, 135, 0, 0, 
	17, 31, 19, 0, 0, 0, 0, 33, 
	35, 21, 23, 0, 27, 29, 0, 0, 
	17, 31, 41, 144, 0, 0, 0, 43, 
	153, 77, 75, 117, 0, 55, 55, 0, 
	57, 57, 65, 198, 0, 0, 59, 59, 
	61, 59, 59, 59, 59, 59, 59, 59, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 45, 162, 9, 0, 0, 
	0, 47, 171, 0, 0, 11, 213, 81, 
	274, 81, 210, 81, 81, 81, 83, 231, 
	0, 7, 0, 0, 0, 1, 0, 3, 
	0, 0, 5, 222, 219, 216, 1, 0, 
	3, 0, 0, 5, 49, 0, 49, 51, 
	63, 63, 51, 63, 53, 53, 0, 55, 
	55, 0, 57, 57, 67, 0, 67, 67, 
	59, 59, 61, 180, 177, 262, 59, 59, 
	59, 59, 59, 59, 59, 25, 39, 39, 
	39, 0, 0, 17, 31, 0, 19, 0, 
	0, 0, 0, 33, 35, 21, 23, 0, 
	27, 29, 0, 0, 17, 31, 41, 41, 
	41, 0, 0, 0, 43, 43, 43, 77, 
	75, 117, 0, 55, 55, 0, 57, 57, 
	65, 0, 65, 65, 59, 59, 61, 180, 
	174, 258, 59, 59, 59, 59, 59, 59, 
	59, 0, 0, 0, 0, 0, 13, 0, 
	0, 11, 213, 81, 213, 81, 213, 210, 
	81, 81, 81, 83, 83, 83, 0, 7, 
	0, 0, 0, 1, 0, 3, 0, 0, 
	5, 222, 219, 216, 1, 0, 3, 0, 
	0, 5, 37, 0, 0, 0, 63, 0, 
	51, 67, 0, 0, 59, 59, 59, 59, 
	59, 59, 59, 59, 39, 0, 0, 0, 
	0, 0, 41, 43, 117, 0, 65, 0, 
	0, 59, 59, 59, 59, 59, 59, 59, 
	59, 45, 47, 213, 81, 81, 210, 81, 
	81, 81, 83, 0, 7, 0, 0, 0, 
	222, 219, 216, 
}

var _cte_eof_actions []int16 = []int16{
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	0, 63, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 63, 39, 39, 
	37, 37, 37, 37, 41, 43, 37, 37, 
	65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 37, 45, 47, 213, 83, 
	83, 213, 213, 213, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 
}

const cte_start int = 1
const cte_first_final int = 615
const cte_error int = 0

const cte_en_comment_iterate int = 65
const cte_en_multiline_comment_iterate int = 66
const cte_en_string_iterate int = 69
const cte_en_uri_iterate int = 71
const cte_en_binary_hex_iterate int = 73
const cte_en_binary_base64_iterate int = 76
const cte_en_list_iterate int = 77
const cte_en_map_iterate int = 187
const cte_en_metadata_map_iterate int = 401
const cte_en_main int = 1


//line decoder.rl:586

type Parser struct {
    cs int // Current Ragel state
    ts int // Position: start of token
    te int // Position: end of token
    top int // Index of top of stack
    stack []int
    data []byte
    arrayStart int // Start of the current item of interest
    binaryData []byte
    binaryNext byte
    binaryAccumulator uint
    base64Digits int
    commentDepth int
    significand uint64
    significandSign int
    exponent int
    exponentSign int
    exponentAdjust int
    month int
    day int
    hour int
    minute int
    second int
    subsecond int
    subsecondMultiplier int
    timezone []byte
}

func (this *Parser) Init(maxDepth int) {
    this.stack = make([]int, maxDepth)
    this.significandSign = 1
    this.exponentSign = 1
    this.subsecondMultiplier = 1000000000
    this.timezone = make([]byte, 0, 40)
    this.binaryData = make([]byte, 0, 500)
}

func NewParser(maxDepth int) *Parser {
    this := new(Parser)
    this.Init(maxDepth)
    return this
}

func (this *Parser) flushByteArray(index int, callbacks CteDecoderCallbacks) error {
    err := callbacks.OnArrayData(this.data[this.arrayStart:index])
    if err != nil {
        return err
    }
    this.arrayStart = index
    return nil
}

func (this *Parser) flushAndAddEscapedCharacter(index int, escapedCharacter byte, callbacks CteDecoderCallbacks) error {
    this.data[index] = escapedCharacter
    if err := this.flushByteArray(index+1, callbacks); err != nil {
        return err
    }
    // Get past escape initiator and escape char
    this.arrayStart = index + 2
    return nil
}

func (this *Parser) Parse(src []byte, callbacks CteDecoderCallbacks) (isComplete bool, err error) {
//  if this.ts > 0 {
        // TODO: Read from undeflow buffer
//  }
    this.data = src
    p := 0 // Position: current
    pe := len(this.data) // Position: end of buffer
    // TODO: Change to -1 and check for end of file
    eof := pe // Position: end of file
    utfCharWidth := 0

    _ = eof
    
    
//line decoder.go:1747
	{
	 this.cs = cte_start
	 this.top = 0
	}

//line decoder.go:1753
	{
	var _klen int
	var _trans int
	var _acts int
	var _nacts uint
	var _keys int
	if p == pe {
		goto _test_eof
	}
	if  this.cs == 0 {
		goto _out
	}
_resume:
	_keys = int(_cte_key_offsets[ this.cs])
	_trans = int(_cte_index_offsets[ this.cs])

	_klen = int(_cte_single_lengths[ this.cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + _klen - 1)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + ((_upper - _lower) >> 1)
			switch {
			case  this.data[p] < _cte_trans_keys[_mid]:
				_upper = _mid - 1
			case  this.data[p] > _cte_trans_keys[_mid]:
				_lower = _mid + 1
			default:
				_trans += int(_mid - int(_keys))
				goto _match
			}
		}
		_keys += _klen
		_trans += _klen
	}

	_klen = int(_cte_range_lengths[ this.cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + (_klen << 1) - 2)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + (((_upper - _lower) >> 1) & ^1)
			switch {
			case  this.data[p] < _cte_trans_keys[_mid]:
				_upper = _mid - 2
			case  this.data[p] > _cte_trans_keys[_mid + 1]:
				_lower = _mid + 2
			default:
				_trans += int((_mid - int(_keys)) >> 1)
				goto _match
			}
		}
		_trans += _klen
	}

_match:
	_trans = int(_cte_indicies[_trans])
	 this.cs = int(_cte_trans_targs[_trans])

	if _cte_trans_actions[_trans] == 0 {
		goto _again
	}

	_acts = int(_cte_trans_actions[_trans])
	_nacts = uint(_cte_actions[_acts]); _acts++
	for ; _nacts > 0; _nacts-- {
		_acts++
		switch _cte_actions[_acts-1] {
		case 0:
//line decoder.rl:40
utfCharWidth = 2
		case 1:
//line decoder.rl:41
utfCharWidth = 3
		case 2:
//line decoder.rl:42
utfCharWidth = 4
		case 3:
//line decoder.rl:44
utfCharWidth = 1
		case 4:
//line decoder.rl:47

        err = callbacks.OnNil()
        if err != nil {
            p++; goto _out

        }
    
		case 5:
//line decoder.rl:54

        err = callbacks.OnBool(true)
        if err != nil {
            p++; goto _out

        }
    
		case 6:
//line decoder.rl:61

        err = callbacks.OnBool(false)
        if err != nil {
            p++; goto _out

        }
    
		case 7:
//line decoder.rl:70

        this.significandSign = -1
    
		case 8:
//line decoder.rl:74

        this.exponentSign = -1
    
		case 9:
//line decoder.rl:78

        this.significand = this.significand * 10 + uint64( this.data[p] - '0')
    
		case 10:
//line decoder.rl:82

        this.significand = (this.significand << 4) | uint64( this.data[p] - '0')
    
		case 11:
//line decoder.rl:84

        this.significand = (this.significand << 4) | uint64( this.data[p] - 'a' + 10)
    
		case 12:
//line decoder.rl:88

        this.significand = this.significand * 10 + uint64( this.data[p] - '0')
        this.exponentAdjust--
    
		case 13:
//line decoder.rl:93

        this.significand = (this.significand << 4) | uint64( this.data[p] - '0')
        this.exponentAdjust -= 4
    
		case 14:
//line decoder.rl:96

        this.significand = (this.significand << 4) | uint64( this.data[p] - 'a' + 10)
        this.exponentAdjust -= 4
    
		case 15:
//line decoder.rl:101

        this.exponent = this.exponent * 10 + int( this.data[p] - '0')
    
		case 16:
//line decoder.rl:110

        this.significand = (this.significand << 1) | uint64( this.data[p] - '0')
    
		case 17:
//line decoder.rl:114

        this.significand = (this.significand << 3) | uint64( this.data[p] - '0')
    
		case 18:
//line decoder.rl:120

        if this.significandSign >= 0 {
            err = callbacks.OnPositiveInt(this.significand)
        } else {
            err = callbacks.OnNegativeInt(this.significand)
        }
        this.significandSign = 1
        this.significand = 0
        if err != nil {
            p++; goto _out

        }
    
		case 19:
//line decoder.rl:133

        err = callbacks.OnDecimalFloat(int64(this.significand) * int64(this.significandSign), (this.exponent+this.exponentAdjust) * this.exponentSign)
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
        if err != nil {
            p++; goto _out

        }
    
		case 20:
//line decoder.rl:145

        err = callbacks.OnFloat(float64(this.significandSign) *
                    float64(this.significand) *
                    math.Pow(2.0, float64((this.exponent * this.exponentSign + this.exponentAdjust))))
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
        if err != nil {
            p++; goto _out

        }
    
		case 21:
//line decoder.rl:161

        err = callbacks.OnFloat(math.Inf(this.significandSign))
        this.significandSign = 1
        if err != nil {
            p++; goto _out

        }
    
		case 22:
//line decoder.rl:169

        err = callbacks.OnFloat(math.NaN())
        if err != nil {
            p++; goto _out

        }
    
		case 23:
//line decoder.rl:175

        // Just map it to regular NaN
        err = callbacks.OnFloat(math.NaN())
        if err != nil {
            p++; goto _out

        }
    
		case 24:
//line decoder.rl:183

        this.month = this.month * 10 + int( this.data[p] - '0')
    
		case 25:
//line decoder.rl:187

        this.day = this.day * 10 + int( this.data[p] - '0')
    
		case 26:
//line decoder.rl:191

        this.hour = this.hour * 10 + int( this.data[p] - '0')
    
		case 27:
//line decoder.rl:195

        this.minute = this.minute * 10 + int( this.data[p] - '0')
    
		case 28:
//line decoder.rl:199

        this.second = this.second * 10 + int( this.data[p] - '0')
    
		case 29:
//line decoder.rl:203

        this.subsecond = this.subsecond * 10 + int( this.data[p] - '0')
        this.subsecondMultiplier /= 10
    
		case 30:
//line decoder.rl:208

        this.timezone = append(this.timezone,  this.data[p])
    
		case 31:
//line decoder.rl:215

        err = callbacks.OnDate(int(this.significand) * this.significandSign, this.month, this.day)
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        if err != nil {
            p++; goto _out

        }
    
		case 32:
//line decoder.rl:226

        err = callbacks.OnTimeTZ(this.hour,
                this.minute,
                this.second,
                this.subsecond * this.subsecondMultiplier,
                string(this.timezone))
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
        if err != nil {
            p++; goto _out

        }
    
		case 33:
//line decoder.rl:243

        err = callbacks.OnTimestampTZ(int(this.significand) * this.significandSign,
                this.month,
                this.day,
                this.hour,
                this.minute,
                this.second,
                this.subsecond * this.subsecondMultiplier,
                string(this.timezone))
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
        if err != nil {
            p++; goto _out

        }
    
		case 34:
//line decoder.rl:267

        err = callbacks.OnListBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 77; goto _again

    
		case 35:
//line decoder.rl:275

        err = callbacks.OnMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 187; goto _again

    
		case 36:
//line decoder.rl:283

        err = callbacks.OnMetadataMapBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 401; goto _again

    
		case 37:
//line decoder.rl:291

        this.arrayStart = p + 1
        err = callbacks.OnCommentBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 65; goto _again

    
		case 38:
//line decoder.rl:300

        if this.commentDepth == 0 {
            err = callbacks.OnCommentBegin()
        } else {
            err = callbacks.OnArrayData(this.data[this.arrayStart:p+1])
        }
        this.arrayStart = p + 1
        this.commentDepth++
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 66; goto _again

    
		case 39:
//line decoder.rl:314

        this.arrayStart = p + 1
        err = callbacks.OnStringBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 69; goto _again

    
		case 40:
//line decoder.rl:323

        this.arrayStart = p - utfCharWidth
    
		case 41:
//line decoder.rl:325

        if this.data[p-1] != '"' {
            err = callbacks.OnStringBegin()
            if err != nil {
                fmt.Printf("Err %v\n", err)
                p++; goto _out

            }
            err = callbacks.OnArrayData(this.data[this.arrayStart:p])
            if err != nil {
                fmt.Printf("Err %v\n", err)
                p++; goto _out

            }
            err = callbacks.OnArrayEnd()
            if err != nil {
                fmt.Printf("Err %v\n", err)
                p++; goto _out

            }
        }
    
		case 42:
//line decoder.rl:345

        this.arrayStart = p + 1
        err = callbacks.OnURIBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 71; goto _again

    
		case 43:
//line decoder.rl:354

        err = callbacks.OnBytesBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 73; goto _again

    
		case 44:
//line decoder.rl:362

        err = callbacks.OnBytesBegin()
        if err != nil {
            p++; goto _out

        }
         this.stack[ this.top] =  this.cs;  this.top++;  this.cs = 76; goto _again

    
		case 45:
//line decoder.rl:378

        err = callbacks.OnArrayData(this.data[this.arrayStart:p])
        if err != nil {
            p++; goto _out

        }
        err = callbacks.OnArrayEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 46:
//line decoder.rl:390

        err = callbacks.OnArrayData(this.data[this.arrayStart:p-1])
        if err != nil {
            p++; goto _out

        }
        this.arrayStart = p-1
        this.commentDepth--
        if this.commentDepth == 0 {
            err = callbacks.OnArrayEnd()
            if err != nil {
                p++; goto _out

            }
        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 47:
//line decoder.rl:409

                err = this.flushAndAddEscapedCharacter(p-1, '\\', callbacks)
                if err != nil {
                    p++; goto _out

                }
            
		case 48:
//line decoder.rl:415

                err = this.flushAndAddEscapedCharacter(p-1, '\n', callbacks)
                if err != nil {
                    p++; goto _out

                }
            
		case 49:
//line decoder.rl:421

                err = this.flushAndAddEscapedCharacter(p-1, '\r', callbacks)
                if err != nil {
                    p++; goto _out

                }
            
		case 50:
//line decoder.rl:427

                err = this.flushAndAddEscapedCharacter(p-1, '\t', callbacks)
                if err != nil {
                    p++; goto _out

                }
            
		case 51:
//line decoder.rl:433

                err = this.flushAndAddEscapedCharacter(p-1, '"', callbacks)
                if err != nil {
                    p++; goto _out

                }
            
		case 52:
//line decoder.rl:439

                return false, fmt.Errorf("\\%c: Illegal escape encoding", this.data[p])
            
		case 53:
//line decoder.rl:446

        err = callbacks.OnArrayData(this.data[this.arrayStart:p])
        if err != nil {
            p++; goto _out

        }
        err = callbacks.OnArrayEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 54:
//line decoder.rl:458

        err = callbacks.OnArrayData(this.data[this.arrayStart:p])
        if err != nil {
            p++; goto _out

        }
        err = callbacks.OnArrayEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 55:
//line decoder.rl:470

        this.binaryNext = ( this.data[p] - '0') << 4
    
		case 56:
//line decoder.rl:473

        this.binaryNext = ( this.data[p] - 'a' + 10) << 4
    
		case 57:
//line decoder.rl:476

        this.binaryNext |=  this.data[p] - '0'
    
		case 58:
//line decoder.rl:479

        this.binaryNext |=  this.data[p] - 'a' + 10
    
		case 59:
//line decoder.rl:482

        this.binaryData = append(this.binaryData, this.binaryNext)
    
		case 60:
//line decoder.rl:486

        err = callbacks.OnArrayData(this.binaryData)
        if err != nil {
            p++; goto _out

        }
        this.binaryData = this.binaryData[:0]
        err = callbacks.OnArrayEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 61:
//line decoder.rl:499

        this.binaryAccumulator = (this.binaryAccumulator << 6) | uint( this.data[p] - 'A')
    
		case 62:
//line decoder.rl:502

        this.binaryAccumulator = (this.binaryAccumulator << 6) | uint( this.data[p] - 'a' + 26)
    
		case 63:
//line decoder.rl:505

        this.binaryAccumulator = (this.binaryAccumulator << 6) | uint( this.data[p] - '0' + 52)
    
		case 64:
//line decoder.rl:508

        this.binaryAccumulator = (this.binaryAccumulator << 6) | 62
    
		case 65:
//line decoder.rl:511

        this.binaryAccumulator = (this.binaryAccumulator << 6) | 63
    
		case 66:
//line decoder.rl:515

        this.base64Digits++
        if this.base64Digits == 4 {
            this.binaryData = append(this.binaryData, byte(this.binaryAccumulator >> 16))
            this.binaryData = append(this.binaryData, byte(this.binaryAccumulator >> 8))
            this.binaryData = append(this.binaryData, byte(this.binaryAccumulator))
            this.binaryAccumulator = 0
            this.base64Digits = 0
        }
    
		case 67:
//line decoder.rl:526

        switch this.base64Digits {
            case 0:
                break
            case 1:
                // TODO: Invalid
            case 2:
                this.binaryData = append(this.binaryData, byte(this.binaryAccumulator >> 4))
            case 3:
                this.binaryData = append(this.binaryData, byte(this.binaryAccumulator >> 10))
                this.binaryData = append(this.binaryData, byte(this.binaryAccumulator >> 2))
        }
        this.binaryAccumulator = 0
        this.base64Digits = 0
    
		case 68:
//line decoder.rl:542

        err = callbacks.OnArrayData(this.binaryData)
        if err != nil {
            p++; goto _out

        }
        this.binaryData = this.binaryData[:0]
        err = callbacks.OnArrayEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 69:
//line decoder.rl:555

        err = callbacks.OnContainerEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 70:
//line decoder.rl:563

        err = callbacks.OnContainerEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
		case 71:
//line decoder.rl:571

        err = callbacks.OnContainerEnd()
        if err != nil {
            p++; goto _out

        }
         this.top--;  this.cs =  this.stack[ this.top]
goto _again

    
//line decoder.go:2507
		}
	}

_again:
	if  this.cs == 0 {
		goto _out
	}
	p++
	if p != pe {
		goto _resume
	}
	_test_eof: {}
	if p == eof {
		__acts := _cte_eof_actions[ this.cs]
		__nacts := uint(_cte_actions[__acts]); __acts++
		for ; __nacts > 0; __nacts-- {
			__acts++
			switch _cte_actions[__acts-1] {
			case 18:
//line decoder.rl:120

        if this.significandSign >= 0 {
            err = callbacks.OnPositiveInt(this.significand)
        } else {
            err = callbacks.OnNegativeInt(this.significand)
        }
        this.significandSign = 1
        this.significand = 0
        if err != nil {
            p++; goto _out

        }
    
			case 19:
//line decoder.rl:133

        err = callbacks.OnDecimalFloat(int64(this.significand) * int64(this.significandSign), (this.exponent+this.exponentAdjust) * this.exponentSign)
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
        if err != nil {
            p++; goto _out

        }
    
			case 20:
//line decoder.rl:145

        err = callbacks.OnFloat(float64(this.significandSign) *
                    float64(this.significand) *
                    math.Pow(2.0, float64((this.exponent * this.exponentSign + this.exponentAdjust))))
        this.significandSign = 1
        this.significand = 0
        this.exponentAdjust = 0
        this.exponentSign = 1
        this.exponent = 0
        if err != nil {
            p++; goto _out

        }
    
			case 21:
//line decoder.rl:161

        err = callbacks.OnFloat(math.Inf(this.significandSign))
        this.significandSign = 1
        if err != nil {
            p++; goto _out

        }
    
			case 22:
//line decoder.rl:169

        err = callbacks.OnFloat(math.NaN())
        if err != nil {
            p++; goto _out

        }
    
			case 23:
//line decoder.rl:175

        // Just map it to regular NaN
        err = callbacks.OnFloat(math.NaN())
        if err != nil {
            p++; goto _out

        }
    
			case 31:
//line decoder.rl:215

        err = callbacks.OnDate(int(this.significand) * this.significandSign, this.month, this.day)
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        if err != nil {
            p++; goto _out

        }
    
			case 32:
//line decoder.rl:226

        err = callbacks.OnTimeTZ(this.hour,
                this.minute,
                this.second,
                this.subsecond * this.subsecondMultiplier,
                string(this.timezone))
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
        if err != nil {
            p++; goto _out

        }
    
			case 33:
//line decoder.rl:243

        err = callbacks.OnTimestampTZ(int(this.significand) * this.significandSign,
                this.month,
                this.day,
                this.hour,
                this.minute,
                this.second,
                this.subsecond * this.subsecondMultiplier,
                string(this.timezone))
        this.significandSign = 1
        this.significand = 0
        this.month = 0
        this.day = 0
        this.hour = 0
        this.minute = 0
        this.second = 0
        this.subsecond = 0
        this.subsecondMultiplier = 1000000000
        this.timezone = this.timezone[:]
        if err != nil {
            p++; goto _out

        }
    
			case 40:
//line decoder.rl:323

        this.arrayStart = p - utfCharWidth
    
			case 41:
//line decoder.rl:325

        if this.data[p-1] != '"' {
            err = callbacks.OnStringBegin()
            if err != nil {
                fmt.Printf("Err %v\n", err)
                p++; goto _out

            }
            err = callbacks.OnArrayData(this.data[this.arrayStart:p])
            if err != nil {
                fmt.Printf("Err %v\n", err)
                p++; goto _out

            }
            err = callbacks.OnArrayEnd()
            if err != nil {
                fmt.Printf("Err %v\n", err)
                p++; goto _out

            }
        }
    
//line decoder.go:2687
			}
		}
	}

	_out: {}
	}

//line decoder.rl:665


    if this.ts > 0 {
        // TODO: Copy to underflow buffer
        // arrayStart
        // ts doesn't seem to get used?
        // copy(this.underflow, data[ts:pe])
        // p = 0
        // pe = pe - ts
    }
    // TODO
    if this.cs == cte_error {
        err = fmt.Errorf("Parse error at %v", p)
    }
//    isComplete = this.cs == cte_parse_first;
    // TODO: Maybe there's no way to detect completion?
    isComplete = true
    return
}
